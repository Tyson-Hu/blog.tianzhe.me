<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Consensus Algorithm - Raft</title>
      <link href="/en/Raft/"/>
      <url>/en/Raft/</url>
      
        <content type="html"><![CDATA[<p>All contents are modified and cite from the paper “In Search of an Understandable Consensus Algorithm (Extended Version)” by Diego Ongaro and John Ousterhout at Stanford University. It could be checked on the <a href="https://raft.github.io/">Raft consensus algorithm website</a>. <em>For a Chinese translate version, check <a href="https://bugwz.com/2021/05/01/raft/#1%E3%80%81%E4%BB%8B%E7%BB%8D">译 - In Search of an Understandable Consensus Algorithm (Extended Version) | 咕咕 (bugwz.com)</a></em>.</p><p><em>This only talk parts of the paper, for full version check paper directly!</em></p><h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><p>Raft is a consensus algorithm for managing a replicated log. It produces a result equivalent to (multi-)Paxos, and it is as efficient as Paxos, but with a more understandable structure than Paxos.</p><p>Raft is similar in many ways to existing consensus algorithms, but it has several novel features:</p><ul><li>Strong leader: Raft uses a stronger form of leadership than other consensus algorithms. Ex. It simplifies the management of the replicated log by set log entries only flow from the leader to other servers.</li><li>Leader election: Raft uses randomized timers to elect leaders. This adds some mechanism based on the heartbeats(Implemented on PA1) from usual consensus algorithm, which makes conflicts resolve simply and rapidly.</li><li>Membership changes: Raft uses a new joint consensus approach for the mechanism of changing the set of server in the cluster. The majorities of two different configurations overlap during transitions which allows the cluster to continue operating normally during configuration changes.</li></ul><h1 id="Replicated-state-machines"><a href="#Replicated-state-machines" class="headerlink" title="Replicated state machines"></a>Replicated state machines</h1><p>Replicated state machines are used to solve a variety of fault tolerance problems in distributed system since it is a collection of servers compute identical copies of the same state that used to replace the servers who is  down which make system could continue operating.</p><h2 id="How-does-it-be-replicated"><a href="#How-does-it-be-replicated" class="headerlink" title="How does it be replicated?"></a>How does it be replicated?</h2><p>The consensus algorithm manages a replicated log containing state machine commands from clients. The state machines process identical sequences of commands from the logs, so they produce the same outputs.</p><p><img src="/en/Raft/image/image-20230425181354934.png" alt="Replicated state machines structure"></p><p>As shown in figure above, replicated state machines are typically implemented using a replicated log:</p><ol><li>Each server stores a log containing a series of commands, which its state machine executes in order.</li><li>Each log contains the same commands in the same order, so each state machine processes the same sequence of commands.</li><li>Since the state machines are deterministic, each computes the sam estate and the same sequence of outputs.</li></ol><p>Keeping the replicated log consistent is the job of the consensus algorithm. The consensus module on a server receives commands from clients and adds them to its log, then communicates with the consensus modules on other servers to ensure that every log eventually contains the same requests in the same order, <strong>even if some servers fail.</strong> Once commands are properly replicated, each server’s state machine processes them in log order, and the outputs are returned to clients. As a result, the servers appear to form a single, highly reliable state machine.</p><h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><p>Consensus algorithms for practical systems typically have the following properties:</p><ul><li>They ensure safety under all <em>non-Byzantine</em> conditions <strong>(never returning an incorrect result)</strong>, including network delays, partitions, and packet loss, duplication, and reordering.</li><li>They are fully functional (available) as long as any majority of the servers are operational and can communicate with each other and with clients.<ul><li>Thus, a typical cluster of 5 servers can tolerate the failure of any 2 servers.</li><li>Servers may later recover from state on stable storage and rejoin the cluster while they are assumed to fail by stopping.</li></ul></li><li>They do not depend on timing to ensure the consistency of the logs.<ul><li>Faulty clocks and extreme message delays can, at worst, cause availability problems.</li></ul></li><li>In the common case, a command can complete as soon as a majority of the cluster has responded to a single round of remote procedure calls. (A minority of slow servers need not impact overall system performance.)</li></ul><h1 id="What’s-wrong-with-Paxos"><a href="#What’s-wrong-with-Paxos" class="headerlink" title="What’s wrong with Paxos?"></a>What’s wrong with Paxos?</h1><p>Paxos ensures both safety and liveness, and it supports changes in cluster membership. Its correctness has been proven, and it is efficient in the normal case.</p><p>However, Paxos has two significant drawbacks:</p><h2 id="Paxos’-understanding-difficulty"><a href="#Paxos’-understanding-difficulty" class="headerlink" title="Paxos’ understanding difficulty"></a>Paxos’ understanding difficulty</h2><p>Paxos’ opaqueness derives from its choice of the <em>single-decree subset</em> as its foundation. It is divided into two stages that do not have simple intuitive explanations and cannot be understood independently, which makes it difficult to develop intuitions about why the single decree protocol works.</p><h2 id="Poor-for-building-practical-systems"><a href="#Poor-for-building-practical-systems" class="headerlink" title="Poor for building practical systems"></a>Poor for building practical systems</h2><p>Paxos does not provide a good foundation for building practical implementations. One reason is that there is no widely agreedupon algorithm for multi-Paxos since Lamport’s description only sketched possible approaches to mult-Paxos, nut many detail are missing.</p><p>Lamport’s description are mostly about single-decree Paxos, which also caused Paxos architecture became a poor one for building practical systems by the single-decree decomposition.</p><ol><li>Paxos choosing a collection of log entries <strong>independently</strong> and then melding them into a sequential log which just <strong>adds complexity</strong>. (It is simpler and more efficient to design a system <strong>around</strong> a log, where new entries are appended sequentially in a <strong>constrained order</strong>)</li><li>Paxos uses a symmetric p2p (peer-to-peer) approach at its core <em>(Although it suggests a weak form of leadership as a performance optimization)</em>. <strong>It would only makes sense in a simplified world where only one decision will be made</strong>. <em>(It is simpler and faster to <strong>first select a leader</strong></em>, then have the leader coordinate the decisions)*.</li></ol><p>As a result, <strong>practical systems bear little resemblance to Paxos.</strong> Each implementation begins with Paxos, but end with a significantly different architecture due to the difficulties in implementing Paxos. Paxos’ formulation may be a good one for proving theorems about its correctness, <strong>but real implementations are so different from Paxos that the proofs have little value.</strong> </p><blockquote><p>There are significant gaps between the description of the Paxos algorithm and the needs of a real-world system… the final system will be based on an unproven protocol. –Chubby inmplmenters</p></blockquote><p><em>A typical comment about the Paxos’ lack of practical systems implementation.</em></p><h1 id="Raft-Designing-for-understandability"><a href="#Raft-Designing-for-understandability" class="headerlink" title="Raft Designing for understandability"></a>Raft Designing for understandability</h1><p>There are several goals in designing Raft:</p><ol><li>It must provide a complete and practical foundation for system building.</li><li>It must be safe under all conditions and available under typical operating conditions.</li><li>It must be efficient for common operations.</li><li><strong>It must be possible for a large audience to understand the algorithm comfortably.</strong> (It should gives audience intuitions about algorithm, which make the extensions inevitable in real-world implementations)</li></ol><p>It used two techniques that makes analysis generally applicable.</p><h2 id="Problem-decomposition"><a href="#Problem-decomposition" class="headerlink" title="Problem decomposition"></a>Problem decomposition</h2><p>It divided problems into separate peces that could be solved, explained, and understood relatively independently.</p><p>Ex. Raft separated leader election, log replication, safety, and membership changes.</p><h2 id="Simplify-the-state-space"><a href="#Simplify-the-state-space" class="headerlink" title="Simplify the state space"></a>Simplify the state space</h2><p>It simplify the state space by reducing the number of states to consider, making the system more coherent and eliminating nondeterminism where possible.</p><p>In Raft, logs are not allowed to have holes and it limits the ways in which logs can become inconsistent with each other. Although in most cases our goal is to <strong>eliminate</strong> nondeterminism, there are some situations where <strong>nondeterminism actually improves understandability</strong>. (In particular, randomized approaches introduce nondeterminism since <strong>“It doesn’t matter which one to choice.”</strong>)</p><p>Ex. Raft use randomization to simplify the leader election algorithm.</p><h1 id="The-Raft-consensus-algorithm"><a href="#The-Raft-consensus-algorithm" class="headerlink" title="The Raft consensus algorithm"></a>The Raft consensus algorithm</h1><p>Raft is an algorithm for managing a replicated log of the form described in Section <em><a href="##replicated-state-machines">Replicated State Machine</a>.</em></p><h2 id="Summary-of-the-Raft"><a href="#Summary-of-the-Raft" class="headerlink" title="Summary of the Raft"></a>Summary of the Raft</h2><p>A condensed summary of the Raft consensus algorithm (excluding membership changes and log compaction) are shown below:</p><p><img src="/en/Raft/image/image-20230427024056966.png" alt="Summary of the Raft"></p><p>The server behavior in the upper-left box is described as a set of rules that trigger independently and repeatedly. (Section numbers such as §5.2 is meanless for this notes) A formal <a href="https://web.stanford.edu/~ouster/cgi-bin/papers/OngaroPhD.pdf">specification</a> describes the algorithm more precisely.</p><hr><p>Raft implements consensus by first electing a distinguished leader, then giving the leader complete responsibility for managing the replicated log. The leader accepts log entries from clients, replicates them on other servers, and tells servers when it is safe to apply log entries to their state machines which <strong>simplifies the management of the replicated log</strong>. A leader can fail or become disconnected from the other servers, in which case a new leader is elected.</p><p>Given the leader approach, Raft decomposes the consensus problem into three relatively independent subproblems:</p><ul><li>Leader election: a new leader must be chosen when an existing leader fails.</li><li>Log replication: the leader must accept log entries from clients and replicate them across the cluster, forcing the other logs to agree with its own.</li><li>Safety: the key safety propoerty for Raft is the State Machine Safety Property in Figure below. if any server has applied a particular log entry to its state machine, then no other server may apply a different command for the same log index.</li></ul><p><img src="/en/Raft/image/image-20230427025032704.png" alt="Raft guarantees"></p><p>Raft guarantees that each of these properties shown above is <strong>true at all times.</strong> (Section numbers such as §5.2 is meanless for this notes) </p><h2 id="Raft-basics"><a href="#Raft-basics" class="headerlink" title="Raft basics"></a>Raft basics</h2><p>A Raft cluster contains several servers. At any given time each server is one of three states: <code>leader</code>, <code>follower</code>, or <code>candidate</code>. In normal operation there is <strong>exactly one <code>leader</code></strong> and all of the other servers are <strong><code>followers</code></strong>. </p><h3 id="Leader"><a href="#Leader" class="headerlink" title="Leader"></a>Leader</h3><p>The <code>leader</code> handles all client requests (if a client contacts a <code>follower</code>, the <code>follower</code> redirects it to the <code>leader</code>.)</p><h3 id="Follower"><a href="#Follower" class="headerlink" title="Follower"></a>Follower</h3><p><code>Followers</code> are passive, they issue no requests on their own but simply respond to requests from <code>leader</code> and <code>candidates</code>.</p><h3 id="Candidate"><a href="#Candidate" class="headerlink" title="Candidate"></a>Candidate</h3><p><code>Candidate</code> is used to elect a new leader as described above.</p><h3 id="Raft-Server-States"><a href="#Raft-Server-States" class="headerlink" title="Raft Server States"></a>Raft Server States</h3><p><img src="/en/Raft/image/image-20230427190343271.png" alt="Raft Server States"></p><p>The figure above shows the states and their transitions. <code>Followers</code> only respond to requests from other servers. <strong>If a <code>follower</code> receives no communication, it becomes a <code>candidate</code> and initiates an election.</strong> A <code>candidate</code> that receives votes from a majority of the full cluster becomes the new <code>leader</code>. <code>Leaders</code> typically operate until they fail.</p><h3 id="Raft-Terms"><a href="#Raft-Terms" class="headerlink" title="Raft Terms"></a>Raft Terms</h3><p>Raft divides time into terms of arbitray length, as shown below:</p><p><img src="/en/Raft/image/image-20230430201434582.png" alt="Raft Terms"></p><p>Terms are numbered with consecutive integers. Each term begins with an election, in which one or more candidates attempt to become leader. In some situations an election will result in a split vote, in this case the term will end with <strong>no leader</strong>, and a new term (with a new election) will begin shortly. <strong>Raft ensures that there is at most one leader in a given term.</strong></p><h3 id="Raft-communication"><a href="#Raft-communication" class="headerlink" title="Raft communication"></a>Raft communication</h3><p>Raft servers communicate using remote procedure calls (RPCs), and the basic consensus algorithm requires only two types of RPCs. (The third RPC has formed later)</p><ul><li><code>RequestVote RPCs</code>: They are initiated by <code>candidates</code> during elections.</li><li><code>AppendEntries RPCs</code>: They are initiated by <code>leaders</code> to replicate log entries and provide a form of heartbeat.</li><li><code>InstallSnapshot RPCs</code>: Used for transferring snapshots between servers.</li></ul><p>Servers retry RPCs if they do not receive a response in a timely manner, and they issue RPCs in parallel for best performance.</p><h2 id="Leader-election"><a href="#Leader-election" class="headerlink" title="Leader election"></a>Leader election</h2><p>Raft uses a heartbeat mechanism to trigger leader election. When servers start up, they begin as <code>followers</code>. A server remains in <code>follower</code> state as long as it receives valid RPCs from a <code>leader</code> or <code>candidate</code>.  Leaders send periodic heartbeats (<code>AppendEntries RPCs</code> that carry no log entries) to all <code>followers</code> in order to maintain their authority. <strong>If a <code>follower</code> receives no communication over a period of time called the election timeout, then it assumes there is no viable <code>leader</code> and begins an election to choose a new <code>leader</code>.</strong></p><p>To begin an election, a <code>follower</code> increments its current term (Ex. Term 3 ➡️ Term 4) and transitions to candidate state. It then votes for <strong>itself</strong> and issues <code>RequestVote RPCs</code> in parallel to each of the other servers in the cluster. A <code>candidate</code> continues in this state until meets one of three conditions :</p><ol><li>It wins the election</li><li>Another server wins election (establishs itself as <code>leader</code>)</li><li>A period of time goes by with no winner</li></ol><p><strong>Each sever vote one <code>candidate</code> in a given term with fcfs basis.</strong> A candidate wins an election if it receives votes from a majority of the servers in the full cluster for the same term. It then sends heartbeat messages to all of the other servers to establish its authority and prevent new elections.</p><p>While waiting for votes, a <code>candidate</code> may receive an <code>AppendEntries RPC</code> from another server claiming to be leader and will have two possible situations:</p><ul><li><strong>Accept</strong>: If <code>leader</code>‘s term (included in its RPC) is at <strong>least as large as</strong> the <code>candidate</code>‘s current term, then the <code>candidate</code> recognizes the <code>leader</code> as legitimate and <strong>returns to <code>follower</code> state</strong>.</li><li><strong>Decline</strong>: If the term in the RPC is <strong>smaller</strong> than the <code>candidate</code>’s current term, then the <code>candidate</code> <strong>rejects</strong> the RPC and <strong>continues in <code>candidate</code> state</strong>.</li></ul><h3 id="Split-votes"><a href="#Split-votes" class="headerlink" title="Split votes"></a>Split votes</h3><p>The third possible outcome is that a <code>candidate</code> <strong>neither wins nor loses the election</strong>. When this happens, each <code>candidate</code> will time out and <strong>start a new election by incrementing its term and initiating another round of <code>RequestVote RPCs</code></strong>. However, without extra measures split votes could repeat indefinitely.</p><p><strong>Raft uses randomized election timeouts to ensure that split votes are rare or being resolved quickly if happened.</strong> Election timeouts are chosen randomly from a fixed interval (e.g., 150-300ms), this spreads out the servers so that in most cases only a signle server will timeout. While a server (<code>candidate</code>) wins the election and sends heartbeats before any other servers time out.</p><h2 id="Log-replication"><a href="#Log-replication" class="headerlink" title="Log replication"></a>Log replication</h2><p>Once a <code>leader</code> has been elected, it begins serving client requests. Each client request contains a command to be executed by the replicated state machines. <strong>The <code>leader</code> appends the command to its log as a new entry, then issues <code>AppendEntries RPCs</code> in parallel to each of the other servers to replicate the entry.</strong> When the entry has been safely replicated (as described below), the <code>leader</code> applies the entry to its state machine and returns the result of that execution to the client. If <code>followers</code> crash or run slowly, or if network packets are lost, <strong>the leader retries <code>AppendEntries RPCs</code> indefinitely (even after it has responded to the client) until all <code>followers</code> eventually store all log entries.</strong></p><p><img src="/en/Raft/image/image-20230501204548042.png" alt="Raft Logs"></p><p>Logs are organized as shown in figure above. Each log entry stores a state machine command along with the <code>term number</code> when the entry was received by the leader. The <code>term numbers</code> in log entries are used to detect inconsistencies between logs. Each log entry also has an integer index identifying its position in the log.</p><p>The leader decides when it is safe to apply a log entry (Called <code>committed</code>) to the state machines. Raft guarantees that <code>committed</code> entries are durable and will eventually be executed by all of the available state machines. A log entry is committed once the <code>leader</code> that created the entry has replicated it on a majority of the servers which also commits all preceding entries in the <code>leader</code>’s log, including entries created by previous leaders. The <code>leader</code> keeps track of the <strong>highest index</strong> it knows to be committed, and it includes that index in future <code>AppendEntries RPCs</code> (including heartbeats) so that the other servers eventually find out. Once a <code>follower</code> learns that a log entry is <code>committed</code>, it applies the entry to its local state machine (in log order).</p><p>In general, Raft maintains the following properties:</p><ul><li>If two entries in different logs have the same index and term, then they store the same command.</li><li>If two entries in different logs have the same index and term, then the logs are identical in all preceding entries.</li></ul><p><strong>The first property follows from the fact that a <code>leader</code> creates at most one entry with a given log index in a given term, and log entries never change their position in the log.</strong> The second property is guaranteed by a simple consistency check performed by <code>AppendEntries</code>. </p><h3 id="Consistency-check"><a href="#Consistency-check" class="headerlink" title="Consistency check"></a>Consistency check</h3><p>The consistency check acts as an induction step: the initial empty state of the logs satisfies the <code>Log Matching Property</code>, and the consistency check preserves the <code>Log Matching Property</code> whenever logs are extended. As a result, whenever <code>AppendEntries</code> returns successfully, the leader knows that the <code>follower</code>’s log is identical to its own log up through the new entries. During normal operation, the logs of the leader and followers stay consistent, so the <code>AppendEntries</code> consistency check never fails. <strong>However, <code>leader</code> crashes can leave the logs inconsistent (the old leader may not have fully replicated all of the entries in its log).</strong> These inconsistencies can compound over a series of <code>leader</code> and <code>follower</code> crashes.</p><p><img src="/en/Raft/image/image-20230501224505489.png" alt="Different Logs"></p><p>The image above shows the wats in which <code>follower</code>‘s logs may differ from that of a new <code>leader</code>.  <strong>A <code>follower</code> may be missing entries that are present on the leader, it may have extra entries that are not present on the <code>leader</code>, or both. Missing and extraneous entries in a log may span multiple terms. (Ex. leader &amp; follower [f])</strong> Scenario (f) could occur if that server was the leader for <code>term 2</code>, added several entries to its log, then crashed before committing any of them; it restarted quickly, became leader for <code>term 3</code>, and added a few more entries to its log; before any of the entries in either <code>term 2</code> or <code>term 3</code> were committed, the server crashed again and remained down for several terms.</p><p>In Raft, the leader handles inconsistencies by forcing the followers’ logs to duplicate its own. <strong>This means that conflicting entries in follower logs will be overwritten with entries from the leader’s log.</strong> </p><p>To bring a <code>follower</code>’s log into consistency with its own, <strong>the leader must find the latest log entry where the two logs agree, delete any entries in the <code>follower</code>’s log after that point, and send the <code>follower</code> all of the <code>leader</code>’s entries after that point.</strong> All of these actions happen in response to the consistency check performed by <code>AppendEntries RPCs</code>.</p><img src="image/image-20230502164335587.png" alt="AppendEntries consistency check" style="zoom:50%;" /><p>The <code>leader</code> maintains a <code>nextIndex</code> for each <code>follower</code>, which is the index of the next log entry the leader will send to that <code>follower</code>. <strong>When a <code>leader</code> first comes to power, it initializes all <code>nextIndex</code> values to the index just after the last one in its log (log index 11 in Figure above).</strong> <strong>If a <code>follower</code>’s log is inconsistent with the <code>leader</code>’s, the <code>AppendEntries consistency check</code> will fail in the next <code>AppendEntries RPC</code>. After a rejection, the <code>leader</code> decrements <code>nextIndex</code> and retries the <code>AppendEntries RPC</code>. Eventually <code>nextIndex</code> will reach a point where the <code>leader</code> and <code>follower</code> logs match.</strong> When this happens, <code>AppendEntries</code> will succeed, which removes any conflicting entries in the <code>follower</code>’s log and appends entries from the <code>leader</code>’s log (if any). Once <code>AppendEntries</code> succeeds, the <code>follower</code>’s log is consistent with the <code>leader</code>’s, and it will remain that way for the rest of the term.</p><h2 id="Safety"><a href="#Safety" class="headerlink" title="Safety"></a>Safety</h2><p>This section completes the Raft algorithm by adding a restriction on which servers may be elected leader. The restriction ensures that the <code>leader</code> for any given term contains all of the entries <code>committed</code> in previous terms. Given the election restriction, it make the rules for commitment more precise. Author also present a proof sketch for the <code>Leader Completeness Property</code> and show how it leads to correct behavior of the <code>replicated state machine</code>.</p><h3 id="Election-restriction"><a href="#Election-restriction" class="headerlink" title="Election restriction"></a>Election restriction</h3><p>In any leader-based consensus algorithm, the leader must eventually store all of the committed log entries. Unfortunately, this results in considerable additional mechanism and complexity. Raft uses a simpler approach where it guarantees that all the committed entries from previous terms are present on each new <code>leader</code> from the moment of its election, without the need to transfer those entries to the <code>leader</code>. This means that <strong>log entries only flow in one direction, from <code>leaders</code> to <code>followers</code>, and <code>leaders</code> never overwrite existing entries in their logs.</strong></p><p><img src="/en/Raft/image/image-20230502170512933.png" alt="Time Sequence"></p><p>A time sequence showing why a leader cannot determine commitment using log entries from older terms. </p><ul><li>In time (a): S1 is leader and partially replicates the log entry at index 2.</li><li>In time (b): S1 crashes; S5 is elected leader for <code>term 3</code> with votes from S3, S4, and itself. </li><li>In time (c):  S5 crashes; S1 restarts and been elected as a leader, and continues replication.</li></ul><p>At this point, the log entry from <code>term 2</code> has been replicated on a majority of the servers, but it is not committed.</p><ul><li>In scenario (d): If S1 crashes again, S5 could be elected leader (with votes from S2, S3, and S4) and overwrite the entry with its own entry from <code>term 3</code>.</li></ul><p>However, if S1 replicates an entry from its current term on a majority of the servers before crashing, which generate the new scenario:</p><ul><li>In scenario (e): The entry <code>term 4</code> is committed, thus S5 cannot win a election (<code>term 3</code> &lt; <code>term 4</code>). At this point all preceding entries in the log are committed as well.</li></ul><p>Raft uses the voting process to prevent a <code>candidate</code> from winning an election unless its log contains all committed entries. A <code>candidate</code> must contact a majority of the cluster in order to be elected, which means that <strong>every committed entry must be present in at least one of those servers.</strong> If the <code>candidate</code>’s log is at least as up-to-date as any other log in that majority (where “up-to-date” is defined precisely below), then it will hold all the committed entries. The <code>RequestVote RPC</code> implements this restriction: <strong>the RPC includes information about the <code>candidate</code>’s log, and the voter denies its vote if its own log is more up-to-date than that of the candidate.</strong></p><h4 id="What-does-“up-to-date”-defined"><a href="#What-does-“up-to-date”-defined" class="headerlink" title="What does “up-to-date” defined?"></a>What does “up-to-date” defined?</h4><p>Raft determines which of two logs is more up-to-date by <strong>comparing the index and term of the last entries in the logs.</strong> If the logs have last entries with different terms, then the log with the later term is more up-to-date. <strong>If the logs end with the same term, then whichever log is longer is more up-to-date.</strong></p><h3 id="Committing-entries-from-previous-terms"><a href="#Committing-entries-from-previous-terms" class="headerlink" title="Committing entries from previous terms"></a>Committing entries from previous terms</h3><p>As what we talk on previous section, a <code>leader</code> know that an entry from its current term is committed once that entry is stored on a majority of the servers. If a <code>leader</code> crashes before committing an entry, future <code>leaders</code> will attempt to finish replicating the entry. However, a <code>leader</code> cannot immediately conclude that an entry from a previous term is committed once it is stored on a majority of servers. The figure in section <a href="####election-restriction">Election restriction</a> illustrates a situation where an old log entry is stored on a majority of servers, yet can still be overwritten by a future leader.</p><p><img src="/en/Raft/image/image-20230502175016273.png" alt="Overlay Log"></p><p>If S1 (<code>leader</code> from <code>term T</code>) commits a new log entry from its term, and S5 is elected <code>leader</code> for a later <code>term U</code>, then there <strong>must be at least one server (S3) that accepted the log entry and also voted for S5.</strong></p><p>To eliminate problems like the one in Figure in section <a href="####election-restriction">Election restriction</a>, <strong>Raft never commits log entries from previous terms by counting replicas but only log entries from the leader’s current term are committed by counting replicas.</strong> Once an entry from the current term has been committed in this way, then all prior entries are committed indirectly because of the <code>Log Matching Property</code>. </p><p>Raft incurs this extra complexity in the commitment rules because <strong>log entries retain their original term numbers when a leader replicates entries from previous terms. In other consensus algorithms, if a new leader rereplicates entries from prior “terms,” it must do so with its new “term number.”</strong> Raft’s approach makes it easier to reason about log entries, since they maintain the same term number over time and across logs.</p><h2 id="Followeer-and-candidate-crashes"><a href="#Followeer-and-candidate-crashes" class="headerlink" title="Followeer and candidate crashes"></a>Followeer and candidate crashes</h2><p>Follower and candidate crashes are much simpler to handle than leader crashes, and they are both handled in the same way. If a <code>follower</code> or <code>candidate</code> crashes, then future <code>RequestVote</code> and <code>AppendEntries RPCs</code> sent to it will fail. Raft handles these failures by retrying indefinitely; if the crashed server restarts, then the RPC will complete successfully. If a server crashes after completing an RPC but before responding, then it will receive the same RPC again after it restarts.</p><h2 id="Timing-and-availability"><a href="#Timing-and-availability" class="headerlink" title="Timing and availability"></a>Timing and availability</h2><p>The ideal feature for Raft is that safety must not depend on timing: the system must not produce incorrect results just because some event happens more quickly or slowly than expected. However, availability (the ability of the system to respond to clients in a timely manner) must inevitably depend on timing.</p><p>Leader election is the aspect of Raft where timing is most critical. Raft will be able to elect and maintain a steady leader as long as the system satisfies the following timing requirement:</p><ul><li>broadcastTime &lt;&lt; electionTimeout &lt;&lt; MTBF (Mean Time Between Failures)[平均故障间隔]</li></ul><p>In this inequality <code>broadcastTime</code> is the average time it takes a server to send RPCs in parallel to every server in the cluster and receive their responses; <code>electionTimeout</code> is the election timeout described in Section <a href="###leader-election">Leader election</a>; and <code>MTBF</code> is the average time between failures for a single server. The broadcast time should be an order of magnitude less than the election timeout so that leaders can reliably send the heartbeat messages required to keep followers from starting elections; given the randomized approach used for election timeouts, this inequality also makes split votes unlikely. The election timeout should be a few orders of magnitude less than MTBF so that the system makes steady progress. When the leader crashes, the system will be unavailable for roughly the election timeout;</p><p>The <code>broadcast time</code> and <code>MTBF</code> are properties of the underlying system, while the <code>election timeout</code> is something we must choose. Raft’s RPCs typically require the recipient to persist information to stable storage, so the <code>broadcast time</code> may range from <code>0.5ms</code> to <code>20ms</code>, depending on storage technology. As a result, the <code>election timeout</code> is likely to be somewhere between <code>10ms</code> and <code>500ms</code>. Typical server <code>MTBFs</code> are several months or more, which easily satisfies the timing requirement.</p><h1 id="Cluster-membership-changes"><a href="#Cluster-membership-changes" class="headerlink" title="Cluster membership changes"></a>Cluster membership changes</h1><p>Up until now we have assumed that the cluster configuration (the set of servers participating in the consensus algorithm) is fixed. In practice, it will occasionally be necessary to change the configuration. Thus, a automatically configuration changes and incorporate them into the Raft consensus algorithm is needed.</p><p>For the configuration change mechanism to be safe, <strong>there must be no point during the transition where it is possible for two leaders to be elected for the same term.</strong> Unfortunately, any approach where servers switch directly from the old configuration to the new configuration is unsafe. I<strong>t isn’t possible to atomically switch all of the servers at once, so the cluster can potentially split into two independent majorities during the transition</strong> (see Figure below).</p><p><img src="/en/Raft/image/image-20230503055011803.png" alt="Cluster Membership Changes"></p><p>Switching directly from one configuration to another is unsafe because different servers will switch at different times. In this example, the cluster grows from three servers to five (green means old, blue means new). Unfortunately, there is a point in time where two different leaders can be elected for the same term, one with a majority of the old configuration (C<sub>old</sub>) and another with a majority of the new configuration (C<sub>new</sub>). （在图例中出现问题的时刻，Server1可以通过自身以及Server2的投票拿到<strong>2&#x2F;3比例的选票？？</strong> 而赢得选举，成为领导者；并且此时Server5可以通过自身和Server3以及Server4的投票 <strong>拿到3&#x2F;5比例的选票？？</strong> 赢得选举，最终存在两个领导者。）</p><h2 id="The-joint-consensus"><a href="#The-joint-consensus" class="headerlink" title="The joint consensus"></a>The joint consensus</h2><p>In order to ensure safety, configuration changes must use a two-phase approach. In Raft the cluster first switches to a transitional configuration we call <code>joint consensus</code>; once the <code>joint consensus</code> has been committed, the system then transitions to the new configuration. <strong>The <code>joint consensus</code> combines both the old and new configurations:</strong></p><ul><li>Log entries are replicated to all servers in both configurations</li><li>Any server from either configuration may serve as <code>leader</code></li><li>Agreement (for elections and entry commitment) requires separate <strong>majorities from both the old and new configurations</strong></li></ul><p>The <code>joint consensus</code> allows individual servers to transition between configurations at different times without compromising safety. Furthermore, <code>joint consensus</code> allows the cluster to continue servicing client requests throughout the configuration change.</p><p><img src="/en/Raft/image/image-20230503055750366.png" alt="Timeline For A Configuration Change"></p><p>The figure above is the timeline for a configuration change. Dashed lines (…) show configuration entries that have been created but not committed, and solid lines (__) show the latest committed configuration entry. The <code>leader</code> first creates the C<sub>old,new</sub> configuration entry in its log and commits it to C<sub>old,new</sub> (a majority of C<sub>old</sub> and a majority of C<sub>new</sub>). Then it creates the C<sub>new</sub> entry and commits it to a majority of C<sub>new</sub>. <strong>There is no point in time in which C<sub>old</sub> and C<sub>new</sub> can both make decisions independently.</strong></p><p>When the <code>leader</code> receives a request to change the configuration from C<sub>old</sub> to C<sub>new</sub>, it stores the configuration for <code>joint consensus</code> (C<sub>old,new</sub> in the figure) as a log entry and replicates that entry using the mechanisms described previously. **Once a given server adds the new configuration entry to its log, it uses that configuration for all future decisions (a server always uses the latest configuration in its log, regardless of whether the entry is committed). **This means that the <code>leader</code> will use the rules of C<sub>old,new</sub> to determine when the log entry for C<sub>old,new</sub> is committed. If the <code>leader</code> crashes, a new <code>leader</code> may be chosen under either C<sub>old</sub> or C<sub>old,new</sub> depending on whether the winning <code>candidate</code> has received C<sub>old,new</sub>. <strong>In any case, C<sub>new</sub> cannot make unilateral decisions during this period.</strong></p><p>Once C<sub>old,new</sub> has been committed, neither C<sub>old</sub> nor C<sub>new</sub> can make decisions without approval of the other, and <strong>the <code>Leader Completeness Property</code> ensures that only servers with the C<sub>old,new</sub> log entry can be elected as <code>leader</code>.</strong> It is now safe for the <code>leader</code> to create a log entry describing C<sub>new</sub> and replicate it to the cluster. Again, this configuration will take effect on each server as soon as it is seen. <strong>When the new configuration has been committed under the rules of C<sub>new</sub> the old configuration is irrelevant and servers not in the new configuration can be shut down.</strong> As shown in Figure above, there is no time when C<sub>old</sub> and C<sub>new</sub> can both make unilateral decisions; this guarantees safety.</p><h2 id="Issues-to-address-for-reconfiguration"><a href="#Issues-to-address-for-reconfiguration" class="headerlink" title="Issues to address for reconfiguration"></a>Issues to address for reconfiguration</h2><p>There are three more issues to address for reconfiguration:</p><ol><li>New servers may not initially store any log entries</li></ol><p><strong>If they are added to the cluster in this state, it could take quite a while for them to catch up, during which time it might not be possible to commit new log entries.</strong> In order to avoid availability gaps, Raft introduces an additional phase before the configuration change, in which the new servers join the cluster as <code>non-voting members</code> (the leader replicates log entries to them, but they are not considered for majorities). Once the new servers have caught up with the rest of the cluster, the reconfiguration can proceed as described above.</p><ol start="2"><li>The cluster leader may not be part of the new configuration</li></ol><p>In this case, the <code>leader</code> steps down (returns to <code>follower</code> state) once it has committed the C<sub>new</sub> log entry. **This means that there will be a period of time (while it is committing C<sub>new</sub>) when the <code>leader</code> is managing a cluster that does not include itself; it replicates log entries but does not count itself in majorities. **The leader transition occurs when C<sub>new</sub> is committed because this is the first point when the new configuration can operate independently (it will always be possible to choose a leader from C<sub>new</sub>). Before this point, it may be the case that only a server from C<sub>old</sub> can be elected <code>leader</code>.</p><ol start="3"><li>Removed servers (those not in C<sub>new</sub>) can disrupt the cluster</li></ol><p>These servers will not receive heartbeats, so they will time out and start new elections. They will then send <code>RequestVote RPCs</code> with new term numbers, and this will cause the current <code>leader</code> to revert to <code>follower</code> state. A new <code>leader</code> will eventually be elected, but the removed servers will time out again and the process will repeat, resulting in poor availability.</p><p>To prevent this problem, **servers disregard <code>RequestVote RPCs</code> when they believe a current <code>leader</code> exists. **Specifically, **if a server receives a <code>RequestVote RPC</code> within the minimum election timeout of hearing from a current <code>leader</code>, it does not update its term or grant its vote. **This does not affect normal elections, where each server <strong>waits at least a minimum election timeout before starting an election</strong>. However, it helps avoid disruptions from removed servers: if a <code>leader</code> is able to get heartbeats to its cluster, then it will not be deposed by larger term numbers.</p><h1 id="Log-compaction"><a href="#Log-compaction" class="headerlink" title="Log compaction"></a>Log compaction</h1><p>Raft’s log grows during normal operation to incorporate more client requests, but in a practical system, it cannot grow without bound. As the log grows longer, it occupies more space and takes more time to replay. This will eventually cause availability problems without some mechanism to discard obsolete information that has accumulated in the log.</p><p><strong>Snapshotting is the simplest approach to compaction.</strong> In snapshotting, the entire current system state is written to a <em>snapshot</em> on stable storage, then the entire log up to that point is discarded.</p><h2 id="Incremental-approaches-to-compaction"><a href="#Incremental-approaches-to-compaction" class="headerlink" title="Incremental approaches to compaction"></a>Incremental approaches to compaction</h2><p>These operate on a fraction of the data at once, so they spread the load of compaction more evenly over time. They first select a region of data that has accumulated many deleted and overwritten objects, then they rewrite the live objects from that region more compactly and free the region. This requires significant additional mechanism and complexity compared to snapshotting, which simplifies the problem by always operating on the entire data set. While log cleaning would require modifications to Raft, state machines can implement LSM trees using the same interface as snapshotting.</p><h2 id="Snapshots"><a href="#Snapshots" class="headerlink" title="Snapshots"></a>Snapshots</h2><p><img src="/en/Raft/image/image-20230503074226861.png" alt="Log Compression"></p><p><em>Figure description: A server replaces the committed entries in its log (indexes 1 through 5) with a new snapshot, which stores just the current state (variables x and y in this example). The snapshot’s <code>last included index</code> and <code>term</code> serve to position the snapshot in the log preceding entry 6.</em></p><p>The figure above shows the basic idea of snapshotting in Raft. Each server takes <code>snapshots</code> independently, covering just the committed entries in its log. Most of the work consists of the state machine writing its current state to the <code>snapshot</code>. Raft also includes a small amount of metadata in the snapshot: </p><ul><li><code>last included index</code>: It is the index of the last entry in the log that the snapshot replaces (the last entry the state machine had applied)</li><li><code>last included term</code>: it is the term of the entry describe above</li></ul><p>These are preserved to support the <code>AppendEntries consistency check</code> for the first log entry following the <em>snapshot</em>, since that entry needs a previous log index and term. To enable cluster membership changes (Last Section), the <em>snapshot</em> also includes the latest configuration in the log as of <code>last included index</code>. Once a server completes writing a <em>snapshot</em>, it may delete all log entries up through the <code>last included index</code>, as well as any prior <em>snapshot</em>.</p><p>Although servers normally take <em>snapshots</em> independently, the <code>leader</code> must occasionally send <em>snapshots</em> to <code>followers</code> that lag behind. This happens when the <code>leader</code> has already discarded the next log entry that it needs to send to a <code>follower</code>. Fortunately, this situation is unlikely in normal operation: a <code>follower</code> that has kept up with the <code>leader</code> would already have this entry. <strong>However, an exceptionally slow <code>follower</code> or a new server joining the cluster (as descript in Section <a href="##cluster-membership-changes">Cluster membership changes</a>) would not. The way to bring such a follower up-to-date is for the leader to send it a <em>snapshot</em> over the network.</strong></p><p><img src="/en/Raft/image/image-20230503090641802.png" alt="A summary of the InstallSnapshot RPC"></p><p>The figure above is a summary of the <code>InstallSnapshot RPC</code>. <em>Snapshots</em> are split into chunks for transmission; this gives the <code>follower</code> a sign of life with each chunk, so it can reset its election timer.</p><p>The <code>leader</code> uses a new RPC called <code>InstallSnapshot</code> to send <em>snapshots</em> to <code>followers</code> that are too far behind. <strong>When a <code>follower</code> receives a <em>snapshot</em> with this RPC, it must decide what to do with its existing log entries. <strong>Usually the <em>snapshot</em> will contain new information not already in the recipient’s log. I</strong>n this case, the <code>follower</code> discards its entire log</strong> (it is all superseded by the snapshot and may possibly have uncommitted entries that conflict with the snapshot). If instead the <code>follower</code> receives a snapshot that describes a prefix of its log (due to retransmission or by mistake), then <strong>log entries covered by the <em>snapshot</em> are deleted but entries following the <em>snapshot</em> are still valid and must be retained.</strong></p><h2 id="Issues-that-impact-snapshotting-performance"><a href="#Issues-that-impact-snapshotting-performance" class="headerlink" title="Issues that impact snapshotting performance"></a>Issues that impact snapshotting performance</h2><p>There are two more issues that impact snapshotting performance. </p><ol><li>Servers must decide when to <em>snapshot</em></li></ol><p>If a server <em>snapshots</em> too often, it wastes disk bandwidth and energy; if it <em>snapshots</em> too infrequently, it risks exhausting its storage capacity, and it increases the time required to replay the log during restarts. <strong>One simple strategy is to take a <em>snapshot</em> when the log reaches a fixed size in bytes.</strong> If this size is set to be significantly larger than the expected size of a <em>snapshot</em>, then the disk bandwidth overhead for snapshotting will be small.</p><ol start="2"><li>Writing a snapshot can take a significant amount of time</li></ol><p>The solution is to use Cow (copy-on-write) techniques so that new updates can be accepted without impacting the <em>snapshot</em> being written. For example, state machines built with functional data structures naturally support this. Alternatively, the operating system’s copy-on-write support (e.g., fork on Linux) can be used to create an in-memory <em>snapshot</em> of the entire state machine (our implementation uses this approach).</p><h1 id="Client-interaction"><a href="#Client-interaction" class="headerlink" title="Client interaction"></a>Client interaction</h1><p>This section describes how clients interact with Raft, including how clients find the cluster leader and how Raft supports linearizable semantics (线性化语义).</p><p>Clients of Raft send all of their requests to the <code>leader</code>. When a client first starts up, it connects to a randomly chosen server. <strong>If the client’s first choice is not the <code>leader</code>, that server will reject the client’s request and supply information about the most recent <code>leader</code> it has heard from (<code>AppendEntries</code> requests include the network address of the <code>leader</code>).</strong> If the <code>leader</code> crashes, client requests will time out; clients then try again with randomly-chosen servers.</p><h2 id="Linearizable-semantics"><a href="#Linearizable-semantics" class="headerlink" title="Linearizable semantics"></a>Linearizable semantics</h2><p>The goal for Raft is to implement linearizable semantics (each operation appears to execute instantaneously, exactly once, at some point between its invocation and its response). However, as described so far Raft can execute a command multiple times: for example, if the <code>leader</code> crashes after committing the log entry but before responding to the client, the client will retry the command with a new <code>leader</code>, causing it to be executed a second time.</p><p>The solution is for clients to assign <strong>unique serial numbers</strong> to every command. Then, the state machine tracks the latest serial number processed for each client, along with the associated response. <strong>If it receives a command whose serial number has already been executed, it responds immediately without re-executing the request.</strong></p><h3 id="Precautions-for-returning-stale-data"><a href="#Precautions-for-returning-stale-data" class="headerlink" title="Precautions for returning stale data"></a>Precautions for returning stale data</h3><p>Read-only operations can be handled without writing anything into the log. However, with no additional measures, this would run the risk of returning stale data, since the <code>leader </code>responding to the request might have been superseded by a newer <code>leader</code> of which it is unaware. Linearizable reads must not return stale data, and Raft needs two extra precautions to guarantee this without using the log.</p><ol><li>A <code>leader</code> must have the latest information on which entries are committed</li></ol><p>The <code>Leader Completeness Property</code> guarantees that a <code>leader</code> has all committed entries, but <strong>at the start of its term, it may not know which those are.</strong> To find out, it needs to commit an entry from its term. <strong>Raft handles this by having each <code>leader</code> commit a blank no-op entry into the log at the start of its term.</strong></p><ol start="2"><li>A <code>leader</code> must check whether it has been deposed before processing a read-only request (its information may be stale if a more recent leader has been elected).</li></ol><p>Raft handles this by having the <code>leader</code> exchange heartbeat messages with a majority of the cluster before responding to read-only requests. Alternatively, the <code>leader</code> could rely on the heartbeat mechanism to provide a form of lease, but this would rely on timing for safety (it assumes bounded clock skew).</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 刷题前言</title>
      <link href="/cn/algo-intro/"/>
      <url>/cn/algo-intro/</url>
      
        <content type="html"><![CDATA[<p>English？Click <a href="https://tianzhe.me/en/algo-intro/">here</a></p><h1 id="写在最前"><a href="#写在最前" class="headerlink" title="写在最前"></a>写在最前</h1><p>作为 Leetcode 刷题系列的前言，我想给大伙儿和我自己说明一下这个系列的目的和参考。大家如果点进这篇文章就说明大家其实都想通过 Leetcode 来提升自己的码字实力，我与大家一样也渴望通过刷题通过后面的面试，而记录在博客不单单是为了记录这过程中我的所做所想，同样还为了对未来的自己提供一个可以快速复习的资源。当然如果这些文章能给你们也带来帮助那更好，这也证明我的文笔没有想的那么烂哈哈哈哈😂 </p><h1 id="题组来自哪？"><a href="#题组来自哪？" class="headerlink" title="题组来自哪？"></a>题组来自哪？</h1><p>很多人跟我一样在第一次接触 Leetcode 时对于该去刷哪道题完全没有头绪，在这里就要非常感谢这些将所有的题目进行过滤并进行排序组合的大佬们给后辈们铺好了路！资源有很多，但目前来说我将以 “代码随想录” 提供的刷题攻略进行练习，在这里再次感谢他们无私的奉献！！！</p><h1 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h1><p>在刷题时，代码的规范性同样需要注意，这也是一个巩固自己代码规范的机会。很多人不屑于了解代码规范，将重心放在功能的实现上，这在未来大公司的小组里是非常致命的！不规范的代码会对后期的维护十分困难，也是公司招人的一个标准。</p><h2 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h2><p>主流有三种：</p><ul><li>小驼峰、大驼峰命名法</li><li>下划线命名法</li><li>匈牙利命名法</li></ul><p><code>小驼峰</code>: 第一个单词首字母小写，后面其他单词首字母大写。例如 <code>int myAge;</code><br><code>大驼峰</code>: 第一个单词的首字母也大写了。例如：<code>int MyAge;</code><br><code>下划线</code>: 名称中的每一个逻辑断点都用一个下划线来标记，例如：<code>int my_age;</code><br><code>匈牙利</code>: 变量名 &#x3D; 属性 + 类型 + 对象描述，例如：<code>int iMyAge;</code>          </p><h2 id="代码空格"><a href="#代码空格" class="headerlink" title="代码空格"></a>代码空格</h2><p>在运算符与函数之间使用空格隔开以增加代码可读性，例子如下：      </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 操作符左右一定要有空格</span></span><br><span class="line">i = i + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> listIndex = <span class="number">0</span>; listIndex &lt; num.<span class="built_in">size</span>(); listIndex++)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 大括号和函数保持同一行</span></span><br><span class="line"><span class="keyword">while</span> (n) &#123;</span><br><span class="line">  n--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制语句 (while, if, for) 后都有一个空格</span></span><br><span class="line"><span class="keyword">while</span> (n) &#123;</span><br><span class="line">  <span class="keyword">if</span> (k &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">9</span>;</span><br><span class="line">  n--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>上述所有代码源自 <a href="https://programmercarl.com/%E5%89%8D%E5%BA%8F/%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC.html#%E9%A2%98%E5%A4%96%E8%AF%9D">https://programmercarl.com/前序/代码风格.html#题外话</a></em>        </p><h1 id="刷力扣-Leetcode-用不用库函数？"><a href="#刷力扣-Leetcode-用不用库函数？" class="headerlink" title="刷力扣 (Leetcode) 用不用库函数？"></a>刷力扣 (Leetcode) 用不用库函数？</h1><p>刷题的本质就是让我们清楚如何对一些概念的实现，而库函数同样也是如此。如果一道题可以直接调库函数就能解决大部分问题，那么这就失去了它的意义。就好比你在做作业，你可以参考答案去思考如何做这道题，但是如果你直接选择把答案抄下来，那么你什么也学不到。因此在这里关于是否使用库函数有一个标准：       </p><ol><li>如果题目关键的部分直接用库函数就可以解决，建议不要使用库函数。</li><li>如果库函数仅仅是 解题过程中的一小部分，并且你已经很清楚这个库函数的内部实现原理的话，那么直接用库函数。</li></ol><p>使用库函数最大的忌讳就是不知道这个库函数怎么实现的，也不知道其时间复杂度，上来就用，这样写出来的算法，时间复杂度自己都掌握不好的。         </p><p>例如for循环里套一个字符串的insert，erase之类的操作，你说时间复杂度是多少呢，很明显是O(n^2)的时间复杂度了。          </p><h1 id="核心代码模式-ACM模式"><a href="#核心代码模式-ACM模式" class="headerlink" title="核心代码模式 &amp; ACM模式"></a>核心代码模式 &amp; ACM模式</h1><p>以一段代码实例为例：      </p><p>核心代码模式：     </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getDays</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; work, vector&lt;<span class="type">int</span>&gt;&amp; gym)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 处理逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>ACM模式：    </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n) &#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">gym</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">work</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) cin &gt;&gt; work[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) cin &gt;&gt; gym[i];</span><br><span class="line">        <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理逻辑</span></span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; result &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上述代码对比可以看出，核心代码模式直接写核心逻辑就行了，work数组，gym数组都是填好的，直接拿来用就行，处理完之后 return 结果就完事了。 而ACM模式要求写出来的代码是直接可以本地运行的，所以我们需要自己写include哪些库函数，构造输入用例，构造输出用例。     </p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/youngyangyang04/leetcode-master">leetcode-master</a> by <em>youngyangyang04</em> from GitHub </p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Algorithm Introduction</title>
      <link href="/en/algo-intro/"/>
      <url>/en/algo-intro/</url>
      
        <content type="html"><![CDATA[<p>看不懂英文？点<a href="https://tianzhe.me/cn/algo-intro/">这里</a>      </p><h1 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h1><p>This series of posts are used to record how I learned and understand by algorithm practice on leetcode. Hopefully, these post would be a great review of what I learned, and might give you some advice on how to solve these questions.</p><h1 id="Where-they-from-Link-at-References"><a href="#Where-they-from-Link-at-References" class="headerlink" title="Where they from? (Link at References)"></a>Where they from? (Link at References)</h1><p>It is better to now what&#x2F;which question should you take before we start doing them, or you will not know where to start, where to go next level. Thus, I found a GitHub repository about the leetcode questions raiders. General speaking, it gives you a full list of question and their solution, but that is all in chinises which means it would be a great chance to also practice my english skill, sounds great right?😂  This also means the following posts (include this post…) might have some grammer issues, hope you guys can understand what I speak here.🥲       </p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://github.com/youngyangyang04/leetcode-master">leetcode-master</a> by <em>youngyangyang04</em> from GitHub </p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSE116的学习笔记-Lec3-6:Immutability</title>
      <link href="/cn/LO3-6-Immutability/"/>
      <url>/cn/LO3-6-Immutability/</url>
      
        <content type="html"><![CDATA[<p>Just the Lecture Question!!!</p><h1 id="Lecture-Question"><a href="#Lecture-Question" class="headerlink" title="Lecture Question"></a>Lecture Question</h1><p><strong>Restriction:</strong><br>No state is allowed in this question. Specifically, the keyword “var” is banned</p><p><strong>Question:</strong><br>In a package named “functions” write a class named VoteCounter with the following features:</p><ul><li>Has a constructor that takes a List of Strings representing all votes that have been cast</li><li>A method named “castVote” that takes a String as a parameter representing a vote for a candidate and returns a new VoteCounter with this vote added to the List of votes</li><li>A method named “submitVotes” that takes a String representing a candidate to vote for and an Int representing the number of votes to cast for that candidate and returns a new VoteCounter with these votes added</li><li>A method named “countVotes” that takes a String representing a candidate and returns the number of votes cast for that candidate</li></ul><p><strong>Testing:</strong><br>In a package named “tests” create a class named “TestVoteCounter” as a test suite that tests all the functionality listed above</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> CSE116 </category>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSE116的学习笔记-Lec5-6:WebSocket_App</title>
      <link href="/cn/LO5-6-WebSocket-App/"/>
      <url>/cn/LO5-6-WebSocket-App/</url>
      
        <content type="html"><![CDATA[<h1 id="Chatting-with-Web-Sockets"><a href="#Chatting-with-Web-Sockets" class="headerlink" title="Chatting with Web Sockets"></a>Chatting with Web Sockets</h1><p>This is the last Lecture you need to take(without the expansion)    </p><h1 id="Clicker-App"><a href="#Clicker-App" class="headerlink" title="Clicker App"></a>Clicker App</h1><ul><li>When the app starts<ul><li>An actor system is created</li><li>A ClickerServer actor is added to the system</li><li>UpdateGames message is sent to the server at regular intervals</li></ul></li></ul><br><ul><li>When a client connects and chooses a username<ul><li>This username is sent to the server in a WebSocket message of type startGame</li></ul></li></ul><br><ul><li>In response to receiving the gameStart message, the server:<ul><li>Sends the client the game configuration in a message of type initialize</li><li>Creates a GameActor in the actor system</li><li>Updates data structure(s) to remember that this game actor is associated with this web socket</li></ul></li></ul><br><ul><li>To create a new Actor<ul><li>Use the context variable of any actor</li><li>Use this context the same as the actor system</li><li>Ex. clickerServer.context.actorOf…</li></ul></li></ul><br><ul><li>A new game actor is created for each connected client</li><li>Important to update all data structures to associate clients with their actors</li></ul><br><ul><li>When th server recevies click and buy message from a web socket<ul><li>Forward the action as an actor message to the appropriate actor</li><li>Game actor will update its state according to the configuration of the game</li></ul></li></ul><br><ul><li>Each time the clicker server receives the UpdateGames actor message<ul><li>Send an Update message to each game actor</li></ul></li></ul><br><ul><li>Each game actor responds with the GameState message (to the sender())</li><li>GameState contains all information of the fame in a JSON string</li></ul><br><ul><li>The clicker server forwards each game state to the appropriate client in a gameState message</li><li>Each client parses the JSON string and updates the GUI for the user to see</li></ul><br><ul><li>This update process occurs at regular intervals<ul><li>10 times &#x2F; second in the handout code</li></ul></li><li>Notice that all the game logic occurs on the server</li><li>Client only sends user inputs and renders the game state</li></ul><br><ul><li>Expansion objective - AutoSave</li><li>Send messages to save all games at regular intervals</li><li>Store all game states in a way that will persist</li><li>If a user sends the startGame message with a username that has saved game, load their game</li></ul><h1 id="Lecture-Question"><a href="#Lecture-Question" class="headerlink" title="Lecture Question"></a>Lecture Question</h1><p><strong>Task:</strong><br>Write a Web Socket Server for Direct Messages (DMs)</p><br><p>In a package named server, write a class named <code>DMServer</code> that:</p><ul><li>When created, sets up a web socket server listening for connections on localhost:8080</li><li>Listens for messages of type “register” containing a username as a String (Use data structures to remember which socket belongs to which username)</li><li>Listens for messages of type “direct_message” containing a JSON string in the format {“to”:”username”, “message”:”text”}. When such a message is received:<ul><li>Send a message of type “dm” to the “to” username containing a JSON string in the format {“from”:”username”, “message”:”text”}</li></ul></li></ul><br><ul><li>Example: If 2 different users connect to the server and send:<ul><li>emit(“register”, “Aesop”) and emit(“register”, “Rob”)</li><li>User “Aesop” sends emit(“direct_message”, ‘{“to”: “Rob”, “message”: “Happy to be on the food chain at all”}’)</li></ul></li><li>User “Rob” will receive a message from the server of type “dm” containing the string ‘{“from”: “Aesop”, “message”: “Happy to be on the food chain at all”}’</li></ul><p><strong>Testing:</strong><br>No test:)</p><p><strong>Hint:</strong><br>If you have no idea how to write, check prof. example repo -&gt; <a href="https://github.com/hartloff/CSE116-Examples">link</a>   </p><p>If you forgot how to convert JSON, go check <a href="https://tianzhe.me/2020/09/28/JSON/">Lecture 2-3: JSON</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> CSE116 </category>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSE116的学习笔记-Lec5-5:WebSocket_Clients</title>
      <link href="/cn/LO5-5-WebSocket-Clients/"/>
      <url>/cn/LO5-5-WebSocket-Clients/</url>
      
        <content type="html"><![CDATA[<h1 id="WebSocket-Clients"><a href="#WebSocket-Clients" class="headerlink" title="WebSocket Clients"></a>WebSocket Clients</h1><p>Teach you how to write a clients:)    </p><h1 id="WebSocket-Client-Scala"><a href="#WebSocket-Client-Scala" class="headerlink" title="WebSocket Client - Scala"></a>WebSocket Client - Scala</h1><ul><li>Another new library!</li><li>We’ll use the Scala &#x2F; Java version of the socket.io client Library<ul><li>Follows the same structure as the web client</li></ul></li><li>Add to pom.xml and use maven to download<ul><li>Included in examples repo</li></ul></li></ul><br><ul><li>Import relavent code from the socket.io library</li><li>Use IO.socket to create a socket<ul><li>Returns a reference to the created socket</li></ul></li><li>Call connect() to connect to the server</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.socket.client.&#123;<span class="type">IO</span>, <span class="type">Socket</span>&#125; </span><br><span class="line"><span class="keyword">import</span> io.socket.emitter.<span class="type">Emitter</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProcessMessageFromServer</span>(<span class="params"></span>) <span class="keyword">extends</span> <span class="title">Emitter</span>.<span class="title">Listenner</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">call</span></span>(objects: <span class="type">Object</span>*): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> message = <span class="keyword">object</span>.apply(<span class="number">0</span>).toString</span><br><span class="line">        println(message)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SimpleClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> socket: <span class="type">Socket</span> = <span class="type">IO</span>.socket(<span class="string">&quot;http://localhost:8080&quot;</span>)</span><br><span class="line">        socket.on(<span class="string">&quot;ACK&quot;</span>, <span class="keyword">new</span> <span class="type">ProcessMessageFromServer</span>())</span><br><span class="line"></span><br><span class="line">        socket.connect()</span><br><span class="line">        socket.emit(<span class="string">&quot;chat_message&quot;</span>, <span class="string">&quot;hello&quot;</span>)</span><br><span class="line">        socket.close()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><ul><li>Call the “on” method to define the behavior for each message type received from server<ul><li>Takes a message type and an object that extends Emitter.Listener</li><li>Implement call(Object*)<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProcessMessageFromServer</span>(<span class="params"></span>) <span class="keyword">extends</span> <span class="title">Emitter</span>.<span class="title">Listenner</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">call</span></span>(objects: <span class="type">Object</span>*): <span class="type">Unit</span> = &#123; <span class="comment">// Implement call(Object*)</span></span><br><span class="line">        <span class="keyword">val</span> message = <span class="keyword">object</span>.apply(<span class="number">0</span>).toString</span><br><span class="line">        println(message)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socket.on(<span class="string">&quot;ACK&quot;</span>, <span class="keyword">new</span> <span class="type">ProcessMessageFromServer</span>()) <span class="comment">// &quot;on&quot; method</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><br><ul><li>Implement call(Objects*) which is called the content of the message as an Array (sort of) of Objects<ul><li>The library is written in Java ans uses Java’s Objec class</li></ul></li><li>Objecy contains a toString method so we accrss the first element and convert it to a String to process the content of the message<ul><li>If there is no content to the message this will throw an index out of bounds error<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProcessMessageFromServer</span>(<span class="params"></span>) <span class="keyword">extends</span> <span class="title">Emitter</span>.<span class="title">Listenner</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">call</span></span>(objects: <span class="type">Object</span>*): <span class="type">Unit</span> = &#123; </span><br><span class="line">        <span class="keyword">val</span> message = <span class="keyword">object</span>.apply(<span class="number">0</span>).toString <span class="comment">// toString method</span></span><br><span class="line">        println(message)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><br><ul><li>Send message to the server using the emit method<ul><li>Same syntax as the web version of socket.io</li></ul></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socket.emit(<span class="string">&quot;chat_message&quot;</span>, <span class="string">&quot;hello&quot;</span>) <span class="comment">// emit method</span></span><br></pre></td></tr></table></figure><br><ul><li>If you need to interact with a ScalaFX GUI when a socket message is reveived, call Platform.funLater</li><li>Platform.runLater will run your method on the same thread as the GUI</li><li>This allows you to access the GUI elements &#x2F; variables from your Emitter.Listener<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ServerStopped</span>(<span class="params"></span>) <span class="keyword">extends</span> <span class="title">Emitter</span>.<span class="title">Listener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">call</span></span>(objects: <span class="type">Object</span>*): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="type">Platform</span>.runLater(() =&gt; &#123;</span><br><span class="line">            <span class="type">GUIClient</span>.textOutput.text.value = <span class="string">&quot;The server has stopped&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">GUIClient</span> <span class="keyword">extends</span> <span class="title">JFXApp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    socket.on(<span class="string">&quot;server_stopped&quot;</span>, <span class="keyword">new</span> <span class="type">ServerStopped</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> textOutput: <span class="type">Label</span> = <span class="keyword">new</span> <span class="type">Label</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><br><ul><li>Takes an object extending Runnable with a method named run with no parameters and return type Unit</li><li>Using Scala syntax to condense this inheritance<ul><li>This syntax can be used when extending a trait with a single method</li><li>Can create your listeners and event handlers with this syntax if you’d perfer<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ServerStopped</span>(<span class="params"></span>) <span class="keyword">extends</span> <span class="title">Emitter</span>.<span class="title">Listener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">call</span></span>(objects: <span class="type">Object</span>*): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="type">Platform</span>.runLater(() =&gt; &#123; <span class="comment">// This part</span></span><br><span class="line">            <span class="type">GUIClient</span>.textOutput.text.value = <span class="string">&quot;The server has stopped&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="Chat-Demo"><a href="#Chat-Demo" class="headerlink" title="Chat Demo"></a>Chat Demo</h1><ul><li>Let’s build a chat app!<ul><li>Code is in the repo</li></ul></li><li>User can connect to the chat server<ul><li>Use a web or desktop front end</li><li>Server doesn’t care what type of app a client is using</li></ul></li><li>All connected users can communicate through text messages</li></ul><br><ul><li>Chat server starts up</li><li>Listener for WebSocket connections on port 8080</li><li>Initialize data structures that will store references to each WebSocket</li></ul><br><ul><li>Server connects to a MySQL database to store the chat history</li><li>Communicates via SQL statements<ul><li>MySQL reacts to the event of receving a statement</li></ul></li><li><strong>More details on MySQL in a later lecture</strong></li></ul><br><ul><li>Cliens connect to the server using WebSockets<ul><li>Client could be web or desktop</li></ul></li><li>After the connection is established:<ul><li>Client sends a message of type register containing their username</li></ul></li></ul><br><ul><li>The server receives the register message and reacts to this event</li><li>Adds the new user to the data structures<ul><li>Data structure remembers the username associated with this socket</li><li>Retrieve the chat history from the database and send it to the client</li></ul></li></ul><br><ul><li>Client reacts to the chat_history message<ul><li>Renders all the content and displays it to the user</li></ul></li></ul><br><ul><li>Multiple cliens can be connected simultaneously</li><li>Each client sends their username in a register message</li><li>Chat server maps usernames to sockets for all connections</li></ul><br><ul><li>All user can send messages of type chat_message to the server<ul><li>Message is sent when a user sends a message using the GUI</li></ul></li><li>This message inly contains the message (No username)</li></ul><br><ul><li>When the server receives a chat_message:<ul><li>Lookup the username for the sending socket</li><li>Store username &#x2F; message in the database</li><li>Send username &#x2F; message to all connected sockets in a message of type new_message</li></ul></li></ul><br><ul><li>Clients receive the new_message</li><li>Add it to the GUI for the user to read</li></ul><br><ul><li>When a client disconnects the server reacts to the disconnect event</li><li>Remove the user from data structures</li></ul><p><strong>To the Code</strong></p><hr><h1 id="Lecture-Question"><a href="#Lecture-Question" class="headerlink" title="Lecture Question"></a>Lecture Question</h1><p><strong>Task:</strong><br>Write a Web Socket Server that echos back to clients the messages they send</p><br><p>In a package named server, write a class named <code>EchoServer</code> that:</p><ul><li>When created, sets up a web socket server listening for connections on localhost:8080</li><li>Listens for messages of type “send_back” containing a String and sends back to the client a message of type “echo” containing the exact string sent by the client</li></ul><p><strong>Testing:</strong><br>No test:)</p><p><strong>Hint:</strong><br>If you have no idea how to write, check prof. example repo -&gt; <a href="https://github.com/hartloff/CSE116-Examples">link</a>   </p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> CSE116 </category>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSE116的学习笔记-Lec5-4:WebSocket_Server</title>
      <link href="/cn/LO5-4-WebSocket-Server/"/>
      <url>/cn/LO5-4-WebSocket-Server/</url>
      
        <content type="html"><![CDATA[<h1 id="WebSocket-Server"><a href="#WebSocket-Server" class="headerlink" title="WebSocket Server"></a>WebSocket Server</h1><p>Teach you how to write a simple server:)</p><h1 id="The-Problem"><a href="#The-Problem" class="headerlink" title="The Problem"></a>The Problem</h1><ul><li>In CSE115 you used HTTP request &#x2F; responses to build web apps</li><li>If you wanted more data from the server after the page loads, you used AJAX<ul><li>Server hosts JSON data at certain end points</li><li>Client makes an AJAX call to retrieve the most current data</li></ul></li><li>But the server has to wait for a request before sending a response</li></ul><br><ul><li>What if the server wants to send time-sensitive data without waiting for a request?</li><li>In CSE115<ul><li>Built a chat app using polling</li><li>Client sent AJAX requests at regular intervals</li><li>Only get updates when AJAX request is sent</li></ul></li><li>Can use long-polling<ul><li>Server hangs on poll requests until it has new data to send</li></ul></li></ul><br><ul><li>A newer solution (Standardized in 2011)</li><li>Establishes a lasting connection<ul><li>Enables 2-way communication between server and client</li></ul></li><li>Server can push updates to clients over the web socket without waiting for the client to make a new request</li></ul><h1 id="socket-io"><a href="#socket-io" class="headerlink" title="socket.io"></a>socket.io</h1><ul><li>A library built on top of web sockets</li><li>Maintains connections and reconnecting</li><li>Uses message types<ul><li>Similar to actors, except the message type is always a string</li></ul></li><li>Add listeners to react to different message types<ul><li>Receiving a message is an event</li><li>Listener code will be called when the event occurs</li></ul></li></ul><h1 id="socket-io-Server-in-Scala"><a href="#socket-io-Server-in-Scala" class="headerlink" title="socket.io Server in Scala"></a>socket.io Server in Scala</h1><ul><li>New library</li><li>Link on the course website</li><li>Dependency included in pom.xml in examples repo</li></ul><h1 id="Web-Socket-Server"><a href="#Web-Socket-Server" class="headerlink" title="Web Socket Server"></a>Web Socket Server</h1><ul><li>Import from the new library</li><li>Setup and start the server<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.corundumstudio.socketio.listener.&#123;<span class="type">ConnectListener</span>, <span class="type">DataListener</span>, <span class="type">DisconnectListener</span>&#125;</span><br><span class="line"><span class="keyword">import</span> com.corundumstudio.socketio.&#123;<span class="type">AckRequest</span>, <span class="type">Configuration</span>, <span class="type">SocketIOClient</span>, <span class="type">SocketIOServer</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Server</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> config: <span class="type">Configuration</span> = <span class="keyword">new</span> <span class="type">Configuration</span> &#123;</span><br><span class="line">        setHostname(<span class="string">&quot;localhost&quot;</span>)</span><br><span class="line">        setPort(<span class="number">8080</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> server: <span class="type">SocketIOServer</span> = <span class="keyword">new</span> <span class="type">SocketIOServer</span>(config)</span><br><span class="line"></span><br><span class="line">    server.addConnectListener(<span class="keyword">new</span> <span class="type">ConnectionListener</span>())</span><br><span class="line">    server.addDisconnectListener(<span class="keyword">new</span> <span class="type">DisconnectionListener</span>())</span><br><span class="line">    server.addEventListener(<span class="string">&quot;chat_message&quot;</span>, classOf[<span class="type">String</span>], <span class="keyword">new</span> <span class="type">MessageListener</span>())</span><br><span class="line">    server.addEventListener(<span class="string">&quot;stop_server&quot;</span>, classOf[<span class="type">Nothing</span>], <span class="keyword">new</span> <span class="type">StopListener</span>(<span class="keyword">this</span>))</span><br><span class="line"></span><br><span class="line">    server.start()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><br><ul><li>Create a configuration object for the server</li><li>This server will run on localhost port 8080<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> config: <span class="type">Configuration</span> = <span class="keyword">new</span> <span class="type">Configuration</span> &#123;</span><br><span class="line">    setHostname(<span class="string">&quot;localhost&quot;</span>)</span><br><span class="line">    setPort(<span class="number">8080</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><br><ul><li>Create and start the server</li><li>Use the configuration to tell the library how to setup the server</li><li>Call the start() method to start listening for connections<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> server: <span class="type">SocketIOServer</span> = <span class="keyword">new</span> <span class="type">SocketIOServer</span>(config) <span class="comment">// Create a server</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">server.start() <span class="comment">// Start the server</span></span><br></pre></td></tr></table></figure></li></ul><br><ul><li>Add listener to handle different event types</li><li>Connect and disconnect listeners to react to clients connecting and disconnecting</li><li>Event listeners for each different message tyoe received from clients<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server.addConnectListener(<span class="keyword">new</span> <span class="type">ConnectionListener</span>()) <span class="comment">// added connect listener</span></span><br><span class="line">server.addDisconnectListener(<span class="keyword">new</span> <span class="type">DisconnectionListener</span>()) <span class="comment">// added disconnect listener</span></span><br><span class="line">server.addEventListener(<span class="string">&quot;chat_message&quot;</span>, classOf[<span class="type">String</span>], <span class="keyword">new</span> <span class="type">MessageListener</span>()) <span class="comment">// added event listener</span></span><br><span class="line">server.addEventListener(<span class="string">&quot;stop_server&quot;</span>, classOf[<span class="type">Nothing</span>], <span class="keyword">new</span> <span class="type">StopListener</span>(<span class="keyword">this</span>)) <span class="comment">// added event listener</span></span><br></pre></td></tr></table></figure></li></ul><br><ul><li>For connect and disconnect<ul><li>Create classes overriding ConnectListener and DisconnectListener</li><li>Implement the onConnect &#x2F; onDisconnect methods</li></ul></li><li>These methods take a reference to the sending socket as a parameter<ul><li>Can use this reference to send messages to the client</li><li>Usually want to store each reference to send messages later<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server.addConnectListener(<span class="keyword">new</span> <span class="type">ConnectionListener</span>())</span><br><span class="line">server.addConnectListener(<span class="keyword">new</span> <span class="type">DisconnectionListener</span>())</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConnectionListener</span>(<span class="params"></span>) <span class="keyword">extends</span> <span class="title">ConnectListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">onConnect</span></span>(socket: <span class="type">SocketIOClient</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        println(<span class="string">&quot;Connected: &quot;</span> + socket)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DisconnectionListener</span>(<span class="params"></span>) <span class="keyword">extends</span> <span class="title">DisconnectListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">onDisconnect</span></span>(socket: <span class="type">SocketIOClient</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        println(<span class="string">&quot;Disconnected: &quot;</span> + socket)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><br><ul><li>To receive messages, specify the message type and the class of the message<ul><li>Create classes extending DataListener[message_type]</li></ul></li><li>For message class we’ll use<ul><li>String to receive text data</li><li>Nothing if it’s just a message (Similar to an actor receiving a case object)<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server.addEventListener(<span class="string">&quot;chat_message&quot;</span>, classOf[<span class="type">String</span>], <span class="keyword">new</span> <span class="type">MessageListener</span>())</span><br><span class="line">server.addEventListener(<span class="string">&quot;stop_server&quot;</span>, classOf[<span class="type">Nothing</span>], <span class="keyword">new</span> <span class="type">StopListener</span>(<span class="keyword">this</span>))</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessageListener</span>(<span class="params"></span>) <span class="keyword">extends</span> <span class="title">DataListener</span>[<span class="type">String</span>] </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">onData</span></span>(socket: <span class="type">SocketIOClient</span>, data: <span class="type">String</span>, ackRequest: <span class="type">AckRequest</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        println(<span class="string">&quot;received_message: &quot;</span> + data + <span class="string">&quot;from: &quot;</span> + socket)</span><br><span class="line">        socket.sendEvent(<span class="string">&quot;ACK&quot;</span>, <span class="string">&quot;I received your message of &quot;</span> + data)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StopListener</span>(<span class="params">server: <span class="type">Server</span></span>) <span class="keyword">extends</span> <span class="title">DataListener</span>[<span class="type">Nothing</span>] </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">onData</span></span>(socket: <span class="type">SocketIOClient</span>, data: <span class="type">Nothing</span>, ackRequest: <span class="type">AckRequest</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        println(<span class="string">&quot;stopping server&quot;</span>)</span><br><span class="line">        server.server.stop()</span><br><span class="line">        println(<span class="string">&quot;safe to stop program&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><br><ul><li>Use the reference to the Socket to send messages to the client</li><li>Specify the type of the message as a String</li><li>If the message contains data, use a second String<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socket.sendEvent(<span class="string">&quot;ACK&quot;</span>, <span class="string">&quot;I received your message of &quot;</span> + data)</span><br></pre></td></tr></table></figure></li></ul><h1 id="Web-Socket-Clients"><a href="#Web-Socket-Clients" class="headerlink" title="Web Socket Clients"></a>Web Socket Clients</h1><ul><li>We’ve set up a web socket server that will listen for connections and process message</li><li>Now, let’s build a web socket client that will connect to the server</li></ul><h1 id="WebSocket-Client-Web"><a href="#WebSocket-Client-Web" class="headerlink" title="WebSocket Client - Web"></a>WebSocket Client - Web</h1><ul><li>First, setup the HTML</li><li>Layout and style of the page<ul><li>Could add CSS for more style<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Web Socket Client Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;chat_input&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;gold&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;sendMessage();&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">botton</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;display_message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;WebClient.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><br><ul><li>Download the socket.io JavaScript client library</li><li>This library contains all the code we’ll need to connect to pur server<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><br><ul><li>Add elements for the user to enter and send a message</li><li>In JavaScript, we’ll implement the sendMessage() function<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;chat_input&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;gold&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;sendMessage();&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">botton</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;display_message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><br><ul><li>Download our JavaScript file</li><li>This script runs codes to connect to the server as soon as it’s downloaded<ul><li>Include this at the end of the body so the page loads before connecting to the server<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;WebClient.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><br><ul><li>In WebClinet.js</li><li>Call io.connect to the server<ul><li>Returns a reference to the created socket<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> socket = io.<span class="title function_">connect</span>(<span class="string">&quot;http://localhost:8080&quot;</span>, &#123;<span class="attr">transports</span>: &#123;<span class="string">&#x27;websocket&#x27;</span>&#125;&#125;);</span><br><span class="line"></span><br><span class="line">socket.<span class="title function_">on</span>(<span class="string">&#x27;ACK&#x27;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;display_message&quot;</span>).<span class="property">innerHTML</span> = event;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">socker.<span class="title function_">on</span>(<span class="string">&#x27;server_stopped&#x27;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;display_message&quot;</span>).<span class="property">innerHTML</span> = <span class="string">&quot;The server has stopped&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sendMessage</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> message = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;chat_input&quot;</span>).<span class="property">value</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;chat_input&quot;</span>).<span class="property">value</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    socket.<span class="title function_">emit</span>(<span class="string">&quot;chat_message&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><br><ul><li>Define how the socket will react to different message types with the “on” method</li><li>The “on” method takes the message type and a function as arguments<ul><li>Call the function whenever a message of that type is received from the server<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">socket.<span class="title function_">on</span>(<span class="string">&#x27;ACK&#x27;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;display_message&quot;</span>).<span class="property">innerHTML</span> = event;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">socker.<span class="title function_">on</span>(<span class="string">&#x27;server_stopped&#x27;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;display_message&quot;</span>).<span class="property">innerHTML</span> = <span class="string">&quot;The server has stopped&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li></ul><br><ul><li>The function should take a parameter which will contain the data of the message if there is any</li><li>We receive an ACK message containing a string which we display on the page (Similar to case class)</li><li>We receive a server_stopped message and inform he user that the server stopped (Similar to case object)</li></ul><br><ul><li>To send a message, call emit</li><li>Takes the message type and the content of the message, if any</li><li>Can call emit with only message type to send a message with no content (Similar to case object)</li></ul><p><strong>Web Socket Demo</strong></p><hr><h1 id="Lecture-Question"><a href="#Lecture-Question" class="headerlink" title="Lecture Question"></a>Lecture Question</h1><p><strong>Task:</strong><br>Write a Web Socket Server that counts the number of messages it receives</p><br><p>In a package named server, write a class named <code>LectureServer</code> that:</p><ul><li>When created, sets up a web socket server listening for connections on localhost:8080</li><li>Listens for messages of type “increment” with no data</li><li>Has a method named <code>numberOfMessages</code> that returns (as an Int) the number of times a message of type “increment” was received</li></ul><p><strong>Testing:</strong><br>No test:)</p><p><strong>Hint:</strong><br>If you have no idea how to write, check prof. example repo -&gt; <a href="https://github.com/hartloff/CSE116-Examples">link</a>   </p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> CSE116 </category>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSE116的学习笔记-Lec5-3:Actors</title>
      <link href="/cn/LO5-3-Actors/"/>
      <url>/cn/LO5-3-Actors/</url>
      
        <content type="html"><![CDATA[<h1 id="Actors"><a href="#Actors" class="headerlink" title="Actors"></a>Actors</h1><p>actors again!</p><h1 id="Stock-Trader-Example"><a href="#Stock-Trader-Example" class="headerlink" title="Stock Trader Example"></a>Stock Trader Example</h1><ul><li>Simulate stock changing prices and a trader purchasing stocks</li></ul><br><ul><li>Stock<ul><li>Receives a Tick message and changes its price<ul><li>Price changes are random for this simulation</li><li>Tick messages are sent to all stocks at regular intervals</li></ul></li><li>Receives a GetPrice message and responds with its current price</li></ul></li></ul><br><ul><li>Trader<ul><li>Knows each stock’s ticker symbol and actor reference</li><li>Receives a CheckStocks message and checks the price of all known stocks</li><li>Receives Price messages from stocks and decides [randomly] whether or not buy some shares</li></ul></li></ul><p><strong>To the Code</strong></p><h1 id="Traffic-Example"><a href="#Traffic-Example" class="headerlink" title="Traffic Example"></a>Traffic Example</h1><ul><li>Intersections<ul><li>North &#x2F; South road intersects with an East &#x2F; West road</li><li>Initially Green light East &#x2F; West</li><li>Alternate green light at a fixed interval</li></ul></li></ul><br><ul><li>Cars<ul><li>Have a List of directions to follow</li><li>Each direction has:<ul><li>A destination Intersection</li><li>The time it takes to each that Intersection</li><li>Whether the intersection will be approached from the East &#x2F; West or North &#x2F; South</li></ul></li></ul></li></ul><br><ul><li>When a car approaches an intersection:<ul><li>Inform the Intersection</li><li>Intersection gives the GreenLight for the car to go<ul><li>If the light is red, the Intersection will wait until it’s green before sending the GreenLight message</li></ul></li></ul></li></ul><br><ul><li>When a car receives a GreenLight message<ul><li>Proceed to next Intersection in the direction list</li></ul></li></ul><h1 id="Delayed-Messages"><a href="#Delayed-Messages" class="headerlink" title="Delayed Messages"></a>Delayed Messages</h1><ul><li>There are two cases where we’ll have message that need to be sent with a delay<ul><li>Intersections changing lights at fixed intervals</li><li>Cars waiting the appropriate amount of time before checking an intersection for a green light</li></ul></li><li>Similar syntax as repeatedly sending a message (Supervisor example)</li><li>Use scheduleOnce<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> context.dispatcher</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">context.system.scheduler.scheduleOnce(</span><br><span class="line">    timeInterval.milliseconds, </span><br><span class="line">    self,</span><br><span class="line">    <span class="type">ChangeLight</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><br><ul><li>Must import the dispatcher from inside the Actor’s class</li><li>Speccify:<ul><li>The time delay</li><li>The recipient<ul><li>self contains an ActorRef to this actor</li></ul></li><li>The message to be sent</li></ul></li></ul><h1 id="Actors-Creating-Actors"><a href="#Actors-Creating-Actors" class="headerlink" title="Actors Creating Actors"></a>Actors Creating Actors</h1><ul><li>this.context can be used to add new actors to the system</li><li>Use the same “actorOf” syntax as used when adding actors using the system directly<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.context.actorOf(<span class="type">Props</span>(classOf[<span class="type">TimerActor</span>]))</span><br></pre></td></tr></table></figure></li></ul><br><p><strong>To the Code</strong></p><hr><h1 id="Lecture-Question"><a href="#Lecture-Question" class="headerlink" title="Lecture Question"></a>Lecture Question</h1><p><strong>Task:</strong><br>Create and test an actor class to set and sound an alarm</p><ul><li>In a package named actors, create a class named AlarmActor that extends Actor</li><li>Create the following case class in the actors package that will be used as messages<ul><li>A case class named <code>SetAlarm</code> that takes a Double and a String in its constructor</li><li>A case class named <code>Alarm</code> that takes a String in its constructor</li></ul></li><li>The AlarmActor class must respond to messages of type SetAlarm by:<ul><li>Interpreting the Double as the number of seconds to wait before sounding the alarm</li><li>When the alarm “sounds” send an Alarm message back to the actor that sent the SetAlarm message containing the same String that was in the SetAlarm message</li></ul></li></ul><p><strong>Testing:</strong><br>Write a test suite named tests.TestAlarmActor to test this functionality</p><p><strong>No test after this LQ!!!!</strong></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> CSE116 </category>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSE116的学习笔记-Lec5-2:Testing_Actors</title>
      <link href="/cn/LO5-2-Testing-Actors/"/>
      <url>/cn/LO5-2-Testing-Actors/</url>
      
        <content type="html"><![CDATA[<h1 id="Testing-Actors"><a href="#Testing-Actors" class="headerlink" title="Testing Actors"></a>Testing Actors</h1><p>testing the actors:)</p><h1 id="Traits-and-Mixins"><a href="#Traits-and-Mixins" class="headerlink" title="Traits and Mixins"></a>Traits and Mixins</h1><ul><li>We’ve seen inheritance by extending abstract class</li><li>What if we want to extend multiple classes?<ul><li>Example: You want an object class that extends PhysicalObject to have physics applied and extend Actor to run concurrently</li><li><strong>This is not allowed</strong></li></ul></li><li>Can avoid this need by using composition<ul><li>Make a class that extends actor and stores a PhysicalObject in a state variable</li></ul></li></ul><br><ul><li>Traits<ul><li>Similar to abstract classes</li><li><strong>Cannot have a constructor</strong></li></ul></li><li>No limit to the number of traits that can be extended<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Database</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">playerExists</span></span>(username: <span class="type">String</span>): <span class="type">Boolean</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createPlayer</span></span>(username: <span class="type">String</span>): <span class="type">Unit</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">saveGameState</span></span>(username: <span class="type">String</span>, gameState: <span class="type">String</span>): <span class="type">Unit</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">loadGameState</span></span>(username: <span class="type">String</span>): <span class="type">String</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><br><ul><li>Mixins<ul><li>When extending multiple traits, we use the term mixin(ie. The traits are mixed into the class)</li></ul></li><li>Extend any one class &#x2F; abstract class &#x2F; trait using “extends”</li><li>Add any number of Traits using “with”</li><li>Must implement all abstract methods from all inheritances<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ActorAndDatabase</span> <span class="keyword">extends</span> <span class="title">Actor</span> <span class="keyword">with</span> <span class="title">Database</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">receive</span></span>: <span class="type">Receive</span> = &#123;</span><br><span class="line">        case_ =&gt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">playerExists</span></span>(username: <span class="type">String</span>): <span class="type">Boolean</span> = &#123;</span><br><span class="line">        <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">createPlayer</span></span>(username: <span class="type">String</span>): <span class="type">Unit</span> = &#123;&#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">saveGameState</span></span>(username: <span class="type">String</span>, gameState: <span class="type">String</span>): <span class="type">Unit</span> = &#123;&#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">loadGameState</span></span>(username: <span class="type">String</span>): <span class="type">String</span> = &#123;</span><br><span class="line">        <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="Testing-Actors-1"><a href="#Testing-Actors-1" class="headerlink" title="Testing Actors"></a>Testing Actors</h1><ul><li>We’ve seen our first actor system where multiple actors can run concurrently</li><li><strong>But how would we test such a program?</strong></li><li>Use a FunSuite like we have all semester?<ul><li>FunSuite starts the actor system</li><li>Creates actors</li><li>Send messages</li><li>Runds some asserts that likely execuye <strong>before</strong> the first message is received by an actor</li></ul></li><li>Can wait with Thread.sleep to wait for messages, but the FunSuite can’t receive messages from the actors<ul><li>Now way of gainning infomation from the actors</li></ul></li></ul><h1 id="Testing-Actors-Library"><a href="#Testing-Actors-Library" class="headerlink" title="Testing Actors - Library"></a>Testing Actors - Library</h1><ul><li>Let’s pull in a new library to help us out</li><li>The testing library we’ll use is the Akka testkit</li><li>Make sure thr version number matches your version of the Akka actor library<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.typesafe.akka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>akka-actor_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.typesafe.akka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>akka-testkit_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="Testing-Actors-Setup"><a href="#Testing-Actors-Setup" class="headerlink" title="Testing Actors - Setup"></a>Testing Actors - Setup</h1><ul><li>Using this library, we’ll setup a new type of TestSuite using the TestKit class</li><li>This setup is directly from the test kit documentation and can be reused whenever you setup a test suite for actors<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> akka.testkit.&#123;<span class="type">ImplicitSender</span>, <span class="type">TestKit</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.scalatest.&#123;<span class="type">BeforeAndAfterAll</span>, <span class="type">Matchers</span>, <span class="type">WordSpecLike</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.concurrent.duration._</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestActors</span>(<span class="params"></span>) <span class="keyword">extends</span> <span class="title">TestKit</span>(<span class="params"><span class="type">ActorSystem</span>(&quot;<span class="type">TestStringActor</span>&quot;</span>)) <span class="keyword">with</span> <span class="title">ImplicitSender</span></span></span><br><span class="line">    <span class="keyword">with</span> <span class="type">WordSpecLike</span></span><br><span class="line">    <span class="keyword">with</span> <span class="type">Matchers</span></span><br><span class="line">    <span class="keyword">with</span> <span class="type">BeforeAndAfterAll</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">afterAll</span></span>: <span class="type">Unit</span> = &#123; </span><br><span class="line">        <span class="type">TestKit</span>.shutdownActorSystem(system)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;A string actor&quot;</span> must &#123; </span><br><span class="line">        <span class="string">&quot;track a string&quot;</span> in &#123; </span><br><span class="line">            <span class="comment">// Test actors here</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><br><ul><li>Import classes &#x2F; traits from the libraries</li><li>The test kit is built on top of scalatest so we’ll use both libraries</li><li>Import the duration package from Scala to use 100.millis syntax<ul><li>Important: This muest be manually added. IntelliJ will not suggest importing the duration package and you will have an error on you millis</li></ul></li></ul><br><ul><li>Extend the TestKit class which has a constructor that takes an ActorSystem</li><li>Name and Create a new ActorSystem directly in the constructor</li></ul><br><ul><li>Mixin traits for additional functionality</li><li>These traits contain defined methods<ul><li>No abstract methods that need to be implemented</li></ul></li></ul><br><ul><li>From tje BeforeAndAfterAll trait, we inherited the afterAll method which is called after all our tests complete</li><li>By default, afterAll is implement but does nothing</li><li>We override afterAll to properly shutdown the actor system</li></ul><br><ul><li>Finally, we can setup our tests</li><li>Instead of unit testing, the test kit uses behavioral tests<ul><li>Name tests by the expect behavior of your code</li></ul></li></ul><br><ul><li>Methods “must” and “in” are inherited from WordSpecLike and are called inline<ul><li>Uses a string wrapper class (ie. “A value actor” is implicitly converted to the wrapper class which contains the must method)</li></ul></li><li>All this to achieve more human readable syntax</li></ul><h1 id="Testing-Actors-2"><a href="#Testing-Actors-2" class="headerlink" title="Testing Actors"></a>Testing Actors</h1><ul><li>With the test suite setup, we’re ready to start testing our actors</li><li>We have access to the actor system we created in the constructor in the system variable<ul><li>Use this system to start your actor(s)<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;A string actor&quot;</span> must &#123;</span><br><span class="line">    <span class="string">&quot;track a string&quot;</span> in &#123;</span><br><span class="line">        <span class="keyword">val</span> valueActor = system.actorOf(<span class="type">Props</span>(classOf[<span class="type">StringActor</span>], <span class="string">&quot;Hello&quot;</span>))</span><br><span class="line"></span><br><span class="line">        valueActor ! <span class="type">Append</span>(<span class="string">&quot; CSE&quot;</span>)</span><br><span class="line">        valueActor ! <span class="type">Append</span>(<span class="string">&quot;116&quot;</span>)</span><br><span class="line"></span><br><span class="line">        expectNoMessage(<span class="number">100.</span>millis)</span><br><span class="line"></span><br><span class="line">        valueActor ! <span class="type">GetValue</span></span><br><span class="line">        <span class="keyword">val</span> value: <span class="type">Value</span> = expectMsgType[<span class="type">Value</span>](<span class="number">1000.</span>millis)</span><br><span class="line"></span><br><span class="line">        assert(value == <span class="type">Value</span>(<span class="string">&quot;Hello CSE116&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><br><ul><li>Send messages to the actor using the ! method<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;A string actor&quot;</span> must &#123;</span><br><span class="line">    <span class="string">&quot;track a string&quot;</span> in &#123;</span><br><span class="line">        <span class="keyword">val</span> valueActor = system.actorOf(<span class="type">Props</span>(classOf[<span class="type">StringActor</span>], <span class="string">&quot;Hello&quot;</span>))</span><br><span class="line"></span><br><span class="line">        valueActor ! <span class="type">Append</span>(<span class="string">&quot; CSE&quot;</span>)</span><br><span class="line">        expectNoMessage(<span class="number">100.</span>millis)</span><br><span class="line">        valueActor ! <span class="type">Append</span>(<span class="string">&quot;116&quot;</span>)</span><br><span class="line">        expectNoMessage(<span class="number">100.</span>millis)</span><br><span class="line"></span><br><span class="line">        valueActor ! <span class="type">GetValue</span></span><br><span class="line">        <span class="keyword">val</span> value: <span class="type">Value</span> = expectMsgType[<span class="type">Value</span>](<span class="number">1000.</span>millis)</span><br><span class="line"></span><br><span class="line">        assert(value == <span class="type">Value</span>(<span class="string">&quot;Hello CSE116&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><br><ul><li><strong>New</strong>: Use the expectNoMessage method (inherited from TestKit) to wait for messages to resolve before testing</li><li>The test suite will wait for the specified amount of time<ul><li>If there’s an error on millis, don’t forget to import the duration package<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expectNoMessage(<span class="number">100.</span>millis)</span><br></pre></td></tr></table></figure></li></ul></li><li>In this example, each expectNoMessage will wait for 100 milliseconds before moving to the next line of code<ul><li>This allows sample time for messages to be processed in a controlled order</li></ul></li><li>If any message is received while waiting, the test will fail</li></ul><br><ul><li>Send a message to an actor that expects a response</li><li>The test suite is part of the actor system and can receive the response for testing<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valueActor ! <span class="type">GetValue</span></span><br></pre></td></tr></table></figure></li></ul><br><ul><li><strong>New</strong>: When you expect to receive a message, call expectMsgType with the message type you expect</li><li>The time provided is the maximum amount to time to wait before failing the test<ul><li>If we don’t receive a message of type Value within 1 second, this test fails<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> value: <span class="type">Value</span> = expectMsgType[<span class="type">Value</span>](<span class="number">1000.</span>millis)</span><br></pre></td></tr></table></figure></li></ul></li></ul><br><ul><li>expectMsgType does not wait for the <strong>full duration</strong>!</li><li>As soon as a message is received, the test <strong>moves on</strong></li><li>This test will wait for 11.5dats, or until it receives a message<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;A string actor&quot;</span> must &#123;</span><br><span class="line">    <span class="string">&quot;track a string&quot;</span> in &#123;</span><br><span class="line">        <span class="keyword">val</span> valueActor = system.actorOf(<span class="type">Props</span>(classOf[<span class="type">StringActor</span>], <span class="string">&quot;Hello&quot;</span>))</span><br><span class="line"></span><br><span class="line">        valueActor ! <span class="type">Append</span>(<span class="string">&quot; CSE&quot;</span>)</span><br><span class="line">        expectNoMessage(<span class="number">100.</span>millis)</span><br><span class="line">        valueActor ! <span class="type">Append</span>(<span class="string">&quot;116&quot;</span>)</span><br><span class="line">        expectNoMessage(<span class="number">100.</span>millis)</span><br><span class="line"></span><br><span class="line">        valueActor ! <span class="type">GetValue</span></span><br><span class="line">        <span class="keyword">val</span> value: <span class="type">Value</span> = expectMsgType[<span class="type">Value</span>](<span class="number">1000000000.</span>millis)</span><br><span class="line"></span><br><span class="line">        assert(value == <span class="type">Value</span>(<span class="string">&quot;Hello CSE116&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><br><ul><li>When the message is received, use asserts to test it<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assert(value == <span class="type">Value</span>(<span class="string">&quot;Hello CSE116&quot;</span>))</span><br></pre></td></tr></table></figure></li></ul><br><ul><li><strong>Caution</strong>: When testing message types with underfined variable names <strong>do not access the variables for testing</strong><ul><li>For today’s lecture question, the names of the Int variables are not defined and it is unlikely that we will use the same names</li><li>If we use different names &#x3D;&gt; error in AutoLab</li></ul></li></ul><br><ul><li>Instead, create a new message of that type and check foor equality<ul><li>Recall that case classes have an equals method that compares the values of its variables instead of references</li></ul></li></ul><hr><h1 id="Lecture-Question"><a href="#Lecture-Question" class="headerlink" title="Lecture Question"></a>Lecture Question</h1><p><strong>Task:</strong><br>Create and test an actor class to track funds in a bank account</p><ul><li>This question is similar to Monday’s in that your actor will only track a single value. Through this question you will practice writing a test suite for actors</li><li>In a package named bank create a class named <code>BankAccount</code> that extends Actor</li><li>Create the following case class&#x2F;objects in the bank package that will be used as messages<ul><li>A case class named <code>Deposit</code> that takes an Int in its constructor</li><li>A case class named <code>Withdraw</code> that takes an Int in its constructor</li><li>A case object named <code>CheckBalance</code></li><li>A case class named <code>Balance</code> that takes an Int in its constructor</li></ul></li><li>The BankAccount class must:<ul><li>Initially contain no funds</li><li>When it receives a Deposit message, increases its funds by the amount in the message</li><li>When it receives a Withdraw message, decrease its funds by the amount in the message only if the account has enough money to cover the withdrawal. If it doesn’t have enough money for the full withdrawal, no funds are removed</li><li>When it receives a CheckBalance message, sends its current funds back to the sender in a Balance message</li></ul></li></ul><p><strong>Testing:</strong><br>In a package named tests, write a class named TestBankAccount as a test suite that tests the BankAccount functionality       </p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> CSE116 </category>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSE116的学习笔记-Lec5-1:Actors</title>
      <link href="/cn/LO5-1-Actors/"/>
      <url>/cn/LO5-1-Actors/</url>
      
        <content type="html"><![CDATA[<h1 id="Concurrency-and-Actors"><a href="#Concurrency-and-Actors" class="headerlink" title="Concurrency and Actors"></a>Concurrency and Actors</h1><p>new chapter :)</p><h1 id="Concurrency"><a href="#Concurrency" class="headerlink" title="Concurrency"></a>Concurrency</h1><ul><li>Most programs we’ve written execute code sequentially<ul><li>Each statement of code is executed in the order they are written</li><li>Can have control flow to decide which statements are executed and in which order</li></ul></li><li><strong>What if we want multiple pieces of code to execute at the same time?</strong></li></ul><br><ul><li>We’ve written 2 types of concurrent software already</li><li>In CSE115, you wrote a web server<ul><li>What if 2 users are visiting your site at the same time?</li><li>Server waits for requests and handles them as they are recevied</li><li>You provide callback functions that are called when a request arrives</li></ul></li><li>In CSE116, we saw GUIs on each HW assignment<ul><li>GUI runs an update loop to display the current state of the software</li><li>GUI simultaneously listens for user inputs</li><li>You provide listener classes with a method that is called when the user takes an action</li></ul></li></ul><br><ul><li>For both web servers and GUIs<ul><li>We used libraries that hid the concurrency</li></ul></li><li>What if we want to write concurrent code that is not part of a web server or GUI?</li><li>We’ll see how to write concurrent programs using actors</li></ul><br><h1 id="Concurrency-Actors"><a href="#Concurrency-Actors" class="headerlink" title="Concurrency - Actors"></a>Concurrency - Actors</h1><ul><li>Receving a message is an event</li><li><strong>Event-Based Architecture</strong><ul><li>Write code that is executed when an event occurs</li><li>Create events that cause code to run</li></ul></li></ul><h2 id="Case-Class-Object"><a href="#Case-Class-Object" class="headerlink" title="Case Class &#x2F; Object"></a>Case Class &#x2F; Object</h2><ul><li>Case class<ul><li>A different type of class in Scala</li><li>Primarily used to store values provided through its constructor</li><li>Typically have no body</li><li><strong>Are compared by value, not reference</strong></li></ul></li><li>Case object<ul><li>Used when no values are store (no constructor)</li><li>Can be used to signal that an event has occured</li></ul></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">BuyEquipment</span>(<span class="params">equipmentID: <span class="type">String</span></span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">Setup</span></span></span><br></pre></td></tr></table></figure><h1 id="Concurrency-Actors-1"><a href="#Concurrency-Actors-1" class="headerlink" title="Concurrency - Actors"></a>Concurrency - Actors</h1><ul><li>To define an Actor<ul><li>Extend the Actor class</li><li>Implement the receive method to define how the Actor responds to different message types<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> akka.actor._</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">CustomMessageType</span></span></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">AnotherMessageType</span>(<span class="params">message: <span class="type">String</span></span>)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyActor</span> <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">receive</span></span>: <span class="type">Recevie</span> = &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">CustomMessageType</span> =&gt; <span class="comment">// do somethong</span></span><br><span class="line">        <span class="keyword">case</span> received: <span class="type">AnotherMessageType</span> =&gt; received.message <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><br><ul><li>Messages are instances of case classes or case objects</li><li>Use a case statement to make decisions based on the type of the message</li><li>If the message is a case class, declare a variable to access its values</li></ul><br><ul><li>Create an actor and add it to actor system<ul><li>The actor is now running concurrently with your program</li></ul></li><li>Send messages using the ! method</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">CounterTest</span> <span class="keyword">extends</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="keyword">val</span> system = <span class="type">ActorSystem</span>(<span class="string">&quot;FirstSystem&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> actor = system.actorOf(<span class="type">Props</span>(classOf[<span class="type">MyActor</span>]))</span><br><span class="line"></span><br><span class="line">    actor ! <span class="type">CustomMessageType</span></span><br><span class="line">    actor ! <span class="type">AnotherMessageType</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><ul><li><strong>Cannot create an Actor using the new keyword</strong></li><li>Use Props (part of the Akka library) and pass the class as an argument<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> actor = system.actorOf(<span class="type">Props</span>(classOf[<span class="type">MyActor</span>]))</span><br></pre></td></tr></table></figure></li></ul><br><ul><li>If your Actor class takes a constructor parameters pass them in the Props call<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyActor</span>(<span class="params">n: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123; <span class="comment">// added parameters</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">receive</span></span>: <span class="type">Recevie</span> = &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">CustomMessageType</span> =&gt; <span class="comment">// do somethong</span></span><br><span class="line">        <span class="keyword">case</span> received: <span class="type">AnotherMessageType</span> =&gt; received.message <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">CounterTest</span>(<span class="params">n</span>) <span class="keyword">extends</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="keyword">val</span> system = <span class="type">ActorSystem</span>(<span class="string">&quot;FirstSystem&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> actor = system.actorOf(<span class="type">Props</span>(classOf[<span class="type">MyActor</span>], <span class="number">10</span>)) <span class="comment">// added value</span></span><br><span class="line"></span><br><span class="line">    actor ! <span class="type">CustomMessageType</span></span><br><span class="line">    actor ! <span class="type">AnotherMessageType</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="Counting-Example"><a href="#Counting-Example" class="headerlink" title="Counting Example"></a>Counting Example</h1><h1 id="Actors-Counting-Example"><a href="#Actors-Counting-Example" class="headerlink" title="Actors - Counting Example"></a>Actors - Counting Example</h1><ul><li>Create an Actor class that counts down from 20 as fast as it can</li><li>Send the actor a Start message to start the countdown<ul><li>Start is a case object</li></ul></li><li>We’ll create 3 of these actors and watch them count down concurrently</li></ul><br><ul><li>4 different message types<ul><li>All are case objects<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">case object Start</span><br><span class="line">case object IsDone</span><br><span class="line">case object Done</span><br><span class="line">case object NotDone</span><br></pre></td></tr></table></figure></li></ul></li><li>Start - Tells a Counter to start its countdown</li><li>IsDone - Sent to Counter to ask it it’s done or not</li><li>Done - Sent from Counter to indicate that it is done counting</li><li>NotDone - Sent from Counter to indicate that it is not done counting</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span>(<span class="params">name: <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countDown</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">if</span> ( n&gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            println(<span class="keyword">this</span>.name + <span class="string">&quot; - &quot;</span> + n)</span><br><span class="line">            n -= <span class="number">1</span></span><br><span class="line">            countDown()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            println(<span class="keyword">this</span>.name + <span class="string">&quot; fininshed&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">receive</span></span>: <span class="type">Receive</span> = &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">Start</span> =&gt;</span><br><span class="line">            <span class="keyword">this</span>.n = <span class="number">20</span></span><br><span class="line">            countDown()</span><br><span class="line">        <span class="keyword">case</span> <span class="type">IsDone</span> =&gt;</span><br><span class="line">            <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                sender() ! <span class="type">Done</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sender() ! <span class="type">NotDone</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><ul><li>We define actors just like any other class<ul><li>Can have constructor, variables, methods</li></ul></li><li>This class:<ul><li>Takes a String in the constructor</li><li>Initializes a variable n to 0</li><li>Has a countDown method to start a countdown and print the progess along the way</li></ul></li></ul><br><ul><li>Since we extend Actor, we must implement Receive</li><li>Use case syntax to react differently to different message types</li><li>Whenever this actor receives a message of type Start, it resets its counter to 20 and starts a countdown</li></ul><br>- To use the Actor we'll create 3 objects of this type with different names- Send each Actor the Start message so they count down  <figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span>(<span class="params">name: <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">receive</span></span>: <span class="type">Receive</span> = &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">Start</span> =&gt;</span><br><span class="line">        <span class="keyword">this</span>.n = <span class="number">20</span></span><br><span class="line">        countDown()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">obejct <span class="type">CounterTest</span> <span class="keyword">extends</span> <span class="type">App</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> system = <span class="type">ActorSystem</span>(<span class="string">&quot;CountingSystem&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> one = system.actorOf(<span class="type">Props</span>(classOf[<span class="type">Counter</span>], <span class="string">&quot;1&quot;</span>))</span><br><span class="line">    <span class="keyword">val</span> two = system.actorOf(<span class="type">Props</span>(classOf[<span class="type">Counter</span>], <span class="string">&quot;2&quot;</span>))</span><br><span class="line">    <span class="keyword">val</span> three = system.actorOf(<span class="type">Props</span>(classOf[<span class="type">Counter</span>], <span class="string">&quot;3&quot;</span>))</span><br><span class="line"></span><br><span class="line">    one ! <span class="type">Start</span></span><br><span class="line">    two ! <span class="type">Start</span></span><br><span class="line">    three ! <span class="type">Start</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><ul><li>All three counters count down concurrently</li><li>No way to know which will finish first</li></ul><h1 id="Actors-Counting-Example-1"><a href="#Actors-Counting-Example-1" class="headerlink" title="Actors - Counting Example"></a>Actors - Counting Example</h1><ul><li>Let’s create another Actor that will communicate with the three counters</li><li>This actor will “ask” each counter if it’s done or not</li><li>Once all counters are done, it will print a message to the screen</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Supervisor</span>(<span class="params">counters: <span class="type">List</span>[<span class="type">ActorRef</span>]</span>) <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> total: <span class="type">Int</span> = counter.size</span><br><span class="line">    <span class="keyword">var</span> completed: <span class="type">List</span>[<span class="type">ActorRed</span>] = <span class="type">List</span>()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">receive</span></span>: <span class="type">Receive</span> = &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">Update</span> =&gt;</span><br><span class="line">            counters.foreach((actor: <span class="type">ActorRef</span>) =&gt; actor ! <span class="type">IsDone</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="type">Done</span> =&gt; </span><br><span class="line">            <span class="keyword">if</span>(!completed.contains(sender())) &#123;</span><br><span class="line">                completed ::= sender()</span><br><span class="line">                <span class="keyword">if</span> (completed.size == <span class="keyword">this</span>.total)&#123;</span><br><span class="line">                    println(<span class="string">&quot;All counters complete&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">NotDone</span> =&gt; </span><br><span class="line">            println(<span class="string">&quot;A counter is not done yet&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><ul><li>Use the ActorRef class to send messages to other actors<ul><li>sender() returns the ActorRef of the sender of a message</li></ul></li></ul><br><ul><li>Add the supervisor to the system and have it update twice per second</li><li>Use a scheduler to repeatedly send a message<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">obejct <span class="type">CounterTest</span> <span class="keyword">extends</span> <span class="type">App</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> system = <span class="type">ActorSystem</span>(<span class="string">&quot;CountingSystem&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> one = system.actorOf(<span class="type">Props</span>(classOf[<span class="type">Counter</span>], <span class="string">&quot;1&quot;</span>))</span><br><span class="line">    <span class="keyword">val</span> two = system.actorOf(<span class="type">Props</span>(classOf[<span class="type">Counter</span>], <span class="string">&quot;2&quot;</span>))</span><br><span class="line">    <span class="keyword">val</span> three = system.actorOf(<span class="type">Props</span>(classOf[<span class="type">Counter</span>], <span class="string">&quot;3&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> supervisor = system.actorOf(<span class="type">Props</span>(classOf[<span class="type">Supervisor</span>], <span class="type">List</span>(one, two, three))) <span class="comment">// Added supervisor</span></span><br><span class="line"></span><br><span class="line">    one ! <span class="type">Start</span></span><br><span class="line">    two ! <span class="type">Start</span></span><br><span class="line">    three ! <span class="type">Start</span></span><br><span class="line"></span><br><span class="line">    system.scheduler.schedule(<span class="number">0.</span>milliseconds, <span class="number">500.</span>milliseconds, supervisor, <span class="type">Update</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="Lecture-Question"><a href="#Lecture-Question" class="headerlink" title="Lecture Question"></a>Lecture Question</h1><p><strong>Task:</strong><br>Create an Actor class that tracks a single Int</p><ul><li>In a package named actors create a class named StringActor that extends Actor </li><li>Create the following case class&#x2F;objects that will be used as messages<ul><li>A case class named <code>Append</code> that takes a String in its constructor</li><li>A case object named <code>GetValue</code></li><li>A case class named <code>Value</code> that takes a String in its constructor</li></ul></li><li>The StringActor class must:<ul><li>Take a String in its constructor. This will be the initial String that it will store</li><li>When it receives an <code>Append</code> message, append its value to the end of the currently stored String</li><li>When it receives a <code>GetValue</code> message, sends its current value back to the sender in a Value message</li></ul></li></ul><p><strong>Testing:</strong><br>No test:)</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> CSE116 </category>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSE116的学习笔记-Lec4_6_Pathfinding</title>
      <link href="/cn/LO4-6-Pathfinding/"/>
      <url>/cn/LO4-6-Pathfinding/</url>
      
        <content type="html"><![CDATA[<h1 id="Pathfinding-with-BFS"><a href="#Pathfinding-with-BFS" class="headerlink" title="Pathfinding with BFS"></a>Pathfinding with BFS</h1><p>little hard :&#x2F;, but just a little:)    </p><h1 id="Paths"><a href="#Paths" class="headerlink" title="Paths"></a>Paths</h1><ul><li>Path: A sequence of nodes with each adjacent pair of nodes connected by an edge</li><li>The length of a path is the number of edges it contains (number of nodes - 1)</li><li>[LINCOLN, MIT, UTAH, SDC, RAND, UCSB, SRI] &lt;– Path of length 6</li></ul><h1 id="Distance"><a href="#Distance" class="headerlink" title="Distance"></a>Distance</h1><ul><li>Distance between two nodes: The lenght of the shortest path between the nodes</li><li>Distance between LINCOLN and SRI &#x3D;&#x3D; 3 [See the video]</li><li>Distance between RAND and BBN &#x3D;&#x3D; 1 [See the video]</li></ul><h1 id="Use-BFS-to-find-the-diatance-between-nodes"><a href="#Use-BFS-to-find-the-diatance-between-nodes" class="headerlink" title="Use BFS to find the diatance between nodes"></a>Use BFS to find the diatance between nodes</h1><p>Track the shortest path for pathfinding</p><h1 id="There’s-Levels-to-This"><a href="#There’s-Levels-to-This" class="headerlink" title="There’s Levels to This"></a>There’s Levels to This</h1><ul><li>Let’s run through BFS again<ul><li>Instead of just finding the connected component, let’s track the paths taken to explore each node</li></ul></li></ul><br><ul><li>Let’s start at CARNEGIE this time [Se the video]</li><li>Keep track of all edges used to explore new nodes</li><li>Redraw the graph with only these edges</li><li>Explore all neighbors of the starting node</li><li>Explore al neighbors of the nodes explored in the last step</li><li>Repeat</li><li>Choose edge to use for MIT arbitrarily </li><li>Each step we explore all nodes that can be reached from the nodes added in the previous step</li><li>We have a new graph with a few edges removed</li><li>This graph is a tree (no cycles)</li><li>And it has levels!</li></ul><br><ul><li>Number the levels starting with 0</li><li>The levle number &#x3D;&#x3D; the distance from the starting node to any node in that level</li></ul><h1 id="BFS-and-Distacne"><a href="#BFS-and-Distacne" class="headerlink" title="BFS and Distacne"></a>BFS and Distacne</h1><ul><li>But how do we track the levels?</li><li>Track levels in a data structure</li></ul><br><ul><li>But don’t we want to find the shortest path for the Maze HW?<ul><li>Not just the length of the shortest path</li></ul></li></ul><br><ul><li>Instead of tracking the distacne, track the node that discovered each node</li><li>Now each node remembers how it was reached</li><li>Repeat at each step</li><li>At the end of the algotrithm you’ll know how each node was discovered</li><li>Work backwards to buld the shortest path</li><li>Find path from CARNEFIE to STANFORD</li></ul><h1 id="But-we-have-to-find-path-in-a-maze"><a href="#But-we-have-to-find-path-in-a-maze" class="headerlink" title="But we have to find path in a maze"></a>But we have to find path in a maze</h1><p>how do graph help with this?</p><h1 id="Pathfinding-on-a-Grid"><a href="#Pathfinding-on-a-Grid" class="headerlink" title="Pathfinding on a Grid"></a>Pathfinding on a Grid</h1><ul><li>Convert the maze to a graph</li><li>Run BFS starting at the tile containing the maze runner</li><li>Backtrack from the goal tile to build the path</li></ul><h1 id="Lecture-Question"><a href="#Lecture-Question" class="headerlink" title="Lecture Question"></a>Lecture Question</h1><p><strong>Task:</strong><br>Find the distance between two nodes in a graph </p><ul><li>In the week9.Graph class <a href="https://github.com/hartloff/CSE116-Examples">link to example repo</a><ul><li>Write a method named distance that takes two node indices (Ints) and returns the distance between the two nodes</li><li>You may assume the two input nodes are connected</li></ul></li></ul><p><strong>Testing:</strong><br>In a package named “tests” create a class named “TestDistance” as a test suite that tests the functionality listed above</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> CSE116 </category>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSE116的学习笔记-Lec4-5:Graphs</title>
      <link href="/cn/LO4-5-Graphs/"/>
      <url>/cn/LO4-5-Graphs/</url>
      
        <content type="html"><![CDATA[<h1 id="Graphs"><a href="#Graphs" class="headerlink" title="Graphs"></a>Graphs</h1><p>It has cycle, so you know: tree + cycle :&#x2F;     </p><h1 id="Data-Structures-Review"><a href="#Data-Structures-Review" class="headerlink" title="Data Structures: Review"></a>Data Structures: Review</h1><ul><li>Sequential Data Structures<ul><li>Elements stored in a specific order</li><li>Ex: Array, List</li></ul></li><li>Key-Value Store<ul><li>Stores pairs of elements with no particular order</li><li>Each key is associated with one value</li><li>Ex: Map, Dictionary, Object</li></ul></li><li>Tree<ul><li>Non-linear structure</li><li>Each element can be associated with multiple other elements</li></ul></li></ul><h1 id="Data-Structures"><a href="#Data-Structures" class="headerlink" title="Data Structures"></a>Data Structures</h1><ul><li>How do we store datat with multiple interconnected associations?</li><li>A [station, intersection, city] can have multiple connections</li></ul><br><ul><li>Let’s use trees</li><li>Start with UCLA as the root</li><li>Recursively add all chidden</li></ul><br><ul><li>Oops<ul><li>We have duplicates in our data structure [See the video]</li></ul></li></ul><br><ul><li>Let’s try again<ul><li>When we try to add a duplicate, add a reference to the existing node</li></ul></li></ul><br><h1 id="Graohs"><a href="#Graohs" class="headerlink" title="Graohs"></a>Graohs</h1><ul><li>This is a graph [See the video]</li><li>Similar to a tree, except cycles are allowed<ul><li>Cycle: Can “travel” from a node back to itself without backtracking</li></ul></li></ul><br><ul><li>Because of the cycles, our tree traversals will get stuck in infinite recursion<ul><li>No leaves to terminate the recursion</li></ul></li></ul><br><ul><li>We’ll need a new way of representing this datat structure and new algorithms to work with the data </li><li>Store the nodes and edges</li></ul><h1 id="Graphs-Nodes-and-Edges"><a href="#Graphs-Nodes-and-Edges" class="headerlink" title="Graphs - Nodes and Edges"></a>Graphs - Nodes and Edges</h1><ul><li>Node: Each data element is stored in a node, similar to linked lists and trees</li><li>Edge: A connection between two nodes</li></ul><h1 id="Graphs-Adjacency-List"><a href="#Graphs-Adjacency-List" class="headerlink" title="Graphs - Adjacency List"></a>Graphs - Adjacency List</h1><ul><li>A map of nodes to all nodes connected to it through an edge</li><li>This is how we’ll represnet graphs</li><li>When creating a graph, we’ll assign each node a unique ID as a Int<ul><li>Allows nodes with identical vlaues, but different IDs</li></ul></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph</span>[<span class="type">A</span>] </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> nodes: <span class="type">Map</span>[<span class="type">Int</span>, <span class="type">A</span>] = <span class="type">Map</span>()</span><br><span class="line">    <span class="keyword">var</span> adjacencyList: <span class="type">Map</span>[<span class="type">Int</span>, <span class="type">List</span>[<span class="type">Int</span>]] = <span class="type">Map</span>()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addNode</span></span>(index: <span class="type">Int</span>, a: <span class="type">A</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        nodes += index -&gt; a</span><br><span class="line">        adjacencyList += index -&gt; <span class="type">List</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addEdge</span></span>(index1: <span class="type">Int</span>, index2: <span class="type">Int</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        adjacencyList += index1 -&gt; (index2 :: adjacencyList(index1))</span><br><span class="line">        adjacencyList += index2 -&gt; (index1 :: adjacencyList(index2))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>IDs fir each node are arbitray as long as they are unique</li><li>Methods will work with IDs</li><li>Values are only accessed when needed</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph</span>[<span class="type">A</span>] </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> nodes: <span class="type">Map</span>[<span class="type">Int</span>, <span class="type">A</span>] = <span class="type">Map</span>()</span><br><span class="line">    <span class="keyword">var</span> adjacencyList: <span class="type">Map</span>[<span class="type">Int</span>, <span class="type">List</span>[<span class="type">Int</span>]] = <span class="type">Map</span>()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addNode</span></span>(index: <span class="type">Int</span>, a: <span class="type">A</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        nodes += index -&gt; a</span><br><span class="line">        adjacencyList += index -&gt; <span class="type">List</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addEdge</span></span>(index1: <span class="type">Int</span>, index2: <span class="type">Int</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        adjacencyList += index1 -&gt; (index2 :: adjacencyList(index1))</span><br><span class="line">        adjacencyList += index2 -&gt; (index1 :: adjacencyList(index2))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">GraphExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> graph: <span class="type">Graph</span>[<span class="type">String</span>] = <span class="keyword">new</span> <span class="type">Graph</span>() </span><br><span class="line">        graph.addNode(<span class="number">0</span>, <span class="string">&quot;UCLA&quot;</span>) </span><br><span class="line">        graph.addNode(<span class="number">1</span>, <span class="string">&quot;STANFORD&quot;</span>) </span><br><span class="line">        graph.addNode(<span class="number">2</span>, <span class="string">&quot;SRI&quot;</span>) </span><br><span class="line">        graph.addNode(<span class="number">3</span>, <span class="string">&quot;UCSB&quot;</span>) </span><br><span class="line">        graph.addNode(<span class="number">4</span>, <span class="string">&quot;RAND&quot;</span>) </span><br><span class="line">        graph.addNode(<span class="number">5</span>, <span class="string">&quot;UTAH&quot;</span>) </span><br><span class="line">        graph.addNode(<span class="number">6</span>, <span class="string">&quot;SDC&quot;</span>) </span><br><span class="line">        graph.addNode(<span class="number">7</span>, <span class="string">&quot;MIT&quot;</span>) </span><br><span class="line">        graph.addNode(<span class="number">8</span>, <span class="string">&quot;BBN&quot;</span>) </span><br><span class="line">        graph.addNode(<span class="number">9</span>, <span class="string">&quot;LINCOLN&quot;</span>) </span><br><span class="line">        graph.addNode(<span class="number">10</span>, <span class="string">&quot;CARNEGIE&quot;</span>) </span><br><span class="line">        graph.addNode(<span class="number">11</span>, <span class="string">&quot;HARVARD&quot;</span>) </span><br><span class="line">        graph.addNode(<span class="number">12</span>, <span class="string">&quot;CASE&quot;</span>)</span><br><span class="line"></span><br><span class="line">        graph.addEdge(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">        graph.addEdge(<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">        graph.addEdge(<span class="number">0</span>,<span class="number">3</span>)</span><br><span class="line">        graph.addEdge(<span class="number">0</span>,<span class="number">4</span>)</span><br><span class="line">        graph.addEdge(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">        graph.addEdge(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">        graph.addEdge(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">        graph.addEdge(<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line">        graph.addEdge(<span class="number">4</span>,<span class="number">6</span>)</span><br><span class="line">        graph.addEdge(<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">        graph.addEdge(<span class="number">5</span>,<span class="number">7</span>)</span><br><span class="line">        graph.addEdge(<span class="number">4</span>,<span class="number">8</span>)</span><br><span class="line">        graph.addEdge(<span class="number">7</span>,<span class="number">8</span>)</span><br><span class="line">        graph.addEdge(<span class="number">7</span>,<span class="number">9</span>)</span><br><span class="line">        graph.addEdge(<span class="number">9</span>,<span class="number">12</span>)</span><br><span class="line">        graph.addEdge(<span class="number">12</span>,<span class="number">10</span>)</span><br><span class="line">        graph.addEdge(<span class="number">10</span>,<span class="number">11</span>)</span><br><span class="line">        graph.addEdge(<span class="number">11</span>,<span class="number">8</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Paths"><a href="#Paths" class="headerlink" title="Paths"></a>Paths</h1><ul><li>A path is a sequence of nodes where each pair of adjacent nodes are connected by an edge</li><li>[“UCLA”, “SRI”, “UTAH”, “MIT”, “BBN”, “RAND”] is a path in this graph</li><li>[“SRI”, “UTAH”, “BBN”] is not a path since UTAH and BBN are not connected by an edge</li></ul><h1 id="Breadth-First-Search-BFS"><a href="#Breadth-First-Search-BFS" class="headerlink" title="Breadth-First Search (BFS)"></a>Breadth-First Search (BFS)</h1><h2 id="Connected-Component"><a href="#Connected-Component" class="headerlink" title="Connected Component"></a>Connected Component</h2><ul><li>This graph is connected<ul><li>There exists a path between any 2 nodes in the graph</li></ul></li></ul><br><ul><li>What if a few connections are broken?<ul><li>How can we tell if tweo nodes are connected?</li></ul></li></ul><br><ul><li>We could verify manually for this graph</li><li>But the Internet has gotten a <em>little</em> bigger over time</li><li>Need to code an algorithm to solve this for us</li></ul><h2 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h2><ul><li>The Algotithm: Breath-First Search (BFS)<ul><li>Choose a starting node</li><li>Continuously explore connected nodes</li></ul></li></ul><br><ul><li>Chooses a starting node</li><li>Explore all nodes connected to the striating node</li><li>Repeat until no new nodes are added</li><li>Never visit a node twice</li></ul><br><ul><li>Use a queue to track the order of nodes to visit</li><li>Start with starting node in the queue</li><li>When visiting a node, add all unexplored neighbors to the queue</li><li>Visit neighbors of the node at the front of the queue until the queue is empty</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs</span></span>[<span class="type">A</span>](graph: <span class="type">Graph</span>[<span class="type">A</span>], startID: <span class="type">Int</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> explored: <span class="type">Set</span>[<span class="type">Int</span>] = <span class="type">Set</span>(startID)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> toExplore: <span class="type">Queue</span>[<span class="type">Int</span>] = <span class="keyword">new</span> <span class="type">Queue</span>()</span><br><span class="line">    toExplore.enqueue(startID)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!toExplore.empty()) &#123;</span><br><span class="line">        <span class="keyword">val</span> nodeToExplore = toExplore.dequeue()</span><br><span class="line">        <span class="keyword">for</span> (node &lt;- graph.adjacencyList(nodeToExplore)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!explored.contains(node)) &#123;</span><br><span class="line">                println(<span class="string">&quot;exploring: &quot;</span> + graph.nodes(node))</span><br><span class="line">                toExplore.enqueue(node)</span><br><span class="line">                explored = explored + node</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Connectivity"><a href="#Connectivity" class="headerlink" title="Connectivity"></a>Connectivity</h1><ul><li>If you start at nodeA and explore nodeB during the algorithm<ul><li>nodeA and nodeB are connected</li><li>For the lecture question and last HW you’ll need to modify &#x2F; expand the provided BFS code</li></ul></li></ul><h1 id="Lecture-Question"><a href="#Lecture-Question" class="headerlink" title="Lecture Question"></a>Lecture Question</h1><p><strong>Task:</strong><br>Determine if two nodes connected    </p><ul><li>In the week9.Graph class <a href="https://github.com/hartloff/CSE116-Examples">link to example repo</a><ul><li>Write a method named areConnected that takes two node indices (Ints) and determines if the two nodes are connected in the graph</li><li>Return true if they are connected, false if they are not</li></ul></li></ul><p><strong>Testing:</strong><br>In a package named “tests” create a class named “TestConnected” as a test suite that tests the functionality listed above</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> CSE116 </category>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSE116的学习笔记-Lec4-4:BST</title>
      <link href="/cn/LO4-4-BST/"/>
      <url>/cn/LO4-4-BST/</url>
      
        <content type="html"><![CDATA[<h1 id="Binary-Search-Tree-BST"><a href="#Binary-Search-Tree-BST" class="headerlink" title="Binary Search Tree (BST)"></a>Binary Search Tree (BST)</h1><p>Sorted Tree :&#x2F;  </p><h1 id="BST-Definition"><a href="#BST-Definition" class="headerlink" title="BST - Definition"></a>BST - Definition</h1><ul><li>For each node:<ul><li>All values in the left subtree are less than the node’s value</li><li>All values in the right subtree are greater than the node’s value</li><li>Duplicate values handled differently based on implementation<ul><li>Sometims not allowed at all</li></ul></li></ul></li></ul><h1 id="BST-Code"><a href="#BST-Code" class="headerlink" title="BST - Code"></a>BST - Code</h1><ul><li>To make the BST generic<ul><li>Take a type poarameter</li><li>Take a comparator to decide the sorted order</li></ul></li><li>Store a reference to the root node</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinarySearchTree</span>[<span class="type">A</span>](<span class="params">comparator: (<span class="type">A</span>, <span class="type">A</span></span>) <span class="title">=&gt;</span> <span class="title">Boolean</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> root: <span class="type">BinaryTreeNode</span>[<span class="type">A</span>] = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span></span>(a: <span class="type">A</span>): <span class="type">Unit</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span></span>(a: <span class="type">A</span>): <span class="type">BinaryTreeNode</span>[<span class="type">A</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="BST-Usage"><a href="#BST-Usage" class="headerlink" title="BST - Usage"></a>BST - Usage</h1><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinarySearchTree</span>[<span class="type">A</span>](<span class="params">comparator: (<span class="type">A</span>, <span class="type">A</span></span>) <span class="title">=&gt;</span> <span class="title">Boolean</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> root: <span class="type">BinaryTreeNode</span>[<span class="type">A</span>] = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span></span>(a: <span class="type">A</span>): <span class="type">Unit</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span></span>(a: <span class="type">A</span>): <span class="type">BinaryTreeNode</span>[<span class="type">A</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> intLessThan = (a:<span class="type">Int</span>, b: <span class="type">Int</span>) =&gt; a &lt; b</span><br><span class="line"><span class="keyword">val</span> bst = <span class="keyword">new</span> <span class="type">BinarySearchTree</span>[<span class="type">Int</span>](intLessThan)</span><br><span class="line">bst.insert(<span class="number">5</span>)</span><br><span class="line">bst.insert(<span class="number">2</span>)</span><br><span class="line">bst.insert(<span class="number">8</span>)</span><br><span class="line">bst.insert(<span class="number">4</span>)</span><br><span class="line">bst.insert(<span class="number">7</span>)</span><br><span class="line">bst.insert(<span class="number">14</span>)</span><br><span class="line">bst.insert(<span class="number">-3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> node = bst.find(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><h1 id="BST-Find"><a href="#BST-Find" class="headerlink" title="BST - Find"></a>BST - Find</h1><ul><li>If the value to find is less than the value of the value of the node - Move to the left child</li><li>If the value to find is greater than the value of the node - Move to right child</li><li>If value is found - return this node</li><li>If value is not found - return null</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span></span>(a: <span class="type">A</span>): <span class="type">BinaryTreeNode</span>[<span class="type">A</span>] = &#123;</span><br><span class="line">    findHelper(a, <span class="keyword">this</span>.root)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findHelper</span></span>(a: <span class="type">A</span>, node: <span class="type">BinaryTreeNode</span>[<span class="type">A</span>]): <span class="type">BinaryTreeNode</span>[<span class="type">A</span>] = &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="literal">null</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (comparator(a, node.value)) &#123;</span><br><span class="line">        findHelper(a, node.left)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (comparator(node.value, a)) &#123;</span><br><span class="line">        findHelper(a, node.right)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        node</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="BST-Insert"><a href="#BST-Insert" class="headerlink" title="BST - Insert"></a>BST - Insert</h1><ul><li>Run find until a null node is reached - insert new node here</li><li>If value is a duplicate, move to the left</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span></span>(a: <span class="type">A</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.root = <span class="keyword">new</span> <span class="type">BinaryTreeNode</span>(a, <span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        insertHelper(a, <span class="keyword">this</span>.root)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insertHelper</span></span>(a: <span class="type">A</span>, node: <span class="type">BinaryTreeNode</span>[<span class="type">A</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (comparator(node.value, a)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node.right == <span class="literal">null</span>) &#123;</span><br><span class="line">            node.right = <span class="keyword">new</span> <span class="type">BinaryTreeNode</span>[<span class="type">A</span>](a, <span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            insertHelper(a, node.right)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node.left == <span class="literal">null</span>) &#123;</span><br><span class="line">            node.left = <span class="keyword">new</span> <span class="type">BinaryTreeNode</span>[<span class="type">A</span>](a, <span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            insertHelper(a, node.left)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="In-Order-Traversal"><a href="#In-Order-Traversal" class="headerlink" title="In-Order Traversal"></a>In-Order Traversal</h1><ul><li>In-Order traversal of a BST iterates over the values in soorted order</li><li>Visit all elements of the left subtree<ul><li>Elements less than the node’s value</li></ul></li><li>Visit the nodes value</li><li>Visit all elements of the right subtree<ul><li>Elements greater than the node’s value</li></ul></li></ul><h1 id="BST-Efficiency"><a href="#BST-Efficiency" class="headerlink" title="BST - Efficiency"></a>BST - Efficiency</h1><ul><li>Vocab: A tree is balanced if each node has the same number of descendants in its left and right subtrees</li><li>*<strong>If a BST is balanced</strong></li><li>The number of nodes from the root to a leaf - the height of the tree - is O(log(n))</li><li>Insert and find take O(log(n)) time</li><li>Inserting n elements effctively sorts in O(n*log(n)) time</li><li>Advantage: Sorted order is efficiently maintained as new elements are add in O(log(n))<ul><li>Array takes O(n) to insert</li><li>Linked list takes O(n) to find where to insert</li></ul></li></ul><h1 id="BST-Inefficiency"><a href="#BST-Inefficiency" class="headerlink" title="BST - Inefficiency"></a>BST - Inefficiency</h1><ul><li>What if the tree is not balanced?</li></ul><br><ul><li>If elements are inserted in sorted order</li><li>Tree effectively becomes a linked list<ul><li>O(n) insert and find</li></ul></li></ul><h1 id="BST-for-Thought"><a href="#BST-for-Thought" class="headerlink" title="BST for Thought"></a>BST for Thought</h1><ul><li>How do we keep the tree balanced and still insert in O(log(n)) time</li><li>How would we remove a node while maintaining sorted order?</li><li>How do we handle duplicate values?<ul><li>Should duplicates even be allowed?</li></ul></li></ul><br><ul><li>Answers to these queations and more…..<ul><li>In <strong>CSE250</strong></li></ul></li></ul><h1 id="Lecture-Question"><a href="#Lecture-Question" class="headerlink" title="Lecture Question"></a>Lecture Question</h1><p><strong>Task:</strong><br>Write a method to convert a BST to a List (go to example repo) || <a href="https://github.com/hartloff/CSE116-Examples">link</a>     </p><ul><li>In the week8.trees.BinarySearchTree class write a method named <code>toList</code> that takes no parameters and returns the values of the tree in a List in sorted order</li></ul><p><strong>Testing:</strong><br>No test:)</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> CSE116 </category>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSE116的学习笔记-Lec4-3:Trees</title>
      <link href="/cn/LO4-3-Trees/"/>
      <url>/cn/LO4-3-Trees/</url>
      
        <content type="html"><![CDATA[<h1 id="Binary-Trees-and-Traversals"><a href="#Binary-Trees-and-Traversals" class="headerlink" title="Binary Trees and Traversals"></a>Binary Trees and Traversals</h1><p>You would also learn this on CSE191 @.@     </p><h1 id="Binary-Trees"><a href="#Binary-Trees" class="headerlink" title="Binary Trees"></a>Binary Trees</h1><ul><li>Similar in structure to Linked List<ul><li>Consists of Nodes</li><li>A Tree is only a reference to the first node (Called the root node)</li></ul></li><li>Trees have 2 references to nodes<ul><li>Each node has left and right reference</li><li>Vocab: These are called its child nodes</li><li>Vocab: The node is the parent to these children</li></ul></li></ul><h1 id="The-Code"><a href="#The-Code" class="headerlink" title="The Code"></a>The Code</h1><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinaryTreeNode</span>[<span class="type">A</span>](<span class="params">var value: <span class="type">A</span>, var left: <span class="type">BinaryTreeNode</span>[<span class="type">A</span>], var right: <span class="type">BinaryTreeNode</span>[<span class="type">A</span>]</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> root = <span class="keyword">new</span> <span class="type">BinaryTreeNode</span>[<span class="type">Int</span>](<span class="number">5</span>, <span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">root.left = <span class="keyword">new</span> <span class="type">BinaryTreeNode</span>[<span class="type">Int</span>](<span class="number">2</span>, <span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">root.right = <span class="keyword">new</span> <span class="type">BinaryTreeNode</span>[<span class="type">Int</span>](<span class="number">8</span>, <span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">root.left.left = <span class="keyword">new</span> <span class="type">BinaryTreeNode</span>[<span class="type">Int</span>](<span class="number">-3</span>, <span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">root.left.right = <span class="keyword">new</span> <span class="type">BinaryTreeNode</span>[<span class="type">Int</span>](<span class="number">4</span>, <span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">root.right.left = <span class="keyword">new</span> <span class="type">BinaryTreeNode</span>[<span class="type">Int</span>](<span class="number">7</span>, <span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">root.right.right = <span class="keyword">new</span> <span class="type">BinaryTreeNode</span>[<span class="type">Int</span>](<span class="number">14</span>, <span class="literal">null</span>, <span class="literal">null</span>)</span><br></pre></td></tr></table></figure><ul><li>Binary Tree Nodes are very similar in structure to Linked List Nodes</li><li>No simple prepend or append so we’ll manaually build a tree by setting left and right directly</li></ul><h1 id="Tree-Traversals"><a href="#Tree-Traversals" class="headerlink" title="Tree Traversals"></a>Tree Traversals</h1><ul><li>How do we compute with trees?<ul><li>With linked lists we wrote several methods that recursively visited the next node to visit every value</li></ul></li><li>With trees, how do we visit both children of each node?<ul><li>Recursive call on both child nodes</li></ul></li><li>We’ll see 3 different approaches<ul><li>Pre-Order Traversal</li><li>In-Order Traversal</li><li>Post-Order Traversal</li></ul></li></ul><br><ul><li>Pre-Order Traversal<ul><li>Visit the node’s value</li><li>Call pre-order on the left child</li><li>Call pre-order on the right child</li></ul></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preOrderTraversal</span></span>[<span class="type">A</span>](node: <span class="type">BinaryTreeNode</span>[<span class="type">A</span>], f: <span class="type">A</span> =&gt; <span class="type">Unit</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">        f(node.value)</span><br><span class="line">        preOrderTraversal(ndoe.left, f)</span><br><span class="line">        preOrderTraversal(ndoe.right, f)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">preOrderTraversal(root, println)</span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">-3</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">8</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">14</span></span><br><span class="line"><span class="comment">***/</span></span><br></pre></td></tr></table></figure><br><ul><li>Post-Order Traversal<ul><li>Call post-order on the left child</li><li>Call post-order on the right child</li><li>Visit the node’s value</li></ul></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">postOrderTraversal</span></span>[<span class="type">A</span>](node: <span class="type">BinaryTreeNode</span>[<span class="type">A</span>], f: <span class="type">A</span> =&gt; <span class="type">Unit</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span>(node != <span class="literal">null</span>) &#123;</span><br><span class="line">        postOrderTraversal(node.left, f)</span><br><span class="line">        postOrderTraversal(node.right, f)</span><br><span class="line">        f(node.value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">postOrderTraversal(root, println)</span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment">-3</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">14</span></span><br><span class="line"><span class="comment">8</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">***/</span></span><br></pre></td></tr></table></figure><br><ul><li>In-Order Traversal<ul><li>Call in-order on the left child</li><li>Visit the node’s value</li><li>Call in-order on the right child</li></ul></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inOrderTraversal</span></span>[<span class="type">A</span>](node: <span class="type">BinaryTreeNode</span>[<span class="type">A</span>], f: <span class="type">A</span> =&gt; <span class="type">Unit</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">        inOrderTraversal(node.left, f)</span><br><span class="line">        f(node.value)</span><br><span class="line">        inOrderTraversal(node.right, f)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inOrderTraversal(root, println)</span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment">-3</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">8</span></span><br><span class="line"><span class="comment">14</span></span><br><span class="line"><span class="comment">***/</span></span><br></pre></td></tr></table></figure><h1 id="Expression-Trees"><a href="#Expression-Trees" class="headerlink" title="Expression Trees"></a>Expression Trees</h1><ul><li>Represent an expression as a binary tree</li><li>Nodes can be <ul><li>Operands</li><li>Operators</li></ul></li><li>An operand is a literal value</li><li>An operator is evaluated by using its left and right children as operands<ul><li>Operands can be operators</li></ul></li></ul><p>&#x2F;&#x2F; 运算符号作为上级，被运算的数字放在它的子项，先算的放在左边子项，最后算的运算符号作为root</p><h1 id="Expression-Tree-Traversals"><a href="#Expression-Tree-Traversals" class="headerlink" title="Expression Tree Traversals"></a>Expression Tree Traversals</h1><ul><li>Modified in-order traversal that adds parentheses around each operator</li><li>Generates a fully parenthesized infix expression</li><li>((12-4) - (8+(9&#x2F;3)))</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fullyParenthesizedInOrderTraversal</span></span>[<span class="type">A</span>](node: <span class="type">BinaryTreeNode</span>[<span class="type">A</span>], f: <span class="type">A</span> =&gt; <span class="type">Unit</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">val</span> operator = <span class="type">List</span>(<span class="string">&quot;^&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;+&quot;</span>, <span class="string">&quot;-&quot;</span>).contains(node.value)</span><br><span class="line">        <span class="keyword">if</span> (operator) &#123;</span><br><span class="line">            print(<span class="string">&quot;(&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        fullyParenthesizedInOrderTraversal(node.left, f)</span><br><span class="line">        f(node.value)</span><br><span class="line">        fullyParenthesizedInOrderTraversal(node.right, f)</span><br><span class="line">        <span class="keyword">if</span> (operator) &#123;</span><br><span class="line">            print(<span class="string">&quot;)&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Unmodified post-order traversal generates a postfix express</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">postOrderTraversal(root, (token: <span class="type">String</span>) =&gt; print(token + <span class="string">&quot; &quot;</span>))</span><br></pre></td></tr></table></figure><hr><h1 id="Lecture-Question"><a href="#Lecture-Question" class="headerlink" title="Lecture Question"></a>Lecture Question</h1><p><strong>Task:</strong><br>Evaluate an expression tree (go to example repo) || <a href="https://github.com/hartloff/CSE116-Examples">link</a>     </p><ul><li>In the week8.trees.ExpressionTree object, write a method named evaluateTree that takes the root of an expression tree (BinaryTreeNode[String]) as a parameter and returns the evaluation of the tree as a Double</li><li>The operators can be “*”, “&#x2F;“, “+”, and “-“</li><li>You can assume that all Nodes storing numbers are well- formed (Ie. If a node’s String is not one of the 4 operators, you can call .toDouble on it to convert it to a Double)</li></ul><p><strong>Testing:</strong><br>In a package named “tests” create a class named “TestExpressionTree” as a test suite that tests the functionality above (Only write tests with valid expression trees as input)</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> CSE116 </category>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSE116的学习笔记-Lec4-2:Stack_Queue</title>
      <link href="/cn/LO4-2-Stack-Queue/"/>
      <url>/cn/LO4-2-Stack-Queue/</url>
      
        <content type="html"><![CDATA[<h1 id="Stack-and-Queue"><a href="#Stack-and-Queue" class="headerlink" title="Stack and Queue"></a>Stack and Queue</h1><ul><li>Date structures with specific purposes<ul><li>Restricted features</li></ul></li><li>All operations are very efficient<ul><li>Inefficient operations are not allowed</li></ul></li><li>We’ll se a stack and queue using linked liss</li><li>*Scala has builtin Stack and Queue classes</li></ul><h1 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h1><ul><li>LIFO<ul><li>Last in First out</li><li>The last element pushed onto the stack is the first element to be popped off the stack</li><li>Only the element on the top of the stack can be accessed</li></ul></li></ul><h2 id="Stack-Methods"><a href="#Stack-Methods" class="headerlink" title="Stack Methods"></a>Stack Methods</h2><ul><li>Push<ul><li>Add an element to the top of the stack</li></ul></li><li>Pop<ul><li>Remove the top element of the stack</li></ul></li></ul><h2 id="Stack-Implementation"><a href="#Stack-Implementation" class="headerlink" title="Stack Implementation"></a>Stack Implementation</h2><ul><li>Implement a Stack class by wrapping a linked list</li><li>Stacl uses the linked list and adapts its methods to implement push and pop</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span>[<span class="type">A</span>] </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> top: <span class="type">LinkedListNode</span>[<span class="type">A</span>] = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span></span>(a: <span class="type">A</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">this</span>.top = <span class="keyword">new</span> <span class="type">LinkedListNode</span>[<span class="type">A</span>](a, <span class="keyword">this</span>.top)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span></span>(): <span class="type">A</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> toReturn = <span class="keyword">this</span>.top.value</span><br><span class="line">        <span class="keyword">this</span>.top = <span class="keyword">this</span>.top.next</span><br><span class="line">        toReturn</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Stack-Usage"><a href="#Stack-Usage" class="headerlink" title="Stack Usage"></a>Stack Usage</h2><ul><li>Create a new empty Stack</li><li>Call push to add an element to the top</li><li>Call pop to remove an element</li><li>Same exact usage when using Scala’s builtin Stack</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> stack = <span class="keyword">new</span> <span class="type">Stack</span>[<span class="type">Int</span>]()</span><br><span class="line">stack.push(<span class="number">3</span>)</span><br><span class="line">stack.push(<span class="number">7</span>)</span><br><span class="line">stack.push(<span class="number">2</span>)</span><br><span class="line">stack.push(<span class="number">-5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> element = stack.pop()</span><br></pre></td></tr></table></figure><br><ul><li>We can use Scala’ss list as a Stack<ul><li>The preferred way to use the concept of a stack in practice</li></ul></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@deprecated</span>(<span class="string">&quot;Stack is an inelegant and potentially poorly-performing wrapper around List. Use List instead: stack push x becomes x :: list; stack.pop is list.tail.&quot;</span>, <span class="string">&quot;2.11.0&quot;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span>[+<span class="type">A</span>] <span class="title">protected</span> (<span class="params">protected val elems: <span class="type">List</span>[<span class="type">A</span>]</span>)</span></span><br></pre></td></tr></table></figure><ul><li>This is very efficient!</li><li>But wait..doesn’t this create a new list each time an element is pushed or popped since List is immutable?<ul><li>No..well, kind of</li></ul></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stack = <span class="type">List</span>[<span class="type">Int</span>]</span><br><span class="line">stack = <span class="number">3</span> :: stack</span><br><span class="line">stack = <span class="number">7</span> :: stack</span><br><span class="line">stack = <span class="number">2</span> :: stack</span><br><span class="line">stack = <span class="number">-5</span> :: stack</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> element = stack.head</span><br><span class="line">stack = stack.tail</span><br></pre></td></tr></table></figure><ul><li>Before -5 is pushed, the stack is equal to nodes in the red box (2, 7, 3, null)[see the video]</li><li>After pushing -5, the red box is unchanged</li><li>A new List <strong>is</strong> returned, but it reuses the old List<ul><li>No need to recreate the entire List</li></ul></li></ul><br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stack = <span class="type">List</span>[<span class="type">Int</span>]</span><br><span class="line">stack = <span class="number">3</span> :: stack</span><br><span class="line">stack = <span class="number">7</span> :: stack</span><br><span class="line">stack = <span class="number">2</span> :: stack</span><br><span class="line">stack = <span class="number">-5</span> :: stack</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> element = stack.head</span><br><span class="line">stack = stack.drop(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><ul><li>Same efficiency when -5 is popped</li><li>The red box never changed, but wer update the reference stored in the stack variable</li><li>Other parts of the program can share parts of a List without having their changes affect each other</li></ul><h1 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h1><ul><li>FIFO<ul><li>First in First out</li><li>The first element enqueued into the queue is the first element to be dequeued out of the queue</li></ul></li><li>Elements can only be added to the end of the queue</li><li>Only the element at the front of the queue can be accessed</li></ul><h2 id="Queue-Methods"><a href="#Queue-Methods" class="headerlink" title="Queue Methods"></a>Queue Methods</h2><ul><li>Enqueue<ul><li>Add an element to the end of the queue</li></ul></li><li>Dequeue<ul><li>Remove the front element in the queue</li></ul></li></ul><h2 id="Queue-Implementation"><a href="#Queue-Implementation" class="headerlink" title="Queue Implementation"></a>Queue Implementation</h2><ul><li>Implement a Queue class by wrapping a linked list</li><li>Queue needs a reference to the first and last element</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span>[<span class="type">A</span>] </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> front: <span class="type">LinkedListNode</span>[<span class="type">A</span>] = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">var</span> back: <span class="type">LinkedListNode</span>[<span class="type">A</span>] = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">enqueue</span></span>(a: <span class="type">A</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">if</span> (back == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.back = <span class="keyword">new</span> <span class="type">LinkedListNode</span>[<span class="type">A</span>](a, <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">this</span>.front = <span class="keyword">this</span>.back</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.back.next = <span class="keyword">new</span> <span class="type">LinkedListNode</span>[<span class="type">A</span>](a, <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">this</span>.back = <span class="keyword">this</span>.back.next</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dequeue</span></span>(): <span class="type">A</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> toReturn = <span class="keyword">this</span>.front.value</span><br><span class="line">        <span class="keyword">this</span>.front = <span class="keyword">this</span>.front.next</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.front == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.back = <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">        toReturn</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Queue-Usage"><a href="#Queue-Usage" class="headerlink" title="Queue Usage"></a>Queue Usage</h2><ul><li>Create a new empty Queue</li><li>Call enqueue to add an element to the back</li><li>Call dequeue to remove the element at the front</li><li>Same exact usage when using Scala’s builtin Queue<ul><li>[based on mutable List just like our implementation]</li></ul></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> queue = <span class="keyword">new</span> <span class="type">Queue</span>[<span class="type">Int</span>]()</span><br><span class="line">queue.enqueue(<span class="number">3</span>)</span><br><span class="line">queue.enqueue(<span class="number">7</span>)</span><br><span class="line">queue.enqueue(<span class="number">2</span>)</span><br><span class="line">queue.enqueue(<span class="number">-5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> element = queue.dequeue()</span><br></pre></td></tr></table></figure><ul><li>No efficient way to use an immutable List as a queue</li><li>To enqueue 3 the list in the red box(-5, 2, 7)[See the video] must change<ul><li>The next reference of the node containing 7 has to be updated</li><li>This List cannot be [Should not be] used by other parts of the program since the List is changing</li></ul></li></ul><br><h1 id="Stack-Example"><a href="#Stack-Example" class="headerlink" title="Stack Example"></a>Stack Example</h1><p>&#x2F;&#x2F; Check the video &#x2F;&#x2F;</p><h1 id="Infix-Expressions"><a href="#Infix-Expressions" class="headerlink" title="Infix Expressions"></a>Infix Expressions</h1><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">12</span><span class="number">-4</span>) - (<span class="number">8</span>+<span class="number">9</span>/<span class="number">3</span>*<span class="number">2</span>)</span><br></pre></td></tr></table></figure><ul><li>The standard way to write an expression</li><li>Operators placed <strong>between</strong> two operands</li><li>Order of operations must be considered</li><li>Parentheses used to override order of operations</li></ul><h2 id="Evaluating-Infix-Expressions"><a href="#Evaluating-Infix-Expressions" class="headerlink" title="Evaluating Infix Expressions"></a>Evaluating Infix Expressions</h2><ul><li>PEMDAS<ul><li>Parentheses -&gt; Exponentiation -&gt; Multiplicaiton &#x2F; Division -&gt; Addision &#x2F; Subtraction</li><li>计算顺序，现括号后平方再乘除，最后加减</li></ul></li></ul><h1 id="Postfix-Expressions"><a href="#Postfix-Expressions" class="headerlink" title="Postfix Expressions"></a>Postfix Expressions</h1><ul><li>12 4 - 8 9 3 &#x2F; 2 * + -</li></ul><br><ul><li>Advantages:<ul><li>No parentheses needed</li><li>No order of operations to consider</li><li>Easy for computers to read</li></ul></li><li>Disadvantages:<ul><li>Hard for humans to read (Without practice)</li></ul></li></ul><h2 id="Evaluating-Postfix-Expressions"><a href="#Evaluating-Postfix-Expressions" class="headerlink" title="Evaluating Postfix Expressions"></a>Evaluating Postfix Expressions</h2><ul><li>Find the first operator and evaluate it using the previous 2 operands<ul><li>Repeat until there are no operators</li></ul></li></ul><h1 id="Infix-Postfix"><a href="#Infix-Postfix" class="headerlink" title="Infix -&gt; Postfix"></a>Infix -&gt; Postfix</h1><ul><li>Shunting Yard<ul><li>Convert infix to postfix</li></ul></li><li>Read expression left to right</li><li>Copy operands to the output</li><li>Push operatos and parentheses onto a  <strong>stack</strong><ul><li>If reading “)”, move top of stack to output until “(“ is popped</li><li>If readingg an operator, first move top of stack to output until a lower precedent (Should be evaluated later) operator is on top or the stack is empty</li></ul></li><li>After reading the entire input, copy the rest of the stack to the output</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">12</span><span class="number">-4</span>) - (<span class="number">8</span>+<span class="number">9</span>/<span class="number">3</span>*<span class="number">2</span>) -&gt; <span class="number">12</span> <span class="number">4</span> - <span class="number">8</span> <span class="number">9</span> <span class="number">3</span> / <span class="number">2</span> * + -</span><br></pre></td></tr></table></figure><br><h1 id="Lecture-Question"><a href="#Lecture-Question" class="headerlink" title="Lecture Question"></a>Lecture Question</h1><p><strong>Task:</strong><br>Implement a backlog to track tasks that can’t be completed immediately</p><ul><li>In a package named datastructures, write a class named Backlog with the following functionality<ul><li>Takes a type parameter A</li><li>Takes a function in its constructor of type A &#x3D;&gt; Unit</li><li>Has a method named <code>addTask</code> that takes a task of type A and returns Unit that adds the task to the backlog (A queue)</li><li>Has a method named <code>completeTask</code> that takes no parameters and returns Unit that calls the function (from the constructor) on the oldest task in the backlog and removes that task from the backlog<ul><li>If the Backlog is empty, this method does nothing</li></ul></li></ul></li></ul><p><strong>Testing:</strong><br>In a package named “tests” create a class named “TestBacklog” as a test suite that tests the functionality above</p><h1 id="Lecture-Question-Example"><a href="#Lecture-Question-Example" class="headerlink" title="Lecture Question Example"></a>Lecture Question Example</h1><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Email</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> checked = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkEmail</span></span>(email: <span class="type">Email</span>): <span class="type">Unit</span> = &#123; </span><br><span class="line">  email.checked = <span class="literal">true</span> </span><br><span class="line">  println(<span class="string">&quot;Checked an email&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> backlog = <span class="keyword">new</span> <span class="type">Backlog</span>[<span class="type">Email</span>](checkEmail)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7 new emails hit the inbox </span></span><br><span class="line">backlog.addTask(<span class="keyword">new</span> <span class="type">Email</span>) <span class="comment">// 1 </span></span><br><span class="line">backlog.addTask(<span class="keyword">new</span> <span class="type">Email</span>) <span class="comment">// 2 </span></span><br><span class="line">backlog.addTask(<span class="keyword">new</span> <span class="type">Email</span>) </span><br><span class="line">backlog.addTask(<span class="keyword">new</span> <span class="type">Email</span>) </span><br><span class="line">backlog.addTask(<span class="keyword">new</span> <span class="type">Email</span>) </span><br><span class="line">backlog.addTask(<span class="keyword">new</span> <span class="type">Email</span>) </span><br><span class="line">backlog.addTask(<span class="keyword">new</span> <span class="type">Email</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Only time to check 2 emails </span></span><br><span class="line">backlog.completeTask() <span class="comment">// checks the email marked 1 </span></span><br><span class="line">backlog.completeTask() <span class="comment">// checks the email marked 2</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> CSE116 </category>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSE116的学习笔记-Lec4-1:Linked_List</title>
      <link href="/cn/LO4-1-Linked-List/"/>
      <url>/cn/LO4-1-Linked-List/</url>
      
        <content type="html"><![CDATA[<h1 id="Linked-List"><a href="#Linked-List" class="headerlink" title="Linked List"></a>Linked List</h1><p>List “Pro” version:)</p><h1 id="Recall-Array"><a href="#Recall-Array" class="headerlink" title="Recall - Array"></a>Recall - Array</h1><ul><li>Sequential<ul><li>One continuous block of memory</li><li>Random access based on memory address<ul><li>address &#x3D; first_address + (element_size * index)</li></ul></li></ul></li><li>Fixed Size<ul><li>Since memory adjacent to the block may be used</li><li>Efficient when you know many elements you’ll need to store</li></ul></li></ul><br><h1 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h1><ul><li>Arrays are stored on the heap</li><li>Pointer to index 0 goes on the stack</li><li>add index * sizeOfElement to 1503 to find each element<ul><li>This is called random access</li></ul></li></ul><h1 id="Recall-Linked-List"><a href="#Recall-Linked-List" class="headerlink" title="Recall - Linked List"></a>Recall - Linked List</h1><ul><li>Sequential<ul><li>Spread across memory</li><li>Each element knows the memory address of the next element<ul><li>Follow the addresses to find each element</li></ul></li></ul></li><li>Variable Size<ul><li>Store new element anywhere in memory</li><li>New element stores address of the first eloement</li></ul></li></ul><h1 id="Linked-List-1"><a href="#Linked-List-1" class="headerlink" title="Linked List"></a>Linked List</h1><ul><li>myList stores a list containing: [5,3,1]</li><li>Last link stores null<ul><li>We say the list is “null terminated”</li><li>When we read a value of null we know we reached the end of the list</li></ul></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedListNode</span>[<span class="type">A</span>](<span class="params">var value: <span class="type">A</span>, var next: <span class="type">LinkedListNode</span>[<span class="type">A</span>]</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myList: <span class="type">LinkedListNode</span>[<span class="type">Int</span>] = <span class="keyword">new</span> <span class="type">LinkedListNode</span>[<span class="type">Int</span>](<span class="number">1</span>, <span class="literal">null</span>)</span><br><span class="line">myList = <span class="keyword">new</span> <span class="type">LinkedListNode</span>[<span class="type">Int</span>](<span class="number">3</span>, myList)</span><br><span class="line">myList = <span class="keyword">new</span> <span class="type">LinkedListNode</span>[<span class="type">Int</span>](<span class="number">5</span>, myList)</span><br></pre></td></tr></table></figure><ul><li>We create our own linked list class by defining a node<ul><li>A node represents one “link” in the list</li></ul></li><li>The list itself is a reference to the first &#x2F; head node</li><li>Note: This is a <strong>mutable</strong> list<ul><li>You’ll build immutable lists in CSE250</li></ul></li></ul><br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myList: <span class="type">LinkedListNode</span>[<span class="type">Int</span>] = <span class="keyword">new</span> <span class="type">LinkedListNode</span>[<span class="type">Int</span>](<span class="number">1</span>, <span class="literal">null</span>)</span><br></pre></td></tr></table></figure><ul><li>Create a new variable to store the head (first node) of the list</li><li>Create a new node with the value 1</li><li>The list has size 1</li></ul><br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myList = <span class="keyword">new</span> <span class="type">LinkedListNode</span>[<span class="type">Int</span>](<span class="number">3</span>, myList)</span><br></pre></td></tr></table></figure><ul><li>We prepend a new node to the list<ul><li>Create a new node with value 3</li><li>The new node “refers” to the rest of the list</li></ul></li><li>The list has size 2</li></ul><br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myList = <span class="keyword">new</span> <span class="type">LinkedListNode</span>[<span class="type">Int</span>](<span class="number">5</span>, myList)</span><br></pre></td></tr></table></figure><ul><li>Repeat the process to build a list of size 3</li><li>Each node refers to the next node in the list</li><li>The last node doesn’t refer to anything (null) indicating the end of list</li></ul><h1 id="Linked-List-Algorithms"><a href="#Linked-List-Algorithms" class="headerlink" title="Linked List Algorithms"></a>Linked List Algorithms</h1><ul><li>We know the structure of a linked list</li><li>How do we operate on these lists?</li><li>We would like to:<ul><li>Find the size of a list</li><li>Print all the elements of a list</li><li>Access elements by location</li><li>Add &#x2F; Remove elements</li><li>Find a sprecific value</li></ul></li></ul><br><h1 id="Size"><a href="#Size" class="headerlink" title="Size"></a>Size</h1><ul><li>Navigate through the entire listr until the next reference is null<ul><li>Count the number of nodes visited</li></ul></li><li>Could use a loop. Recursive example shown</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">size</span></span>(): <span class="type">Int</span> = &#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.next == <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="number">1</span></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.next.size() + <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="To-String"><a href="#To-String" class="headerlink" title="To String"></a>To String</h1><ul><li>Same as size, but accumulate the value as strings instead of counting the number of nodes</li><li>Recursive makes it easier to manage our commas<ul><li>“,” is only appended if it’s not the last element</li></ul></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span></span>: <span class="type">String</span> = &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.next == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.value.toString</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value.toString + <span class="string">&quot;, &quot;</span> + <span class="keyword">this</span>.next.toString</span><br><span class="line">  &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h1 id="Debugger-Demo"><a href="#Debugger-Demo" class="headerlink" title="Debugger Demo"></a>Debugger Demo</h1><p>&#x2F;&#x2F; Check the video &#x2F;&#x2F;</p><br><h1 id="Access-Element-by-Location"><a href="#Access-Element-by-Location" class="headerlink" title="Access Element by Location"></a>Access Element by Location</h1><ul><li>Simulates array access</li><li>Take an “index” and advance through the list that many times</li><li>MUCH slower than array access<ul><li>Calls next n times - O(n) runtime</li><li>ex.apply(4) is the same as this.next.next.next.next</li></ul></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(i: <span class="type">Int</span>): <span class="type">LinkedListNode</span>[<span class="type">A</span>] = &#123;</span><br><span class="line">  <span class="keyword">if</span> (i == <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">this</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.next.apply(i - <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Add-an-Element"><a href="#Add-an-Element" class="headerlink" title="Add an Element"></a>Add an Element</h1><ul><li>To add an element we first need a reference to the node before the location of the new element</li><li>Update the next reference of this node</li><li>Want to add 2 in this list after 3</li><li>Need reference to the node contianing 3</li><li>Create the new node with next equal to this node’s next</li><li>This node’s next is set to the new node</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span></span>(element: <span class="type">A</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">  <span class="keyword">this</span>.next = <span class="keyword">new</span> <span class="type">LinkedListNode</span>[<span class="type">A</span>](element, <span class="keyword">this</span>.next)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Delete-a-Node"><a href="#Delete-a-Node" class="headerlink" title="Delete a Node"></a>Delete a Node</h1><ul><li>Want to delete the node containing 2</li><li>Need a reference to the previous node</li><li>Update that node’s next to bypass the deleted node<ul><li>Don’t have to update deleted node</li><li>The list no longer refers to this node</li></ul></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deleteAfter</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">  <span class="keyword">this</span>.next = <span class="keyword">this</span>.next.next</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Find-a-Value"><a href="#Find-a-Value" class="headerlink" title="Find a Value"></a>Find a Value</h1><ul><li>Navigate through the list one node at at time<ul><li>Check if the node contains the value</li><li>If it doesn’t, move to the next node</li><li>If the end of the list is reached, the list does not contain the element</li></ul></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span></span>(toFind: <span class="type">A</span>): <span class="type">LinkedListNode</span>[<span class="type">A</span>] = &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.value == toFind) &#123;</span><br><span class="line">    <span class="keyword">this</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.next == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="literal">null</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.next.find(toFind)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Find-Recursion-v-Iteration"><a href="#Find-Recursion-v-Iteration" class="headerlink" title="Find - Recursion v. Iteration"></a>Find - Recursion v. Iteration</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findIterative</span></span>(toFind: <span class="type">A</span>): <span class="type">LinkedListNode</span>[<span class="type">A</span>] = &#123;</span><br><span class="line">  <span class="keyword">var</span> node = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">while</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node.value == toFind) &#123;</span><br><span class="line">      <span class="keyword">return</span> node</span><br><span class="line">    &#125;</span><br><span class="line">    node = node.next</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span></span>(toFind: <span class="type">A</span>): <span class="type">LinkedListNode</span>[<span class="type">A</span>] = &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.value == toFind) &#123;</span><br><span class="line">    <span class="keyword">this</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.next == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="literal">null</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.next.find(toFind)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h1 id="ForEach"><a href="#ForEach" class="headerlink" title="ForEach"></a>ForEach</h1><ul><li>Call a function on each node of the list</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foreach</span></span>(f: <span class="type">A</span> =&gt; <span class="type">Unit</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">  f(<span class="keyword">this</span>.value)</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.next != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.next.foreach(f)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Map-Useage"><a href="#Map-Useage" class="headerlink" title="Map Useage"></a>Map Useage</h1><ul><li>Recall the map method for builtin List</li><li>Used to transform every element in a list</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>)</span><br><span class="line"><span class="keyword">val</span> numbersSquared: <span class="type">List</span>[<span class="type">Int</span>] = numbers.map((n: <span class="type">Int</span>) =&gt; n * n)</span><br><span class="line">println(numbersSquared) <span class="comment">// List(1, 4, 9, 16, 25, 36, 49, 64, 81, 100)</span></span><br></pre></td></tr></table></figure><h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><ul><li>Apply a function to each element of the list<ul><li>Return a new list containing the return values of the function</li></ul></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">map</span></span>(f: <span class="type">A</span> =&gt; <span class="type">A</span>): <span class="type">LinkedLisNode</span>[<span class="type">A</span>] = &#123;</span><br><span class="line">  <span class="keyword">val</span> newValue = f(<span class="keyword">this</span>.value)</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.next == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="type">LinkedListNode</span>[<span class="type">A</span>](newValue, <span class="literal">null</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="type">LinkedListNode</span>[<span class="type">A</span>](newValue, <span class="keyword">this</span>.next.map(f))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Map-Change-Type"><a href="#Map-Change-Type" class="headerlink" title="Map - Change Type"></a>Map - Change Type</h2><ul><li>Can change the type of the returned list with a second type parameter</li><li>A could be equal to B if you don’t want to change the type</li><li>Example: You want to divide a list of Ints by 2 and have to return a list of Doubles to avoid rounding<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">map</span></span>[<span class="type">B</span>](f: <span class="type">A</span> =&gt; <span class="type">B</span>): <span class="type">LinkedListNode</span>[<span class="type">B</span>] = &#123;</span><br><span class="line">  <span class="keyword">val</span> newValue = f(<span class="keyword">this</span>.value)</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.next == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="type">LinkedListNode</span>[<span class="type">B</span>](newValue, <span class="literal">null</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="type">LinkedListNode</span>[<span class="type">B</span>](newValue, <span class="keyword">this</span>.next.map(f))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="Lecture-Question"><a href="#Lecture-Question" class="headerlink" title="Lecture Question"></a>Lecture Question</h1><p><strong>Task:</strong><br>Write reduce for our linked list!!!! (go to example repo) || <a href="https://github.com/hartloff/CSE116-Examples">link</a>     </p><ul><li>Write a method in the week8.linkedlist.LinkedListNode class (from the examples repo) named reduce that:<ul><li>Takes a function of type (A, A) &#x3D;&gt; A</li><li>Returns A</li><li>Combines all the elements of the list into a single value by applying the provided function to all elements<ul><li>You may assume the function is commutative</li></ul></li><li>If the list has size 1, return that element without calling the provided function</li></ul></li></ul><p><strong>Testing:</strong><br>In a package named “tests” create a class named “TestReduce” as a test suite that tests the functionality listed above (Do not test with an empty list&#x2F;null)</p><p><strong>Example:</strong><br>If head stores a reference to the List(4, 6, 2)        </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head.reduce((a: <span class="type">Int</span>, b: <span class="type">Int</span>) =&gt; a + b) == <span class="number">12</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> CSE116 </category>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSE116的学习笔记-Lec3-5:Immutability</title>
      <link href="/cn/LO3-5-Immutability/"/>
      <url>/cn/LO3-5-Immutability/</url>
      
        <content type="html"><![CDATA[<p>Immutability</p><h1 id="Immutable-Objects"><a href="#Immutable-Objects" class="headerlink" title="Immutable Objects"></a>Immutable Objects</h1><ul><li>Values stored in state variables cannot change</li><li>Immutable objects are stored on the heap just like any other object<ul><li>But we don’t worry about the state changing when we pass the reference to a method &#x2F; function</li></ul></li><li>What if an immutable object needs to change state?<ul><li>Create a copy of the object with the change applied</li></ul></li></ul><br><ul><li>This ImmutableCounter class takes an initial value in its constructor and has methods to increment and decrement this value</li><li>The internal Int is a value and cannot change<ul><li>It also can’t be accessed (Artificial restriction to show more recursion)</li></ul></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImmutableCounter</span>(<span class="params">counter: <span class="type">Int</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printCount</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">        println(<span class="keyword">this</span>.counter)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increase</span></span>(): <span class="type">ImmutableCounter</span> = &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="type">ImmutableCounter</span>(<span class="keyword">this</span>.counter + <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decrease</span></span>(): <span class="type">ImmutableCounter</span> = &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="type">ImmutableCounter</span>(<span class="keyword">this</span>.counter - <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">updateCounter</span></span>(n: <span class="type">Int</span>, counter: <span class="type">ImmutableCounter</span>): <span class="type">ImmutableCounter</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>)&#123;</span><br><span class="line">        counter</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        updateCounter(n + <span class="number">1</span>, counter.decrease())</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        updateCounter(n - <span class="number">1</span>, counter.increase())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> counter: <span class="type">ImmutableCounter</span> = <span class="keyword">new</span> <span class="type">ImmutableCounter</span>(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">val</span> counter2: <span class="type">ImmutableCounter</span> = updateCounter(<span class="number">20</span>, counter)</span><br><span class="line"></span><br><span class="line">    counter.printCount()</span><br><span class="line">    counter2.printCount()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><ul><li>Since the Int cannot change<ul><li>We simulate changes by creating a new object on the heap with the change applied</li></ul></li><li>Create and return a new ImmutableCounter whenever a “change” is made</li></ul><br><ul><li>Since we return a new ImmutableCounter<ul><li>We must use this return value or we will not see the change</li></ul></li></ul><br><ul><li>What if we want to increment this object 10 times?</li><li>Since we [artificially] restrict access to the Int we can only increment and decrement</li><li>We could use a loop and reassign a variable at each iteration (requires var)</li></ul><br><ul><li>What if we want to increment this object 10 times?</li><li>Use a recursive approach<ul><li>Base case if n &#x3D;&#x3D; 0</li><li>Recursively increment &#x2F; decrement and make a recursive call with n closer to 0</li></ul></li></ul><hr><h2 id="Strings-are-Immutable"><a href="#Strings-are-Immutable" class="headerlink" title="Strings are Immutable"></a><strong>Strings are Immutable</strong></h2><br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nerf</span></span>(input: <span class="type">String</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    input.trplace(<span class="string">&quot;6&quot;</span>, <span class="string">&quot;5&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">amplify</span></span>(input: <span class="type">String</span>): <span class="type">String</span> = &#123;</span><br><span class="line">    input.replace(<span class="string">&quot;116&quot;</span>, <span class="string">&quot;250&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> course: <span class="type">String</span> = <span class="string">&quot;CSE116&quot;</span></span><br><span class="line">    nerf(course)</span><br><span class="line">    <span class="keyword">val</span> dataStructures: <span class="type">String</span> = <span class="string">&quot;CSE116&quot;</span></span><br><span class="line"></span><br><span class="line">    course + <span class="string">&quot; is great&quot;</span></span><br><span class="line">    <span class="keyword">val</span> courseString = course + <span class="string">&quot; is fun&quot;</span></span><br><span class="line"></span><br><span class="line">    println(course)</span><br><span class="line">    println(dataStructures)</span><br><span class="line">    println(courseString)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>The main method creates a new String on the stack and passes a reference to it to the nerf method</li><li>We would usually expect to see changes made to this object by the method</li></ul><br><ul><li>The method “replaces” all instance of the substring “6” with “5”</li><li>The “change” is made by creating a new String</li><li>Since this method has a return type of Unit, the reference is not returned</li><li>The String is still on the heap</li></ul><br><ul><li>After the call to nerf resolves<ul><li>The stack is in the same state as it wes before the method call</li></ul></li><li>There is an extra String on the Heap<ul><li>[It can be garbage collected]</li></ul></li></ul><br><ul><li>The next method call also creates a new String on the heap</li><li>Replaces “116” with “250”</li><li>Method returns a reference to the new String that was created</li><li>The reference is stored in a variable in the main method</li></ul><br><ul><li>We create another new String in main</li><li>The reference is never stored in a variable</li><li>Never see this String in our code</li></ul><hr><h2 id="List-are-Immutable"><a href="#List-are-Immutable" class="headerlink" title="List are Immutable"></a><strong>List are Immutable</strong></h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">firstNPrimes</span></span>(n: <span class="type">Int</span>): <span class="type">List</span>[<span class="type">Int</span>] = &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">List</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">List</span>(<span class="number">2</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> nMinusOnePrimes: <span class="type">List</span>[<span class="type">Int</span>] = firstNPrimes(n - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">val</span> maxPrime: <span class="type">Int</span> = nMinusOnePrimes.max</span><br><span class="line">        findPrime(maxPrime + <span class="number">1</span>, nMinusOnePrimes) :: nMinusOnePrimes</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findPrime</span></span>(i: <span class="type">Int</span>, knownPrimes: <span class="type">List</span>[<span class="type">Int</span>]): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (!knownPrimes.foldLeft(<span class="literal">false</span>)(_ || i % _ == <span class="number">0</span>)) &#123;</span><br><span class="line">        i</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        findPrime(i + <span class="number">1</span>, knownPrimes)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    firstNPrimes(<span class="number">3</span>).foreach(println)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Recursive calls are added to the stack until we reach the base case of n &#x3D;&#x3D; 1</li><li>Create a new immutable List on the heap</li></ul><br><ul><li>The base case returns a reference to the List it created</li><li>This List is immutable so it will never change<ul><li>Even though its reference is passed around different frames</li></ul></li></ul><br><ul><li>The previous recursive call gets this returned reference</li><li>Accesses that List on the heap</li></ul><br><ul><li>The reference is passed to the next method call</li><li>This is the reference behavior we expect</li></ul><br><ul><li>Since 3 is not divisible by 2<ul><li>Return the base case of i</li></ul></li></ul><br><ul><li>Get return value of 3 and prepend it to the List of know primes</li><li>But Lists are immutable!<ul><li>Create a new List with 3 prepended</li></ul></li></ul><br><ul><li>A reference to the new List is returned</li><li>The original List remains on the heap an is unchanged</li></ul><br><ul><li><strong>Important:</strong></li><li>If another part of our program has the reference @1 stored in q variable<ul><li>Nothing we do can interfaere with its computation</li></ul></li></ul><br><ul><li>The first recursive call gets the reference @2</li><li>Continues its computation with this reference</li><li>Make a call to findPrime based on the List  @2</li><li>Base case is false since 4%2 &#x3D;&#x3D; 0</li><li>Recursive call is made to check if the next integer is prime</li><li>Hit the base case since 5 is prime</li><li>Return 5 up the recursion</li></ul><br><ul><li>With the return value of 5<ul><li>firstNPrimes can finish its computation</li></ul></li><li>Create another new List on the heap</li><li>Return the new lists containing all three primes</li></ul><br><ul><li>Main gets the List at reference @3</li><li>The other two Lists are sitll on the Heap and are unchanged<ul><li>[Not garbage collected. More details coming]</li></ul></li><li>The primes 5,3,2 are printed to the console</li></ul><h1 id="Lecture-Question"><a href="#Lecture-Question" class="headerlink" title="Lecture Question"></a>Lecture Question</h1><p><strong>Restriction:</strong><br>No state is allowed in this question. Specifically, the keyword “var” is banned. (ie. You are expected to use a recursive solution)</p><p><strong>Question:</strong><br>In a package named “functions” write a class named Point with the following features:</p><ul><li>Has a constructor that takes 2 values (Use val) of type Double named “x” and “y”</li><li>A method named “add” that takes a Point and returns a Point that is the component-wise addition of this Point and the input Point<ul><li>Ex. (1.0, 2.0) + (4.0, 1.0) &#x3D; (5.0, 3.0)</li></ul></li><li>A method named “multiplyByScalar” that takes a Double and returns a new Point that is this Point multiplied by the input<ul><li>Ex. 5.0 * (1.0, 2.0) &#x3D; (5.0, 10.0)</li></ul></li></ul><p><strong>Testing:</strong><br>In a package named “tests” create a class named “TestPoint” as a test suite that tests all the functionality listed above</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> CSE116 </category>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSE116的学习笔记-Lec3-4:Functions</title>
      <link href="/cn/LO3-4-Functions/"/>
      <url>/cn/LO3-4-Functions/</url>
      
        <content type="html"><![CDATA[<h1 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h1><p>We have functions today:)</p><h1 id="Custom-Sorting"><a href="#Custom-Sorting" class="headerlink" title="Custom Sorting"></a>Custom Sorting</h1><ul><li>We can sort any type with any comparatror</li><li>But what if we want to sort points by their distance from a reference point<ul><li>In general: what if the comparator needs more parameters than just the two elements?</li></ul></li><li>We can dynamically create a new function with the additional parameters “built-in”</li></ul><h1 id="Returning-Functions"><a href="#Returning-Functions" class="headerlink" title="Returning Functions"></a>Returning Functions</h1><ul><li>We can write a function &#x2F; method that takes all the needed parameters and returns a funcrtion that fits the signature of a comparator</li><li>The distanceComparator method returns a comparator that compares the distance to a reference point</li></ul><br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">distacne</span></span>(v1: <span class="type">PhysicsVector</span>, v2: <span class="type">PhysicsVector</span>): <span class="type">Double</span> = &#123;</span><br><span class="line">    <span class="type">Math</span>.sqrt(<span class="type">Math</span>.pow(v1.x - v2.x, <span class="number">2.0</span>) + <span class="type">Math</span>.pow(v1.y - v2.y, <span class="number">2.0</span>) + <span class="type">Math</span>.pow(v1.z - v2.z, <span class="number">2.0</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">distanceComparator</span></span>(referencePoint: <span class="type">PhysicsVector</span>): (<span class="type">PhysicsVector</span>, <span class="type">PhysicsVector</span>) =&gt; <span class="type">Boolean</span> = &#123;</span><br><span class="line">    (v1: <span class="type">PhysicsVector</span>, v2: <span class="type">PhysicsVector</span>) =&gt; &#123;</span><br><span class="line">        distance(v1, referencePoint) &lt; distance(v2, referencePoint)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Use distanceComparator to create a comparator function when needed</li><li>Can create different comparators with different reference points<ul><li>Global state would only allow one comparator at a time<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> referencePoint = <span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.0</span>)</span><br><span class="line"><span class="keyword">val</span> sortedPoints = <span class="type">NergeSort</span>.mergeSort(points, distanceComparator(referencePoint))</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="Collection-Methods"><a href="#Collection-Methods" class="headerlink" title="Collection Methods"></a>Collection Methods</h1><ul><li>We can apply first-order functions to compress our code when working with data structures</li><li>We’ll see a variety of methods that take functions as parameters to help us work with data</li></ul><h2 id="For-Each"><a href="#For-Each" class="headerlink" title="For Each"></a>For Each</h2><ul><li>Call a function on each elemnents of a List</li><li>Only use for the side-effects<ul><li>ie. Not too useful when embracing immutability</li></ul></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> words: <span class="type">List</span>[<span class="type">String</span>] = <span class="type">List</span>(<span class="string">&quot;zero&quot;</span>, <span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>)</span><br><span class="line">words.foreach(println)</span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment">Will print:</span></span><br><span class="line"><span class="comment">zero</span></span><br><span class="line"><span class="comment">one</span></span><br><span class="line"><span class="comment">two </span></span><br><span class="line"><span class="comment">three</span></span><br><span class="line"><span class="comment">***/</span></span><br></pre></td></tr></table></figure><h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><ul><li>Takes a function that returns a Boolean</li><li>Returns a new List containing only the elements for which the function returns true</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> words: <span class="type">List</span>[<span class="type">String</span>] = <span class="type">List</span>(<span class="string">&quot;zero&quot;</span>, <span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> filteredWords: <span class="type">List</span>[<span class="type">String</span>] = words.filter(_.length &gt; <span class="number">3</span>)</span><br><span class="line">filteredWords.foreach(printtln)</span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment">Will print:</span></span><br><span class="line"><span class="comment">zero</span></span><br><span class="line"><span class="comment">three</span></span><br><span class="line"><span class="comment">***/</span></span><br></pre></td></tr></table></figure><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><ul><li>Takes a function of the data type to another data type</li><li>Returns a new List containing the retun values of the function with each element as an input</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers: <span class="type">List</span>[<span class="type">Double</span>] = <span class="type">List</span>(<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>, <span class="number">4.0</span>, <span class="number">5.0</span>)</span><br><span class="line"><span class="keyword">val</span> numberSquared: <span class="type">List</span>[<span class="type">Double</span>] = numbers.map(<span class="type">Math</span>.pow(_, <span class="number">2.0</span>))</span><br><span class="line">numbersSquared.foreach(println)</span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment">Will print:</span></span><br><span class="line"><span class="comment">1.0</span></span><br><span class="line"><span class="comment">4.0</span></span><br><span class="line"><span class="comment">9.0</span></span><br><span class="line"><span class="comment">16.0</span></span><br><span class="line"><span class="comment">25.0</span></span><br><span class="line"><span class="comment">***/</span></span><br></pre></td></tr></table></figure><br><ul><li>The map method takes 2 type parameters</li><li>We can provide a function that “maps” the elements to a different type<ul><li>The types can be inferred by the types of the provided function</li></ul></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> words: <span class="type">List</span>[<span class="type">String</span>] = <span class="type">List</span>(<span class="string">&quot;zero&quot;</span>, <span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> wordLengths: <span class="type">List</span>[<span class="type">Int</span>] = words.map(_.length)</span><br><span class="line">wordLengths.foreach(println)</span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment">Will print:</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">***/</span></span><br></pre></td></tr></table></figure><h2 id="Yield"><a href="#Yield" class="headerlink" title="Yield"></a>Yield</h2><ul><li>As alternate syntax to map, we can use the yield keyword</li><li>Add the keyword yield before the body of a loop</li><li>The last expression of the loop body will be “collected” at each iteration</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers: <span class="type">List</span>[<span class="type">Double</span>] = <span class="type">List</span>(<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>, <span class="number">4.0</span>, <span class="number">5.0</span>)</span><br><span class="line"><span class="keyword">val</span> numbersSquared: <span class="type">List</span>[<span class="type">Double</span>] = <span class="keyword">for</span> (number &lt;- numbers) <span class="keyword">yield</span> &#123;</span><br><span class="line">    <span class="type">Math</span>.pow(number, <span class="number">2.0</span>)</span><br><span class="line">&#125;</span><br><span class="line">numbersSquared.foreach(println)</span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment">Will print:</span></span><br><span class="line"><span class="comment">1.0</span></span><br><span class="line"><span class="comment">4.0</span></span><br><span class="line"><span class="comment">9.0</span></span><br><span class="line"><span class="comment">16.0</span></span><br><span class="line"><span class="comment">25.0</span></span><br><span class="line"><span class="comment">***/</span></span><br></pre></td></tr></table></figure><br><ul><li>Using yield will create a data structure of the same type as the one being iterated over</li><li>It’s not always possible to match the type exactly</li><li>Scala will default to certain data structure<ul><li>Use toList tp convert the default type to a List</li></ul></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numberSquared: <span class="type">List</span>[<span class="type">Double</span>] = (<span class="keyword">for</span>(number &lt;- <span class="number">1</span> to <span class="number">5</span>) <span class="keyword">yield</span> &#123;</span><br><span class="line">    <span class="type">Math</span>.pow(number, <span class="number">2.0</span>)</span><br><span class="line">&#125;).toList</span><br><span class="line">numbersSquared.foreach(println)</span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment">Will print:</span></span><br><span class="line"><span class="comment">1.0</span></span><br><span class="line"><span class="comment">4.0</span></span><br><span class="line"><span class="comment">9.0</span></span><br><span class="line"><span class="comment">16.0</span></span><br><span class="line"><span class="comment">25.0</span></span><br><span class="line"><span class="comment">***/</span></span><br></pre></td></tr></table></figure><h2 id="Reduce"><a href="#Reduce" class="headerlink" title="Reduce"></a>Reduce</h2><ul><li>Takes a function that combines two values of the data type intyto a single value of that type</li><li>Calls this function on all elements<ul><li>Combines the data into a single value</li></ul></li><li>The first parameter of the function is the accumulator<ul><li>Stores the total value accumulated so far</li><li>Initialized as the first element (Note: This example breaks if 1.0 is not the first elementa)</li></ul></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers: <span class="type">List</span>[<span class="type">Double</span>] = <span class="type">List</span>(<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>, <span class="number">4.0</span>, <span class="number">5.0</span>)</span><br><span class="line"><span class="keyword">val</span> sumSquares: (<span class="type">Double</span>, <span class="type">Double</span>) =&gt; <span class="type">Double</span> = (a: <span class="type">Double</span>, b: <span class="type">Double</span>) =&gt; a + <span class="type">Math</span>.pow)(b, <span class="number">2.0</span>)</span><br><span class="line"><span class="keyword">val</span> sumOfSquares: <span class="type">Double</span> = numbers.reduce(sumSquares)</span><br><span class="line">println(sumOfSquares) <span class="comment">// 55.0</span></span><br></pre></td></tr></table></figure><br><ul><li>We can use the _ shorthand with two parameters<ul><li>The order of appearance of the _’s is the parameter order</li></ul></li><li>Can not use _ shorthand if you need to use a input twice</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers: <span class="type">List</span>[<span class="type">Double</span>] = <span class="type">List</span>(<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>, <span class="number">4.0</span>, <span class="number">5.0</span>)</span><br><span class="line"><span class="keyword">val</span> sumOfSquares: <span class="type">Double</span> = numbers.reduce(_ + <span class="type">Math</span>.pow(_, <span class="number">2.0</span>))</span><br><span class="line">println(sumOfSquares) <span class="comment">// 55.0</span></span><br></pre></td></tr></table></figure><h2 id="Fold"><a href="#Fold" class="headerlink" title="Fold"></a>Fold</h2><ul><li>Similar to reduce</li><li>Use fold if you need to initialize your accumulator</li><li>Use fold if you are reducing a different type than the data type</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers: <span class="type">List</span>[<span class="type">Double</span>] = <span class="type">List</span>(<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>, <span class="number">4.0</span>, <span class="number">5.0</span>)</span><br><span class="line"><span class="keyword">val</span> mult: <span class="type">Double</span> = numbers.fold(<span class="number">1.0</span>)(_ * _)</span><br><span class="line">println(mult) <span class="comment">// 1*2*3*4*5 = 120.0</span></span><br></pre></td></tr></table></figure><br><ul><li>To accumulate to a type different than the data type<ul><li>Use the left &#x2F; right version of fold</li></ul></li><li>Initial value determines the accumulator type<ul><li>This value is returned if the input is the empty list</li></ul></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> words: <span class="type">List</span>[<span class="type">String</span>] = <span class="type">List</span>(<span class="string">&quot;zero&quot;</span>, <span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> totalLength: <span class="type">Int</span> = words.foldLeft(<span class="number">0</span>)(_ + _.length)</span><br><span class="line"><span class="keyword">val</span> totalLength2: <span class="type">Int</span> = words.foldRight(<span class="number">0</span>)(_.length + _)</span><br><span class="line">println(totalLength) <span class="comment">// 15</span></span><br><span class="line">println(totalLength2) <span class="comment">// 15</span></span><br></pre></td></tr></table></figure><br><ul><li>Using fold defaults to foldLeft<ul><li>Start with the first (left&#x3D;most) element</li></ul></li><li>To accumulate from the end of the List use foldRight<ul><li>Must reverse the parameter order when using foldRight &#x2F; reduceRight<ul><li>Accumulator is second parameter, data is first element</li></ul></li></ul></li></ul><h2 id="Example-Polunomials"><a href="#Example-Polunomials" class="headerlink" title="Example - Polunomials"></a>Example - Polunomials</h2><p>———–Check the Lecture Recording—————</p><h1 id="Lecture-Question"><a href="#Lecture-Question" class="headerlink" title="Lecture Question"></a>Lecture Question</h1><p><strong>Restriction:</strong><br>No state is allowed in this question. Specifically, the keyword “var” is banned. (ie. You are expected to use a recursive solution)</p><p><strong>Question:</strong><br>In a package named “functions” add to the <strong>object</strong> named Numbers (The object with your fib method) a method named averageInRange that:</p><ul><li>Takes a List of Doubles as a parameter</li><li>Returns a functions that takes 2 Doubles and returns a Double<ul><li>This function will return the average of all the numbers in the List that are between the two input Double</li><li>Exclude the endpoints (ie. Use &lt; and &gt;, not &lt;&#x3D; and &gt;&#x3D;)</li><li>The first parameter of the function is the min value and the second is the max value of the range</li><li>Ex. Averaging the list (1.0, 4.0, 2.0, 5.0, 3.0) with endpoints 1.5 and 4.9<ul><li>Average in range is the average of (2.0, 3.0, 4.0) &#x3D;&#x3D; 3.0</li></ul></li></ul></li></ul><p><strong>Testing:</strong><br>In a package named “tests” create a class named “TestAverageInRange” as a test suite that tests all the functionality listed above. (You don’t have to test end point exclusion since Doubles are not reliably equal)</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> CSE116 </category>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSE116的学习笔记-Lec3-3:Recursion</title>
      <link href="/cn/LO3-3-Recursion/"/>
      <url>/cn/LO3-3-Recursion/</url>
      
        <content type="html"><![CDATA[<h1 id="Recursion"><a href="#Recursion" class="headerlink" title="Recursion"></a>Recursion</h1><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">computeGeometricSum</span></span>(n: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="number">0</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        n + computeGeometricSum(n<span class="number">-1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> resullt: <span class="type">Int</span> = computeGeometricSum(<span class="number">3</span>)</span><br><span class="line">    println(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Computes the geometric sum of the input<ul><li>Ex: if n &#x3D;&#x3D; 3, geometric sum is 3+2+1 &#x3D;&#x3D; 6</li></ul></li><li>Base Case:<ul><li>An input with a trivial output</li><li>Geometric sum of 0 is defined as 0</li><li>We could also add 1 -&gt; 1 as a base case</li></ul></li><li>Recursive Step:<ul><li>Any input that is not a base case will put another recursive call on the stack</li><li>Write the recursive step with the assumption that the recursive call will return the correct value</li></ul></li><li><strong>Recursive calls must get closer to the base case</strong><ul><li>All calls must eventually reach a base case or we’ll go infinite</li><li>n-1 is closer to n &lt;&#x3D; 0 than n</li><li>Regardless of the original value of n, it will eventually be decremented util the base case condition is true</li></ul></li></ul><h1 id="Anagrams-Revisited"><a href="#Anagrams-Revisited" class="headerlink" title="Anagrams Revisited"></a>Anagrams Revisited</h1><p>Check the example below :)</p><h1 id="Anagrams-Example"><a href="#Anagrams-Example" class="headerlink" title="Anagrams Example"></a>Anagrams Example</h1><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">anagrams</span></span>(input: <span class="type">String</span>): <span class="type">List</span>[<span class="type">String</span>] = &#123;</span><br><span class="line">    <span class="keyword">if</span> (input.length == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">List</span>(input)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> output: <span class="type">List</span>[<span class="type">List</span>[<span class="type">String</span>]] = (<span class="keyword">for</span> (i &lt;- <span class="number">0</span> until input.length) <span class="keyword">yield</span> &#123;</span><br><span class="line">            <span class="keyword">val</span> newString: <span class="type">String</span> = input.substring(<span class="number">0</span>, i) + input.substring(i + <span class="number">1</span>, input.length)</span><br><span class="line">            anagrams(newString).map(_ + input.charAt(i))</span><br><span class="line">        &#125;).toList</span><br><span class="line"></span><br><span class="line">        output.flatten.disinct</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Recall anagrams<ul><li>Rewrittrn to use functional programming and no vars</li><li>The syntax may not fully make sense until the next Functional Programming lecture</li></ul></li><li>Base Case<ul><li>A String of length 1 is itself its only anagram</li><li>If the length is 1, return a new list containing only that String</li></ul></li><li>Base Case Note<ul><li>We will eventually return a list containing all anagrams from the top level call</li><li>The base case is the only time we create a new List</li></ul></li><li>Recursive Step<ul><li>For each character in the input String<ul><li>Remove that character and make a recursive call with the remaining characters</li><li>Append the removed character to all returned anagrams</li></ul></li><li>We write this code with the assumption that our recursive calls will return all the anagrams of the new Strings</li><li>If our logic is sound, this assumption will be true through the power of recursion</li></ul></li><li>Always reach a base case<ul><li>We always make recursive calls on the input String with 1 character removed<ul><li>newString.length &#x3D;&#x3D; input.length - 1</li></ul></li><li>This always gets us closer to the base case</li><li>When the base case is reached and returned, our logic starts working for us</li><li>If this code does append the removed character to each returned anagram, output is generaterd starting at the base case and built up as the stack frames return</li></ul></li><li>Functional Programming notes (More detail Later)<ul><li><em>yield</em>: Creates a data structure containing the last expression that was evaluated on each iteration of a loop</li><li><em>map</em>: Creates a new data structure by applying a function to each element<ul><li>The _ is shorthand syntax we can use instead of naming the parameters of a function when the types can be inferredm and each input is only used once</li></ul></li><li>Scala data structures come with many helpful FP style</li><li><em>Flatten</em>: Creates a single List from a List of Lists containing all the elements from each List</li><li><em>Distinct</em>: Creates a new List with all duplicate values removed</li></ul></li></ul><br>- Example:  - input = "at"  - Make 2 recursive calls to the base case    - "a" and "t" are returned  - Append "t" to "a" and "a" to "t" (The removed characters)  - Return ["at", "ta"] to thr next recursive call with an input of length 2<h1 id="Anagrams-in-the-Debugger"><a href="#Anagrams-in-the-Debugger" class="headerlink" title="Anagrams in the Debugger"></a>Anagrams in the Debugger</h1><p>——-Check the Lecture Recording———-</p><h1 id="Lecturn-Question"><a href="#Lecturn-Question" class="headerlink" title="Lecturn Question"></a>Lecturn Question</h1><p><strong>Restriction:</strong><br>No state is allowed in this question. Specifically, the keyword “var” is banned. (ie. You are expected to use a recursive solution)</p><p><strong>Method:</strong><br>In a package named “functions” create an object named “Algebra” with a method named “factor” that takes an Int as a parameters and returns the prime factorization of that parameter as a List of Ints.</p><br><p>The following apply to this method:</p><ul><li>If the input is negative, 0, or 1, return an empty list</li><li>Do not include 1 in the output for any inputs</li><li>The order of the factors in the output List is undefined</li></ul><br><p>Example: functions.Algebra.factor(12) can return List(2,2,3) -or- List(2,3,2) -or- List(3,2,2)      </p><p>Hint: You can use a return statement inside a loop once a factor is found.      </p><p><strong>Unit Testing:</strong><br>Testing will not be checked by AutoLab since you’ve already written the tests for this problem. Use your tests from the last time we had this question to help your debugging process.</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> CSE116 </category>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSE116的学习笔记-Lec3-2:More_Sorting</title>
      <link href="/cn/LO3-2-More-Sorting/"/>
      <url>/cn/LO3-2-More-Sorting/</url>
      
        <content type="html"><![CDATA[<h1 id="Merge-Sort-Recursion"><a href="#Merge-Sort-Recursion" class="headerlink" title="Merge Sort &#x2F; Recursion"></a>Merge Sort &#x2F; Recursion</h1><p>Taco Tuesday!!!</p><h1 id="Runtime-Analysis"><a href="#Runtime-Analysis" class="headerlink" title="Runtime Analysis"></a>Runtime Analysis</h1><ul><li>Last time we said Selection sort is inefficient</li><li>Let’s be more specific</li><li>We’ll measure the asymptotic runtime of the algorithm<ul><li>Often use big-O notation</li></ul></li><li>Count the number of “steps” the algorithm take<ul><li>A step is typically a basic operation (+, -, &amp;&amp;, etc)</li></ul></li></ul><br><ul><li>Asymptotic runtime<ul><li>Measures the order of magnitude of the runtime in relation to the size of the input</li><li>Name the input size <strong>n</strong></li><li>For sorting - Size of the input is the number of values in the data structure</li><li>Ignore constants</li></ul></li><li>Ex. Runtime of O(n) grows linearly with the size of the input</li></ul><h1 id="Selection-Sort-Runtime"><a href="#Selection-Sort-Runtime" class="headerlink" title="Selection Sort - Runtime"></a>Selection Sort - Runtime</h1><ul><li>Abridged runtime analysis</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selectionSort</span></span>[<span class="type">T</span>](inputData: <span class="type">List</span>[t], comparator: (<span class="type">T</span>, <span class="type">T</span>) =&gt; <span class="type">Boolean</span>): <span class="type">List</span>[<span class="type">T</span>] = &#123;</span><br><span class="line">    <span class="keyword">var</span> data: <span class="type">List</span>[<span class="type">T</span>] = inputData</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- data.indices) &#123;</span><br><span class="line">        <span class="keyword">var</span> minFound = data.apply(i)</span><br><span class="line">        <span class="keyword">var</span> minIndex = i</span><br><span class="line">        <span class="keyword">for</span> (j &lt;- i util data.size) &#123;</span><br><span class="line">            <span class="keyword">val</span> currentValue = data.apply(j)</span><br><span class="line">            <span class="keyword">if</span> (comparator(currentValue, minFound)) &#123;</span><br><span class="line">                minFound = currentValue</span><br><span class="line">                minIndex = j</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        data = data.updated(minIndex, data.apply(i))</span><br><span class="line">        data = data.updated(i, minFound)</span><br><span class="line">    &#125;</span><br><span class="line">    data</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Outer loop runs once for each index</li><li>Runs O(n) times</li><li>Inner loop runs once for each index from i to the end of the list</li><li>Runs for each iteration of the outer loop with a wrost case of O(n)</li><li>Run O(n) iterations O(n) times results in an O(n^2) total runtime</li><li>We reach O(n^3) since apply takes O(n)</li><li>More deatails next week</li></ul><br><ul><li>More Mathematical analysis<ul><li>Inner loop runs Σi times where i ranges from n to 1</li><li>n + n-1 + n-2 + … + 2 + 1 &#x3D; (n^2)&#x2F;2 + n&#x2F;2</li><li>For asymptotic we only consider the highest order term and ignore constant multipliers</li><li>Therefore (n^2)&#x2F;2 + n&#x2F;2 is O(n^2)</li><li>Selection Sort has O(n^2) runtime</li></ul></li></ul><h1 id="Merge-Sort"><a href="#Merge-Sort" class="headerlink" title="Merge Sort"></a>Merge Sort</h1><ul><li>We briefly saw in CSE115 that we can do better by using merge sort and reaching O(n log(n)) runtime</li><li>Let’s analyze this in more depth</li></ul><br><ul><li>The algorithm<ul><li>If the input list has 1 element<ul><li>Return it (It’s already sorted)</li></ul></li><li>Else<ul><li>Divide the input list in two halves</li><li>Recursively call merge sort on each half (Repeats until the lists are size 1)</li><li>Merge the two sorted lists together into a single sorted list</li></ul></li></ul></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mergeSort</span></span>[<span class="type">T</span>](inputData: <span class="type">List</span>[<span class="type">T</span>], comparator: (<span class="type">T</span>, <span class="type">T</span>) =&gt; <span class="type">Boolean</span>): <span class="type">List</span>[<span class="type">T</span>] = &#123;</span><br><span class="line">    <span class="keyword">if</span> (inputData.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        inputData</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> mid: <span class="type">Int</span> = inputData.length / <span class="number">2</span></span><br><span class="line">        <span class="keyword">val</span> (left, right) = inputData.splitAt(mid)</span><br><span class="line">        <span class="keyword">val</span> leftSorted = mergeSort(left, comparator)</span><br><span class="line">        <span class="keyword">val</span> rightSorted = mergeSort(right, comparator)</span><br><span class="line"></span><br><span class="line">        merge(leftSorted, rightSorted, comparator)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Merge-Sort-Runtime"><a href="#Merge-Sort-Runtime" class="headerlink" title="Merge Sort - Runtime"></a>Merge Sort - Runtime</h1><ul><li>Each level of the recursion has 2^i list of size n&#x2F;2^i</li><li>Recursion end when is n&#x2F;2^i &#x3D;&#x3D; 1<ul><li>i &#x3D; log(n)</li><li>log(n) levels of recursion</li></ul></li><li>Each level needs to merge a total of n elements across all sub-lists</li><li>If we can merge in O(n) time we’ll have O(n log(n)) total runtime</li></ul><br><ul><li>Merge two sorted lists in O(n) time</li><li>Take advantage of each list being sorted</li><li>Start with pointers at the beginning of each list</li><li>Compare the two values at the pointers and find which come first based on the comparator<ul><li>Append it to a new list and advance that pointer</li></ul></li><li>When a pointer reaches the end of a list copy the rest of the contents</li></ul><br><h1 id="Merge-Sort-Merge"><a href="#Merge-Sort-Merge" class="headerlink" title="Merge Sort - Merge"></a>Merge Sort - Merge</h1><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span></span>[<span class="type">T</span>](left: <span class="type">List</span>[<span class="type">T</span>], right: <span class="type">List</span>[<span class="type">T</span>], comparator: (<span class="type">T</span>, <span class="type">T</span>) =&gt; <span class="type">Boolean</span>): <span class="type">List</span>[<span class="type">T</span>] = &#123;</span><br><span class="line">    <span class="keyword">var</span> leftPointer = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> rightPointer = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> sortedList: <span class="type">List</span>[<span class="type">T</span>] = <span class="type">List</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (leftPointer &lt; left.length &amp;&amp; rightPointer &lt; right.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (comparator(left.apply(leftPointer), right.apply(rightPointer))) &#123;</span><br><span class="line">            sortedList = sortedList :+ left.apply(rightPointer)</span><br><span class="line">            leftPointer += <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sortedList = sortedList :+ right.apply(rightPointer)</span><br><span class="line">            rightPointer += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (leftPointer &lt; left.length) &#123;</span><br><span class="line">        sortedList = sortedList :+ left.apply(leftPointer)</span><br><span class="line">        leftPointer += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (rightPointer &lt; right.length) &#123;</span><br><span class="line">        sortedList = sortedList :+ right.apply(rightPointer)</span><br><span class="line">        rightPointer += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sortedList</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>YOU BANNED VAR THEN USED IT IN YOUR EXAMPLE!</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">noVarMerge</span></span>[<span class="type">T</span>](left: <span class="type">List</span>[<span class="type">T</span>], right: <span class="type">List</span>[<span class="type">T</span>], comparator: (<span class="type">T</span>, <span class="type">T</span>) =&gt; <span class="type">Boolean</span>):<span class="type">List</span>[<span class="type">T</span>] = &#123;</span><br><span class="line">    noVarMergehHelper(<span class="type">List</span>(), left, right, comparator)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">noVarMergeHelper</span></span>[<span class="type">T</span>](accumulator: <span class="type">List</span>[<span class="type">T</span>], left: <span class="type">List</span>[<span class="type">T</span>], right：<span class="type">List</span>[<span class="type">T</span>], comparator:(<span class="type">T</span>, <span class="type">T</span>) =&gt; <span class="type">Boolean</span>): <span class="type">List</span>[<span class="type">T</span>] = &#123;</span><br><span class="line">    <span class="keyword">if</span>(left.isEmpty)&#123;</span><br><span class="line">        accumlator.reverse ::: right</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(right.isEmpty)&#123;</span><br><span class="line">        accumlator.reverse ::: left</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(comparator(left.head, right.head))&#123;</span><br><span class="line">        noVarMergeHelper(left.head :: accumulator, left.drop(<span class="number">1</span>), right, comparator)</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        noVarMergeHelper(right.head :: accumulator, left, right.drop(<span class="number">1</span>), comparator)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Rewrite merge without using var<ul><li>Need to add elements to a List which requires reassignment</li><li>Avoid by using recursion</li><li>Each “reassignment” is made by creating a new stack frame with the new value stored in a parameter</li></ul></li></ul><h1 id="Writing-Recursive-Methods"><a href="#Writing-Recursive-Methods" class="headerlink" title="Writing Recursive Methods"></a>Writing Recursive Methods</h1><ul><li>Suggested apporach:<ul><li>Assume your recursive calls return the correct values</li><li>Write your method basedf on this assumption</li><li>Add a base case(s) for an input that has a tirvial return</li><li>Only write recursive calls that get closer to base case</li></ul></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mergeSort</span></span>[<span class="type">T</span>](inputData: <span class="type">List</span>[<span class="type">T</span>], comparator: (<span class="type">T</span>, <span class="type">T</span>) =&gt; <span class="type">Boolean</span>): <span class="type">List</span>[<span class="type">T</span>] = &#123;</span><br><span class="line">    <span class="keyword">val</span> mid: <span class="type">Int</span> = inputData.length / <span class="number">2</span></span><br><span class="line">    <span class="keyword">val</span> (left, right) = inputData.splitAt(mid)</span><br><span class="line">    <span class="keyword">val</span> leftSorted = mergeSort(left, comparator)</span><br><span class="line">    <span class="keyword">val</span> rightSorted = mergeSort(right, comparator)</span><br><span class="line"></span><br><span class="line">    merge(leftSorted, rightSorted, comparator)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><ul><li>Assume your recursive calls return the correct values</li><li>Write you method based on this assumption</li><li>The primary benefit of writing recursive methods &#x2F; fuinctions is that we can assume that the recursive calls are correct</li><li>If these calls are not correct, we have work to do elsewhere<ul><li>While writing the top level functionality, assume they are correct and fix the other issues if they are not</li></ul></li></ul><br>  <ul><li>Add a base case(s) for an input that has a trivial return value<ul><li>A simple input where the return value is trivial</li><li>Ex. An empty list, an empty String, 0, 1</li></ul></li><li>Add a conditional to your method to check for the base case(s)<ul><li>If the input is a base case, return the trivial solution</li><li>Else, run your code that makes the recursive call(s)</li></ul></li></ul><br><ul><li>Ensure your recursive calls always get closer to a base case]<ul><li>Base case is eventually reached and returned</li><li>Ex. Base case is 0, each recursive call decrease the input</li><li>Ex. Base case is empty String and an each recursive call removes a character from the input</li></ul></li><li>If youre recursive calls don’t reach base case<ul><li>Infinite recursion</li><li>Stack overflow</li></ul></li></ul><h1 id="Lecture-Question"><a href="#Lecture-Question" class="headerlink" title="Lecture Question"></a>Lecture Question</h1><p><strong>Restriction:</strong><br>No state is allowed in this question. Specifically, the keyword “var” is banned. (ie. You are expected to use a recursive solution)</p><p><strong>Question:</strong><br>In a package named “functions” create an object named Numbers with a method named fib that:</p><ul><li>Takes an Int as a parameter and returns the nth fibonacci number</li><li>Fibonacci numbers are equal to the sum of the previous two fibonacci numbers starting with 1 and 1 as the first two numbers in the sequence</li><li>Fibonacci numbers: 1, 1, 2, 3, 5, 8…</li><li>fib(1) &#x3D;&#x3D; 1</li><li>fib(2) &#x3D;&#x3D; 1</li><li>fib(3) &#x3D;&#x3D; 2</li><li>fib(4) &#x3D;&#x3D; 3</li><li>Your method will not be tested with inputs &lt; 1</li><li>Your method will not be tested with inputs &gt; 46</li></ul><p><strong>Testing:</strong><br>In a package named “tests” create a class named “TestFib” as a test suite that tests all the functionality listed above. (Do not test with inputs &lt; 1 or &gt; 46)</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> CSE116 </category>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSE116的学习笔记-Lec3-1:Sorting_Revisited</title>
      <link href="/cn/LO3-1-Sorting-Revisited/"/>
      <url>/cn/LO3-1-Sorting-Revisited/</url>
      
        <content type="html"><![CDATA[<h1 id="Sorting-Revisited"><a href="#Sorting-Revisited" class="headerlink" title="Sorting - Revisited"></a>Sorting - Revisited</h1><p>With First-Order Functions</p><h1 id="Sorting"><a href="#Sorting" class="headerlink" title="Sorting"></a>Sorting</h1><p>Order elements in a data structure according to a comparator function</p><br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers = <span class="type">List</span>(<span class="number">5</span>, <span class="number">-23</span>, <span class="number">-8</span>, <span class="number">7</span>, <span class="number">-4</span>, <span class="number">10</span>)</span><br><span class="line"><span class="keyword">val</span> numberSorted = numbers.sorted</span><br><span class="line">println(numberSorted) <span class="comment">// List(-23, -8, -4, 5, 7, 10)</span></span><br></pre></td></tr></table></figure><ul><li>The sorted method returns a new List containing the same elements as the original, but in sorted order</li><li>Integer values have a default comparator<ul><li>Less than function</li><li>If an element is less than another element, it must be placed before the other element</li></ul></li></ul><br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers = <span class="type">List</span>(<span class="number">5</span>, <span class="number">-23</span>, <span class="number">-8</span>, <span class="number">7</span>, <span class="number">-4</span>, <span class="number">10</span>)</span><br><span class="line"><span class="keyword">val</span> numberSorted = numbers.sorted</span><br><span class="line">println(numberSorted) <span class="comment">// List(-23, -8, -4, 5, 7, 10)</span></span><br></pre></td></tr></table></figure><h1 id="Custom-Sorting-in-Scala"><a href="#Custom-Sorting-in-Scala" class="headerlink" title="Custom Sorting in Scala"></a>Custom Sorting in Scala</h1><ul><li>Sorting a list by the result of a function &#x2F; method</li><li>Calls the provided function &#x2F; method on each element and sorts by the default ordering of the returned values</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers = <span class="type">List</span>(<span class="number">5</span>, <span class="number">-23</span>, <span class="number">-8</span>, <span class="number">7</span>, <span class="number">-4</span>, <span class="number">10</span>)</span><br><span class="line"><span class="comment">// sort by the result of a method (like setting the key in Python sorting)</span></span><br><span class="line"><span class="keyword">val</span> numberSorted = numbers.sortBy(<span class="type">Math</span>.abs)</span><br><span class="line">println(numberSorted) <span class="comment">// List(-4, 5, 7, -8, 10, -23)</span></span><br></pre></td></tr></table></figure><br><ul><li>Uses first-order functions &#x2F; methods</li><li>We just passed a method as an argument of another<ul><li>Yes, you can do that!</li><li>And you will do this often over the few weeks</li></ul></li></ul><br><ul><li>Passing a function &#x2F; method allows us to use the default sorting order with a computed value</li><li>What if we don’t want sort by the default ordering?<ul><li>Ex.  Sort ints by decreasing order</li></ul></li></ul><br><ul><li>Sorting a list using a comparator function &#x2F; method</li><li>The comparator takes two values of the type being sorted<ul><li>Return true if the first parameter should come before the second in the sorted order</li><li>Return false otherwise (including ties)<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers = <span class="type">List</span>(<span class="number">5</span>, <span class="number">-23</span>, <span class="number">-8</span>, <span class="number">7</span>, <span class="number">-4</span>, <span class="number">10</span>)</span><br><span class="line"><span class="keyword">val</span> numbersSorted = numbers.sortWith((a: <span class="type">Int</span>, b: <span class="type">Int</span>) =&gt; a &gt; b)</span><br><span class="line"><span class="comment">// can be shortened to - numbers.sortWith(_ &gt; _)</span></span><br><span class="line">println(numbersSorted) <span class="comment">// List(10, 7, 5, -4, -8, -23)</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><br><ul><li>This is a first-order function</li><li>Provide the Parameter list and the body of the function</li><li>For sortWith, write a function that:<ul><li>Take 2 parameters matching the type of the List being sorted</li><li>Return a Boolean<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers = <span class="type">List</span>(<span class="number">5</span>, <span class="number">-23</span>, <span class="number">-8</span>, <span class="number">7</span>, <span class="number">-4</span>, <span class="number">10</span>)</span><br><span class="line"><span class="keyword">val</span> numbersSorted = numbers.sortWith((a: <span class="type">Int</span>, b: <span class="type">Int</span>) =&gt; a &gt; b)</span><br><span class="line"><span class="comment">// can be shortened to - numbers.sortWith(_ &gt; _)</span></span><br><span class="line">println(numbersSorted) <span class="comment">// List(10, 7, 5, -4, -8, -23)</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><br><ul><li>Alternate setup</li><li>We can create the function and store it in a variable<ul><li>Type is (Int, Int) &#x3D;&gt; Boolean</li></ul></li><li>First-order functions are just values!<ul><li>Can be sorted in variabless, passed as arguments, returned from methods<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers = <span class="type">List</span>(<span class="number">5</span>, <span class="number">-23</span>, <span class="number">-8</span>, <span class="number">7</span>, <span class="number">-4</span>, <span class="number">10</span>)</span><br><span class="line"><span class="comment">// sorted by a comparator function/method. This function sorts in decreasing order</span></span><br><span class="line"><span class="keyword">val</span> comparator: (<span class="type">Int</span>, <span class="type">Int</span>) =&gt; <span class="type">Boolean</span> = (a: <span class="type">Int</span>, b: <span class="type">Int</span>) =&gt; a &gt; b</span><br><span class="line"><span class="keyword">val</span> numbersSorted = numbers.sortWith(comparator)</span><br><span class="line"><span class="comment">// can be shortened to - numbers.sortWith(_ &gt; _)</span></span><br><span class="line">println(numversSorted) <span class="comment">// List(10, 7, 5, -4, -8, -23)</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="First-Order-Functions"><a href="#First-Order-Functions" class="headerlink" title="First-Order Functions"></a>First-Order Functions</h1><ul><li>This is the entire definition of a first-order function<ul><li>Creates an object of type function and returns its reference</li><li>Parameter list in parentheses using usual syntax</li><li>Use &#x3D;&gt; to separate the parameter list from the body of the function</li><li>Code that follows is the body of the function<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers = <span class="type">List</span>(<span class="number">5</span>, <span class="number">-23</span>, <span class="number">-8</span>, <span class="number">7</span>, <span class="number">-4</span>, <span class="number">10</span>)</span><br><span class="line"><span class="comment">// sorted by a comparator function/method. This function sorts in decreasing order</span></span><br><span class="line"><span class="keyword">val</span> comparator: (<span class="type">Int</span>, <span class="type">Int</span>) =&gt; <span class="type">Boolean</span> = (a: <span class="type">Int</span>, b: <span class="type">Int</span>) =&gt; a &gt; b</span><br><span class="line"><span class="keyword">val</span> numbersSorted = numbers.sortWith(comparator)</span><br><span class="line"><span class="comment">// can be shortened to - numbers.sortWith(_ &gt; _)</span></span><br><span class="line">println(numversSorted) <span class="comment">// List(10, 7, 5, -4, -8, -23)</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><br><ul><li>Can use the usual code block syntax with {}<ul><li>Use this syntax if you want more than 1 line of code in your function<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sorted by a comparator function/method. This function sorts in decreasing order</span></span><br><span class="line"><span class="keyword">val</span> comparator: (<span class="type">Int</span>, <span class="type">Int</span>) =&gt; <span class="type">Boolean</span> = (a: <span class="type">Int</span>, b: <span class="type">Int</span>) =&gt; &#123;</span><br><span class="line">    a &gt; b</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> numbersSorted = numbers.sortWith(comparator)</span><br><span class="line"><span class="comment">// can be shortened to - numbers.sortWith(_ &gt; _)</span></span><br><span class="line">println(numversSorted) <span class="comment">// List(10, 7, 5, -4, -8, -23)</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><br><ul><li>This is the type of the function<ul><li>Types of the parameters in parentheses</li><li>Use &#x3D;&gt; to separate the parameter types from the return type</li><li>Then the return type<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers = <span class="type">List</span>(<span class="number">5</span>, <span class="number">-23</span>, <span class="number">-8</span>, <span class="number">7</span>, <span class="number">-4</span>, <span class="number">10</span>)</span><br><span class="line"><span class="comment">// sorted by a comparator function/method. This function sorts in decreasing order</span></span><br><span class="line"><span class="keyword">val</span> comparator: (<span class="type">Int</span>, <span class="type">Int</span>) =&gt; <span class="type">Boolean</span> = (a: <span class="type">Int</span>, b: <span class="type">Int</span>) =&gt; a &gt; b</span><br><span class="line"><span class="keyword">val</span> numbersSorted = numbers.sortWith(comparator)</span><br><span class="line"><span class="comment">// can be shortened to - numbers.sortWith(_ &gt; _)</span></span><br><span class="line">println(numversSorted) <span class="comment">// List(10, 7, 5, -4, -8, -23)</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><br><ul><li>A function is a value with a type<ul><li>A function is an object stored on the heap</li></ul></li><li>Can be used just like any other type</li></ul><br><ul><li>First-order functions in calculator<ul><li>All operations take 2 Doubles and return a Double</li><li>Can store operations in a variable</li><li>Can reduce the number of states and complexity of your Calculator<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> operation: (<span class="type">Double</span>, <span class="type">Double</span>) =&gt; <span class="type">Double</span> = (x: <span class="type">Double</span>, y: <span class="type">Double</span>) =&gt; x * y</span><br></pre></td></tr></table></figure></li></ul></li></ul><br><ul><li>Sorting a list using a comparator <strong>method</strong></li><li>Can sort custom types with custom methods<ul><li>Pass methods by name just like passing a variable storing a function</li></ul></li><li>There’s no stopping the ways you can sort!<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compareAnimals</span></span>(a1: <span class="type">Animal</span>, a2: <span class="type">Animal</span>): <span class="type">Boolean</span> = &#123;</span><br><span class="line">    al.name.toLowerCase() &lt; a2.name.toLowerCase()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> animals: <span class="type">List</span>[<span class="type">Animal</span>] = <span class="type">List</span>(<span class="keyword">new</span> <span class="type">Cat</span>(<span class="string">&quot;morris&quot;</span>), <span class="keyword">new</span> <span class="type">Dog</span>(<span class="string">&quot;Finn), new Dog(&quot;</span><span class="type">Snoopy</span><span class="string">&quot;), new Cat(&quot;</span><span class="type">Garfield</span><span class="string">&quot;))</span></span><br><span class="line"><span class="string">val animalsSorted = animals.sortWith(compareAnimals)</span></span><br><span class="line"><span class="string">println(animalsSorted) // List(Finn, Garfield, morris, Snoopy)</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="Selection-Sort"><a href="#Selection-Sort" class="headerlink" title="Selection Sort"></a>Selection Sort</h1><ul><li>Iterate over the indices of a list<ul><li>For each index, select the element that belongs there in the final sorted order</li><li>Swap the current value with the correct one</li></ul></li></ul><p><img src="/cn/LO3-1-Sorting-Revisited/sort-1.png" alt="Sort"></p><br><ul><li>Start with the first index</li><li>Find the element that belongs there by taking the min of all values</li><li>Swap the values</li><li>Don’t have to recheck elements that are alreadt at the correct index</li></ul><p><img src="/cn/LO3-1-Sorting-Revisited/sort-2.png" alt="Sort"></p><br><p><img src="/cn/LO3-1-Sorting-Revisited/sort-3.png" alt="Sort"></p><br><ul><li>The algorithm only needs to know how to compare 2 values<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">intSelectionSort</span></span>(inputData: <span class="type">List</span>[<span class="type">Int</span>], comparator: (<span class="type">Int</span>, <span class="type">Int</span>) =&gt; <span class="type">Boolean</span>): <span class="type">List</span>[<span class="type">Int</span>] = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// copy only the reference of the input</span></span><br><span class="line">    <span class="keyword">var</span> data: <span class="type">List</span>[<span class="type">Int</span>] = inputData</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i &lt;- data.indices) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// find the min value/index from i to the end of the list</span></span><br><span class="line">        <span class="keyword">var</span> minFound = data.apply(i)</span><br><span class="line">        <span class="keyword">var</span> minIndex = i</span><br><span class="line">        <span class="keyword">for</span> (j &lt;- i until data.size) &#123;</span><br><span class="line">            <span class="keyword">val</span> currentValue = data.apply(j)</span><br><span class="line"></span><br><span class="line">            <span class="comment">// make decisions based on the given comparatpr (this function can be thought of as a less than operator)</span></span><br><span class="line">            <span class="keyword">if</span> (comparator(currentValue, minFound)) &#123;</span><br><span class="line">                minFound = currentValue</span><br><span class="line">                minIndex = j</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// swap the value at i with the min value</span></span><br><span class="line">        data = data.updated(minIndex, data.apply(i))</span><br><span class="line">        data = data.updated(i, minFound)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return the new list</span></span><br><span class="line">    data</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><br><p><strong>But how do we compare 2 values?</strong>              </p><ol><li>Take a comparator as a parameter just like sortWith</li><li>Call the comparator whenever we need to compare 2 values</li></ol><h1 id="Type-Parameters"><a href="#Type-Parameters" class="headerlink" title="Type Parameters"></a>Type Parameters</h1><ul><li>But what if we want to sort custom types?</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> animals: <span class="type">List</span>[<span class="type">Animal</span>] = <span class="type">List</span>(<span class="keyword">new</span> <span class="type">Cat</span>(<span class="string">&quot;morris&quot;</span>), <span class="keyword">new</span> <span class="type">Dog</span>(<span class="string">&quot;Finn), new Dog(&quot;</span><span class="type">Snoopy</span><span class="string">&quot;), new Cat(&quot;</span><span class="type">Garfield</span><span class="string">&quot;))</span></span><br><span class="line"><span class="string">val animalsSorted = animals.sortWith(compareAnimals)</span></span><br><span class="line"><span class="string">println(animalsSorted) // List(Finn, Garfield, morris, Snoopy)</span></span><br></pre></td></tr></table></figure><ul><li>Our selection sort only works with Ints</li><li>We can write another method to sort Animals<ul><li>And another for every type we want to sort? .. no</li></ul></li><li>We’ll take the <strong>type</strong> as a <strong>parameter</strong> of our method<ul><li>A “<strong>type parameter</strong>“</li></ul></li></ul><br><ul><li>Type parameters come before the parameter list</li><li>Use [] instead of ()</li><li>Can use this generic type throughout this method<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selectionSort</span></span>[<span class="type">Type</span>](inputData: <span class="type">List</span>[<span class="type">Type</span>], comparator: (<span class="type">Type</span>, <span class="type">Type</span>) =&gt; <span class="type">Boolean</span>): <span class="type">List</span>[<span class="type">Type</span>] = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> data: <span class="type">List</span>[<span class="type">Type</span>] = inputData</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- data.indices) &#123;</span><br><span class="line">        <span class="keyword">var</span> minFound = data.apply(i)</span><br><span class="line">        <span class="keyword">var</span> minIndex = i</span><br><span class="line">        <span class="keyword">for</span> (j &lt;- i until data.size) &#123;</span><br><span class="line">            <span class="keyword">val</span> currentValue = data.apply(j)</span><br><span class="line">            <span class="keyword">if</span> (comparator(currentValue, minFound)) &#123;</span><br><span class="line">                minFound = currentValue</span><br><span class="line">                minIndex = j</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        data = data.updated(minIndex, data.apply(i))</span><br><span class="line">        data = data.updated(i, minFound)</span><br><span class="line">    &#125;</span><br><span class="line">    data</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><br><ul><li>We can choose the type name</li><li>Generic type names are often shortened to 1 character<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selectionSort</span></span>[<span class="type">T</span>](inputData: <span class="type">List</span>[<span class="type">T</span>], comparator: (<span class="type">T</span>, <span class="type">T</span>) =&gt; <span class="type">Boolean</span>): <span class="type">List</span>[<span class="type">T</span>] = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> data: <span class="type">List</span>[<span class="type">T</span>] = inputData</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- data.indices) &#123;</span><br><span class="line">        <span class="keyword">var</span> minFound = data.apply(i)</span><br><span class="line">        <span class="keyword">var</span> minIndex = i</span><br><span class="line">        <span class="keyword">for</span> (j &lt;- i until data.size) &#123;</span><br><span class="line">            <span class="keyword">val</span> currentValue = data.apply(j)</span><br><span class="line">            <span class="keyword">if</span> (comparator(currentValue, minFound)) &#123;</span><br><span class="line">                minFound = currentValue</span><br><span class="line">                minIndex = j</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        data = data.updated(minIndex, data.apply(i))</span><br><span class="line">        data = data.updated(i, minFound)</span><br><span class="line">    &#125;</span><br><span class="line">    data</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><br><ul><li>The type parameter can be inferred as long as the data and comparator types match<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> animals: <span class="type">List</span>[<span class="type">Animal</span>] = <span class="type">List</span>(<span class="keyword">new</span> <span class="type">Cat</span>(<span class="string">&quot;morris&quot;</span>), <span class="keyword">new</span> <span class="type">Dog</span>(<span class="string">&quot;Finn), new Dog(&quot;</span><span class="type">Snoopy</span><span class="string">&quot;), new Cat(&quot;</span><span class="type">Garfield</span><span class="string">&quot;))</span></span><br><span class="line"><span class="string">val animalsSorted = animals.sortWith(compareAnimals)</span></span><br><span class="line"><span class="string">println(animalsSorted) // List(Finn, Garfield, morris, Snoopy)</span></span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selectionSort</span></span>[<span class="type">T</span>](inputData: <span class="type">List</span>[<span class="type">T</span>], comparator: (<span class="type">T</span>, <span class="type">T</span>) =&gt; <span class="type">Boolean</span>): <span class="type">List</span>[<span class="type">T</span>] = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> data: <span class="type">List</span>[<span class="type">T</span>] = inputData</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- data.indices) &#123;</span><br><span class="line">        <span class="keyword">var</span> minFound = data.apply(i)</span><br><span class="line">        <span class="keyword">var</span> minIndex = i</span><br><span class="line">        <span class="keyword">for</span> (j &lt;- i until data.size) &#123;</span><br><span class="line">            <span class="keyword">val</span> currentValue = data.apply(j)</span><br><span class="line">            <span class="keyword">if</span> (comparator(currentValue, minFound)) &#123;</span><br><span class="line">                minFound = currentValue</span><br><span class="line">                minIndex = j</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        data = data.updated(minIndex, data.apply(i))</span><br><span class="line">        data = data.updated(i, minFound)</span><br><span class="line">    &#125;</span><br><span class="line">    data</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="Selection-Sort-1"><a href="#Selection-Sort-1" class="headerlink" title="Selection Sort"></a>Selection Sort</h1><ul><li>This all works..</li><li><strong>But it’s really slow!</strong></li><li>The algorithm is inefficient – O(n^2)</li><li>My implementation is even slower – O(n^3)<ul><li>Very inefficient use of Lists</li></ul></li></ul><br><ul><li>More efficiency coming soon</li></ul><h1 id="Lecture-Question"><a href="#Lecture-Question" class="headerlink" title="Lecture Question"></a>Lecture Question</h1><p><strong>Question:</strong><br>In a package named “functions” create an object named Generics with a method named <code>mapFilter</code> that:</p><ul><li>Takes a type parameter T </li><li>As parameters takes<ul><li>A Map of Ints to T’s</li><li>A function that takes an Int and returns a Boolean</li></ul></li><li>Returns a List of T’s<ul><li>The returned List will contain only the values in the input map that are mapped to by keys for which the input function returns true</li><li>eg. We can think of the input function as a filter that decides which Map values will be added to the return list. If the filter returns true on a key, they value the key maps to will be in the returned list</li><li>The order of the output List is not defined in this problem (You should be sorting lists in your testing)</li></ul></li></ul><p><strong>Testing:</strong><br>In a package named “tests” create a class named “TestFilterMap” as a test suite that tests all the functionality listed above</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> CSE116 </category>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSE116的学习笔记-Lec2-6:State_Pattern</title>
      <link href="/cn/LO2-6-State-Pattern/"/>
      <url>/cn/LO2-6-State-Pattern/</url>
      
        <content type="html"><![CDATA[<h1 id="State-Pattern-Demo"><a href="#State-Pattern-Demo" class="headerlink" title="State Pattern - Demo!"></a>State Pattern - Demo!</h1><p>Go check the video, no content on this page!!!</p><h1 id="State-Pattern-Closing-Thoughts"><a href="#State-Pattern-Closing-Thoughts" class="headerlink" title="State Pattern - Closing Thoughts"></a>State Pattern - Closing Thoughts</h1><p>State pattern trade-offs</p><ul><li><strong>Pros</strong><ul><li>Oranizes code when a single class can have very different behavior in different circumstances</li><li>Each implemented method is only concerned with the reaction to 1 event (API call) in 1 state</li><li>Easy to change or add new behavior after the state pattern is setup</li></ul></li><li><strong>Cons</strong><ul><li>Can add complexity if there are only a few states or if behavior does not change significantly across states</li><li>Spreading the behavior for 1 class across many classes can look complex and require clicking through many files to understand all the behavior</li></ul></li></ul><br><ul><li>Do not use the state pattern everywhere<ul><li>Decide if a class is complex enough to benefit from this pattern before applying it</li></ul></li><li>The state pattern in this class<ul><li>I have to force you to use it by removing control flow (Not realistic)</li><li>Used to reinforce your understanding of <strong>inheritance</strong> and <strong>polymorphism</strong></li><li>Used as an example of a design pattern that can help organize your code</li></ul></li><li>When you’re not forced to use this pattern<ul><li>Weight the pros and cons to decide when it is the best approach</li></ul></li></ul><h1 id="Live-Coding"><a href="#Live-Coding" class="headerlink" title="Live Coding!"></a>Live Coding!</h1><p>-.-</p><h1 id="Lecture-Question"><a href="#Lecture-Question" class="headerlink" title="Lecture Question"></a>Lecture Question</h1><p><strong>Question:</strong>        </p><ul><li>Simulate a Car without using control flow (ie. Use the state pattern)</li><li>In a package named oop.car, create a Class named Car with no constructor parameters</li><li>The Car must contain the following methods as its API:<ul><li>shiftToDrive(): Unit</li><li>shiftToPark(): Unit</li><li>shiftToReverse(): Unit</li><li>accelerate(): Unit</li><li>brake(): Unit</li><li>velocity(): Int</li></ul></li></ul><br><p><strong>Tests</strong>             </p><ul><li>In the tests package, write a test suite named TestCar that will test all the functionality on the spec sheet<ul><li>Note: Only call the API methods while testing. Other classes&#x2F;methods&#x2F; variables you create will not exist in the grader submissions</li></ul></li></ul><hr><p><strong>Car Spec Sheet</strong>           </p><ul><li>Car is initially in Park</li><li>Initial velocity is 0</li><li>When the Car is in Park:<ul><li>Accelerating and braking have no effect</li><li>The car can shift into drive or reverse</li></ul></li><li>When the car is in Drive:<ul><li>Calling accelerate will increase the velocity of the car by 10</li><li>Calling brake will completely stop the car (velocity of 0)</li><li>The car cannot shift into Reverse</li><li>The car cannot shift into Park while moving</li></ul></li><li>When the car is in Reverse:<ul><li>Calling accelerate will <strong>decrease</strong> the velocity of the car by 5 (negative velocity)</li><li>Calling brake will completely stop the car (velocity of 0)</li><li>The car cannot shift into Drive</li><li>The car cannot shift into Park while moving</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> CSE116 </category>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSE116的学习笔记-Lec2-5:State_Pattern</title>
      <link href="/cn/LO2-5-State-Pattern/"/>
      <url>/cn/LO2-5-State-Pattern/</url>
      
        <content type="html"><![CDATA[<h1 id="State-Pattern-More-Example"><a href="#State-Pattern-More-Example" class="headerlink" title="State Pattern - More Example"></a>State Pattern - More Example</h1><p>Check the example Jumper below:)</p><h1 id="Jumper"><a href="#Jumper" class="headerlink" title="Jumper"></a>Jumper</h1><ul><li><p>2 Player vertical scrolling platform</p></li><li><p>Screen scrolls up as the players climb the platforms</p></li><li><p>The bottom of the screen is game over</p><br></li><li><p><strong>Goal:</strong> Climb faster than the other player</p><br></li></ul><p>We’ve seen how physics was added to the game        </p><ul><li>Platforms &#x2F; Wall extend StaticObject</li><li>Players extend DynamicObject</li><li>FUlly compatible with the Physics Engine HW<br></li></ul><h1 id="Jumper-Physics"><a href="#Jumper-Physics" class="headerlink" title="Jumper - Physics"></a>Jumper - Physics</h1><p>Walls and Platforms extend StaticObject</p><ul><li>Add behavior after collision with player</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JumperObject</span>(<span class="params">location: <span class="type">PhysicsVector</span>, dimensions: <span class="type">PhysicsVector</span></span>) <span class="keyword">extends</span> <span class="title">StaticObject</span>(<span class="params">location, dimensions</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">val</span> objectID: <span class="type">Int</span> = <span class="type">JumperObject</span>.nextID</span><br><span class="line">    <span class="type">JumperObject</span>.nextID += <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Platform</span>(<span class="params">location: <span class="type">PhysicsVector</span>, dimensions: <span class="type">PhysicsVector</span></span>) <span class="keyword">extends</span> <span class="title">JumperObject</span> (<span class="params">location, dimensions</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">collideWithDynamicObject</span></span>(otherObject: <span class="type">DynamicObject</span>, face: <span class="type">Integer</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (face == <span class="type">Face</span>.top) &#123;</span><br><span class="line">            otherObject.velocity.z = <span class="number">0.0</span></span><br><span class="line">            otherObject.location.z = <span class="keyword">this</span>.location.z + <span class="keyword">this</span>.dimensions.z</span><br><span class="line">            otherObject.onGround()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wall</span>(<span class="params">location: <span class="type">PhysicsVector</span>, dimensions: <span class="type">PhysicsVector</span></span>) <span class="keyword">extends</span> <span class="title">JumperObject</span>(<span class="params">location, dimensions</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">collideWithDynamicObject</span></span>(otherObject: <span class="type">DynamicObject</span>, face: <span class="type">Integer</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">if</span>(face == <span class="type">Face</span>.negativeX)&#123;</span><br><span class="line">            otherObject.velocity.x = <span class="number">0.0</span></span><br><span class="line">            otherObject.location.x = <span class="keyword">this</span>.location.x - otherObject.dimensions.x</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (face == <span class="type">Face</span>.positiveX)&#123;</span><br><span class="line">            otherObject.velocity.x = <span class="number">0.0</span></span><br><span class="line">            otherObject.location.x = <span class="keyword">this</span>.location.x + <span class="keyword">this</span>.dimensions.x</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p>Players extend DynamicObject</p><ul><li>Physics engine applies since all objects in our game are StaticObjects or DynamicObject</li><li>The Player class will set its own velocity based on user inputs<ul><li>Velocities are updated by gravity and collisions</li><li>User inputs are effectively the “inended” velocity</li></ul></li><li>How does the Player set its velocity?</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span>(<span class="params">playerLocation: <span class="type">PhysicsVector</span>, playerDimensions: <span class="type">PhysicsVector</span></span>) <span class="keyword">extends</span> <span class="title">DynamicObject</span>(<span class="params">playerLocation, playerDimensions</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Jumper-Player"><a href="#Jumper-Player" class="headerlink" title="Jumper - Player"></a>Jumper - Player</h1><p>How does the Player set its velocity?       </p><ul><li>User inputs</li><li>States! &lt;– Good stuff</li></ul><br><p>Only 3 inputs to control each player         </p><ul><li>Left button</li><li>Right button</li><li>Jump button</li></ul><br><p>Player 1:         </p><ul><li>a,d,w &#x2F;&#x2F;wasd 方向键<br>Player 2:          </li><li>Left, right, up arrows</li></ul><h1 id="Jumper-Player-Behavior"><a href="#Jumper-Player-Behavior" class="headerlink" title="Jumper Player Behavior"></a>Jumper Player Behavior</h1><p>Each player should:       </p><ul><li>Walk left and right when keys are pressed</li><li>Jump when jump is pressed</li><li>Jump higher if walking instead of standing still</li><li>Jump at different heights based on how long the jump button is held after a jump</li><li>Move left and right slower while in the air if the direction is changed</li><li>Jump through platforms while jumping up</li><li>Land on platforms while falling down</li><li>Fall if walked off a ledge</li><li>Block all inputs if the bottom of the screen is reached</li></ul><br><p>We could write all this behavior without the state patten      </p><ul><li>Code will likely be hard to follow</li><li>Diffcult to add new features</li></ul><br><p>How to implement these features?</p><ul><li>Write your API<ul><li>What methods will change behavior depending on the current state of the object</li><li>These methos define your API ans are declared in the state abstract class</li></ul></li><li>Decide what states should exist<ul><li>Any situation where the behavior is different should be a new state</li></ul></li><li>Determine the transitions between states</li></ul><br><p>Each player should      </p><ul><li>Walk left and right <strong>when keys are pressed</strong></li><li>Jump <strong>when jump is pressed</strong></li><li>Jump higher if walking instead of standing still</li><li>Jump at different heights based on <strong>how long the jump button is held</strong> after a jump</li><li>Move left and right slower while in the air <strong>if the direction is changed</strong></li><li>Jump throught platforms while jumping up</li><li><strong>Land on platforms</strong> while fallin down</li><li>Fall if <strong>walked off a ledge</strong></li><li>Block <strong>all inputs</strong> if the bottom of the screen is reached</li></ul><p>API:        </p><ul><li>left &#x2F; right &#x2F; jump pressed or realeased or released<ul><li>6 methods</li></ul></li><li>Land on a platform</li></ul><p>How to implement these features?         </p><ul><li>Decide what stats should exits</li></ul><br><p><strong>States:</strong>            </p><ul><li>Standing</li><li>Walking</li><li>Jumping &#x2F; Rising</li><li>Falling</li><li>Dead (Bellow Screen)</li></ul><br><p><strong>State Transitions:</strong>          </p><ul><li>Standing -&gt; Walking<ul><li>left &#x2F; right pressed</li></ul></li><li>Walking -&gt; Standing<ul><li>left &#x2F; right pressed</li></ul></li><li>Walking &#x2F; Standing -&gt; Jumping<ul><li>Jump pressed</li></ul></li><li>Falling -&gt; Standing<ul><li>Land on a platform</li></ul></li><li>Walking -&gt; Falling<ul><li>Walk off a platform</li></ul></li><li>Jumping -&gt; Falling<ul><li>Apex of jump reached</li></ul></li><li>Any -&gt; GameOver<ul><li>Reach the bottom of the screen</li></ul></li></ul><br><p>Let’s visualize the states and transitions in a state diagram         </p><p><img src="/cn/LO2-5-State-Pattern/JumperPlayerBehavior-1.png" alt="Jumper Player Behavior"></p><p>For each state implement the API methods with the desired havior in that state      </p><ul><li>Add default behavior in the state subclass</li></ul><br><p>Use inheritance to limit duplicate code      </p><ul><li>Factor out common behavior between states into new class</li></ul><p><img src="/cn/LO2-5-State-Pattern/JumperPlayerBehavior-2.png" alt="Jumper Player Behavior"></p><h1 id="Adding-Functionality"><a href="#Adding-Functionality" class="headerlink" title="Adding Functionality"></a>Adding Functionality</h1><p><strong>Task: Add a double jumper to Jumper</strong>     </p><ul><li>How can we add a double jump?<ul><li>Players can jump 1 additional time while in the air</li></ul></li></ul><br><ul><li>With poor design<ul><li>This could be extremely difficult!</li><li>May required modifying a significant amount of existing code</li></ul></li></ul><br><ul><li>With our state patetrn<ul><li>No Problem at all</li></ul></li></ul><br><ul><li>Add functionality to existing states<ul><li>Rising and Falling states now react to the jump button by jumping again (Set velocity.z to the jump velocity)</li></ul></li><li>We’ll add new states<ul><li>RisingAfterDoubleJump &#x2F; FallingAfterDoubleJump</li><li>Extend Rising &#x2F; Falling resprectively</li><li>Override the jump button press to do nothing</li></ul></li><li>Update state transitions<ul><li>Pree jump from Rising &#x2F; Falling transitions to the resprective AfterDoubleJump state</li><li>Reaching the apex in RisingAfterDoubleJump transitions to FallingAfterDoubleJump (Not Falling)</li></ul></li></ul><br><ul><li>This task could have been completed with a boolean flag instead of using new states</li><li>If this approach is used for many features the code will be harder to maintian</li><li><strong>More to the point:</strong> What if your professor says you can’t use control flow, but you have a situation where a button should only work once?<ul><li>Try adding more states</li></ul></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> usedDoubleJump = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">jumpPressed</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.usedDoubleJump) &#123;</span><br><span class="line">        player.velocity.z = player.standingJumpVelocity</span><br><span class="line">        <span class="keyword">this</span>.usedDoubleJump = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/cn/LO2-5-State-Pattern/JumperPlayerBehavior-3.png" alt="Jumper Player Behavior">         </p><p><img src="/cn/LO2-5-State-Pattern/JumperPlayerBehavior-4.png" alt="Jumper Player Behavior"></p><h1 id="Lecture-Question"><a href="#Lecture-Question" class="headerlink" title="Lecture Question"></a>Lecture Question</h1><p><strong>Question</strong>:            </p><ul><li>Simulate a TV without using control flow (ie. Use the state pattern)</li><li>In a package named oop.tv, create a Class named TV with no constructor parameters</li><li>The TV class must contain the following methods as its API:<ul><li>volumeUp(): Unit </li><li>volumeDown(): Unit </li><li>mute(): Unit power(): Unit </li><li>currentVolume(): Int</li></ul></li><li>In the tests package, write a test suite named TestTV that will test all the functionality on the spec sheet<ul><li>Note: Only call the API methods while testing. Other methods&#x2F; variables you create will not exist in the grader submissions</li></ul></li></ul><br><p><strong>TV Spec Sheet</strong>         </p><ul><li>TV is initially off when created</li><li>Initial volume is 5</li><li>When the TV is off:<ul><li>Volume up&#x2F;down and mute buttons do nothing</li><li>Current volume is 0</li></ul></li><li>The power button turns the TV on&#x2F;off</li><li>Volume up button increases volume by 1 up to a maximum volume of 10</li><li>Volume down button decreases volume by 1 down to minimum volume of 0</li><li>Pressing the mute button mutes the TV </li><li>When the TV is muted:<ul><li>Current volume is 0</li><li>Pressing the mute, volume up, or volume down buttons will unmute the TV and restore the volume to the pre- mute volume (Do not in&#x2F;decrease the volume)</li></ul></li><li>When turning the TV back on, the volume should return to its value when the TV was last on<ul><li>When the TV is first turned on the volume will be 5</li></ul></li><li>If the TV was turned off while muted, when it is turned back on it should not be muted</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> CSE116 </category>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSE116的学习笔记-Lec2-4:State Pattern</title>
      <link href="/cn/State-Pattern/"/>
      <url>/cn/State-Pattern/</url>
      
        <content type="html"><![CDATA[<p><strong>State Pattern</strong>             </p><h1 id="Design-Patterns"><a href="#Design-Patterns" class="headerlink" title="Design Patterns"></a>Design Patterns</h1><ul><li><p>Approaches to common programming design problems</p></li><li><p>There are many design patterns</p><ul><li>We’ll only focus on the state pattern in this course</li><li>For more patterns, search “The Gang of Four”</li></ul></li><li><p>The Primary goal of design patterns is to simplify the Design and Maintainability of our programs</p></li><li><p>Applies Polymorphism</p></li><li><p>Every object contains state and behavior</p></li><li><p>We use state variables to change the state of an object and its behavior can depend on this state</p></li><li><p><strong>What if we want to significantly change the behavior of an object?</strong></p><ul><li>Use if statements?<ul><li>if(condition){someBehavior()}</li><li>else{completelyDifferentBehavior}</li></ul></li><li>This will work, but what about maintainability?</li></ul></li><li><p>What if we want mant different behaviors?</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(condition)&#123;</span><br><span class="line">    someBehavior()</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(otherCondition1)&#123;</span><br><span class="line">    otherBehavior1()</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(otherCondition2)&#123;</span><br><span class="line">    otherBehavior2()</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(otherCondition3)&#123;</span><br><span class="line">    otherBehavior3()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    completelyDifferentBehavior()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>This would all be in a single method</p><ul><li>Hard to read</li><li>Hard to maintain</li><li>Need to re-test existing functionality each time a condition is added</li></ul></li><li><p>Let’s try using the <strong>state pattern</strong> as an alternative</p></li><li><p>Instead of storing each behavior in the same class, we defer functionality to a state <strong>object</strong></p></li><li><p>Have a state variable containing the current state as an <strong>object</strong></p></li><li><p>Change the state as needed</p></li><li><p>Decisions made on type(Polymorphism) not value (Conditions)</p></li><li><p>Modularizes code</p><ul><li>More, but smallerm pieces of functionality</li></ul></li><li><p>Easy to add new features without breaking tested features</p></li><li><p>State is represented by an <strong>abstract class</strong> (or trait, interface)</p><ul><li>Defines the methods that can be called (API)</li></ul></li><li><p>Extend the state class for each concrete state</p><ul><li>One class for each possible state</li></ul></li><li><p>Each state will have a reference to the object to which it is attached</p><ul><li>Use this reference to access other state variables</li><li>Use this reference to change state</li></ul></li></ul><h1 id="State-Pattern-Example"><a href="#State-Pattern-Example" class="headerlink" title="State Pattern - Example"></a>State Pattern - Example</h1><ul><li><p>OK, but what does all that actually mean?</p></li><li><p>Let’s use the cool-headed Bruce Banner as an example</p><ul><li>Bruce is a world-class scientist</li><li>Bruce can successfully drive a car</li><li>Bruce is not very helpful in a fight<br><img src="/cn/State-Pattern/image/drbanner.png" alt="Dr Banner"></li></ul></li><li><p>However, Make Bruce angry and he’ll become The Incredible Hulk!</p><ul><li>Smashes cars</li><li>Great in a fight</li><li>Out of control!<br><img src="/cn/State-Pattern/image/hulk.png" alt="Hulk"></li></ul></li><li><p>One man</p></li><li><p>Two significantly different behaviors depending on his current state</p></li><li><p>To simulate Bruce in a program, we will create one BruceBanner class containing the behavior in both states</p></li><li><p>Bruce Banner can use cars and fight very differently depending on his state</p></li><li><p>Defer to a State object to determine how he behaves</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BruceBanner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> state: <span class="type">State</span> = <span class="keyword">new</span> <span class="type">DrBanner</span>(<span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">makeAngry</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">this</span>.state.makeAngry()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calmDown</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">this</span>.state.calmDown()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">useCar</span></span>(car: <span class="type">Car</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">this</span>.state.useCar(car)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fight</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">this</span>.state.fight()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Ceate State as an abstract class to define all the methods each state must contain(API)</p></li><li><p>Extend State for each possible concrete state</p></li><li><p>Implement the method for each state</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">State</span>(<span class="params">banner: <span class="type">BruceBanner</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">makeAngry</span></span>()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calmDown</span></span>()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">yseCar</span></span>(car: <span class="type">Car</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fight</span></span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BruceBanner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> state: <span class="type">State</span> = <span class="keyword">new</span> <span class="type">DrBanner</span>(<span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">makeAngry</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">this</span>.state.makeAngry()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calmDown</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">this</span>.state.calmDown()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">useCar</span></span>(car: <span class="type">Car</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">this</span>.state.useCar(car)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fight</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">this</span>.state.fight()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrBanner</span>(<span class="params">banner: <span class="type">BruceBanner</span></span>) <span class="keyword">extends</span> <span class="title">State</span>(<span class="params">banner</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">makeAngry</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">        banner.state = <span class="keyword">new</span> <span class="type">TheHulk</span>(banner)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">calmDown</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">        println(<span class="string">&quot;already calm&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">useCar</span></span>(car: <span class="type">Car</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        car.drive(<span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">fight</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">        println(<span class="string">&quot;this won&#x27;t end well&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TheHulk</span>(<span class="params">banner: <span class="type">BruceBnner</span></span>) <span class="keyword">extends</span> <span class="title">State</span>(<span class="params">banner</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">makeAngry</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">        println(<span class="string">&quot;already angry&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">calmDown</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">        banner.state = <span class="keyword">new</span> <span class="type">DrBanner</span>(banner)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">useCar</span></span>(car: <span class="type">Car</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        car.smash()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">fight</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">        println(<span class="string">&quot;Hulk Smash!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/cn/State-Pattern/image/StatePatternEx1.png" alt="StatePattern"><br><img src="/cn/State-Pattern/image/StatePatternEx2.png" alt="StatePattern"></p></li><li><p>With two states we could have easily used a single conditional and a boolean flag to store the state</p><ul><li>Arguably simpler than using the state pattern</li></ul></li><li><p>The true power of this pattern comes when we have more states</p></li><li><p>Meet Professor Hulk</p></li><li><p>Bruce Banner transformed as the Hulk with full control</p><ul><li>Can drive a car <strong>and</strong> is great in a fight</li></ul></li><li><p>To add the new state</p><ul><li>Create a new class and implement the State methods</li><li>Add a state transition to enter the new state</li></ul></li><li><p><strong>Did not modify any existing functionality!</strong></p></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BruceBanner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> state: <span class="type">State</span> = <span class="keyword">new</span> <span class="type">DrBanner</span>(<span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">makeAngry</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">this</span>.state.makeAngry()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calmDown</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">this</span>.state.calmDown()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">useCar</span></span>(car: <span class="type">Car</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">this</span>.state.useCar(car)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fight</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">this</span>.state.fight()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfessorHulk</span>(<span class="params">banner: <span class="type">BruceBanner</span></span>) <span class="keyword">extends</span> <span class="title">State</span>(<span class="params">banner</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">makeAngry</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">        println(<span class="string">&quot;I&#x27;m always angry&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">calmDown</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">        println(<span class="string">&quot;OK&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">useCar</span></span>(car: <span class="type">Car</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        car.drive(<span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">fight</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">        println(<span class="string">&quot;Smash carefully&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/cn/State-Pattern/image/StatePatternEx3.png" alt="StatePattern"></p><ul><li><strong>State Diagrams</strong><ul><li>Visualize <strong>states</strong> and <strong>state transitions</strong></li><li>Very helpful while designing with the state pattern</li></ul></li><li>The state diagram for Bruch Banner is as follows</li></ul><p><img src="/cn/State-Pattern/image/SPDiagrams.png" alt="Diagrams"></p><h1 id="State-Pattern-Design"><a href="#State-Pattern-Design" class="headerlink" title="State Pattern - Design"></a>State Pattern - Design</h1><ul><li>Write your API<ul><li>What methods will change behavior depending on the current state of the obeject</li><li>Theses methods define your API and are declared in the State class</li></ul></li><li>Decide what states should exist<ul><li>Any situation where the behavior is different should be a new state</li></ul></li><li>Determine the transitions between states</li></ul><h1 id="Lecture-Question"><a href="#Lecture-Question" class="headerlink" title="Lecture Question"></a>Lecture Question</h1><p><strong>No Control Flow</strong> allowed for this lecture question! - Same rules as the Calculator&#x2F;Microwave HW<br>We will simulate some character behavior in a platforming game where the player can run, duck, and stand still  </p><ul><li>In a package named <strong>oop.platformer</strong> write a class named <strong>Player</strong> with the following functionality</li></ul><p><strong>Methods:</strong></p><ul><li>duck(): Unit<ul><li>Enters the ducking state. Cannot transition from running to ducking</li></ul></li><li>standStill(): Unit<ul><li>Enters the standing state</li></ul></li><li>run(): Unit<ul><li>Enters the running state. Cannot transition from ducking to running</li></ul></li><li>jumpHeight(): Int<ul><li>Returns 4 if ducking, 3 if standing, and 6 if running</li></ul></li><li>movementSpeed(): Int<ul><li>Returns 1 if ducking, 5 if standing, and 12 if running</li></ul></li></ul><p>The initial state of the Player is standing. The Player constructor takes no parameters</p><p><strong>Test</strong>         </p><ul><li>In the tests package, write a test suite named <strong>TestPlayer</strong> that will test all this functionality.<ul><li>Note: Only call the API methods while testing. Other methods&#x2F;variables you create will not exist in the grader submissions</li></ul></li></ul><p><strong>You cannot have any control flow in the code you submit, including your tests. If you have all your lecture questions in a single project, make sure you only submit your code for this LQ</strong>           </p><p>To complete this lecture question you are strongly encouraged to use the state pattern. It is possible to use different approaches, though using the state pattern will give you more practice for the HW              </p><p><img src="/cn/State-Pattern/image/lq24.png" alt="Lecture Question"></p><p><strong>Note:</strong> You may have to start a new project for this question. Any control flow in your zip file will cause an error even if it’s in an unrelated package</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> CSE116 </category>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSE116的学习笔记-Lec2-3:JSON</title>
      <link href="/cn/JSON/"/>
      <url>/cn/JSON/</url>
      
        <content type="html"><![CDATA[<p>JSON<br>An Application of Polymorphism</p><h1 id="JSON-Reminder"><a href="#JSON-Reminder" class="headerlink" title="JSON - Reminder"></a>JSON - Reminder</h1><ul><li><p>JSON is [mostly] used to communicate betweent programming languages</p></li><li><p>Consist of 6 types</p><ul><li>String</li><li>Number</li><li>Boolean</li><li>Array</li><li>Object</li><li>Null</li></ul></li><li><p>In Python</p><ul><li>json.dumps to convert from Python types to JSON string</li><li>json.loads to convert from JSON string to Python types</li></ul></li><li><p>In JavaScript</p><ul><li>JSON.stringify to convert from JavaScript types to JSON string</li><li>JSON.parse to convert from JSON string to JavaScript types</li></ul></li></ul><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><ul><li>What about Scala?<br>{“timestamp”:1550774961,”message”:”success”,”iss_position”:{“latitude”:”-36.5017”,”longitude”:”-2.8015}}          </li><li>This is valid JSON</li><li>What Scala type do we use to store this data?<ul><li>Map[String, String]?</li><li>Map[String, Long]?</li><li>Map[String, Map[String, String]]?</li><li>Map[String, Any]?? &lt;- This is the only one that can work, but it’s very restrictive since we can only use the Any methods.</li></ul></li><li>We can’t mix types in our Scala data structures</li><li>.. at least, not without polymorphism</li></ul><h1 id="JSON-Library"><a href="#JSON-Library" class="headerlink" title="JSON - Library"></a>JSON - Library</h1><ul><li>We’ll install a library to help us work with JSON in Scala<ul><li>The Play JSON library</li></ul></li><li>Library defines these Scala types<ul><li>JsString</li><li>JsNumber</li><li>JsBoolean</li><li>JsArray</li><li>JsObject</li><li>JsNull</li></ul></li><li><strong>All these types extend JsValue</strong></li><li><strong>Map[String, JsValue]</strong></li><li>The library parses JSON strings and converts all values into one of the Js_types</li><li>Convert value to their Scala types as needed</li></ul><h1 id="Reading-JSON"><a href="#Reading-JSON" class="headerlink" title="Reading JSON"></a>Reading JSON</h1><p>{“timestamp”:1550774961,”message”:”success”,”iss_position”:{“latitude”:”-36.5017”,”longitude”:”-2.8015}}           </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> play.api.libs.&#123;<span class="type">JsValue</span>, <span class="type">Json</span>&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">val</span> parsed: <span class="type">JsValue</span> = <span class="type">Json</span>.parse(response)</span><br><span class="line"></span><br><span class="line"><span class="comment">// unused values, but this is how we would extract message and timestamp</span></span><br><span class="line"><span class="keyword">val</span> message: <span class="type">String</span> = &#123;parsed \ <span class="string">&quot;message&quot;</span>&#125;.as[<span class="type">String</span>]</span><br><span class="line"><span class="keyword">val</span> timestamp: <span class="type">Long</span> = &#123;parsed \ <span class="string">&quot;timestamp&quot;</span>&#125;.as[<span class="type">Long</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> issLocation: <span class="type">Map</span>[<span class="type">String</span>, <span class="type">String</span>] = (parsed \ <span class="string">&quot;iss_position&quot;</span>).as[<span class="type">Map</span>[<span class="type">String</span>, <span class="type">String</span>]]</span><br></pre></td></tr></table></figure><ol><li>Use the library to extract specific values</li><li>Call Json.parse</li><li>Parse the JSON string and converts it to a JsValue</li><li>Extract values at specific keys</li><li>Use \ to get the value at a key as a JsValue</li><li>Use as[type] to convert the value to the type you expect, cannot use your custom types without defining how to parse your type</li></ol><h1 id="Writing-JSON"><a href="#Writing-JSON" class="headerlink" title="Writing JSON"></a>Writing JSON</h1><p>{“timestamp”:1550774961,”message”:”success”,”iss_position”:{“latitude”:”-36.5017”,”longitude”:”-2.8015}}           </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createJSON</span></span>(message: <span class="type">String</span>, timestamp: <span class="type">Long</span>, location: <span class="type">Location</span>): <span class="type">String</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> jsonTimestamp: <span class="type">JsValue</span> = <span class="type">Json</span>.toJson(timestamp)</span><br><span class="line">    <span class="keyword">val</span> jsonMessage: <span class="type">JsValue</span> = <span class="type">Json</span>.toJson(message)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> locationMap: <span class="type">Map</span>[<span class="type">String</span>, <span class="type">String</span>] = <span class="type">Map</span>(</span><br><span class="line">        <span class="string">&quot;latitude&quot;</span> -&gt; location.latitude.toString,</span><br><span class="line">        <span class="string">&quot;longitude&quot;</span> -&gt; location.longitude.toString</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> jsonMap: <span class="type">Map</span>[<span class="type">String</span>, <span class="type">JsValue</span>] = <span class="type">Map</span>(</span><br><span class="line">        <span class="string">&quot;timestamp&quot;</span> -&gt; jsonTimestamp,</span><br><span class="line">        <span class="string">&quot;message&quot;</span> -&gt; jsonMessage,</span><br><span class="line">        <span class="string">&quot;iss_position&quot;</span> -&gt; jsonLocation</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="type">Json</span>.stringify(<span class="type">Json</span>.toJson(jsonMap))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Convert Scala types to JsValue with Json.toJson<ul><li>Cannot use your custom types without defying how to convert your type</li></ul></li><li>Call Json.stringify to convert a type to a JSON string<ul><li>Can be any types known to the library(Most of the common Scala types)</li></ul></li></ul><h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><ul><li>We’re using a new library</li><li>Must download it before use</li><li>Add it to our Maven file<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">gruopId</span>&gt;</span>com.mycompany.app<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>test1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1<span class="tag">&lt;/<span class="name">versiom</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.scalatest/scalatest --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.scalatest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scalatest_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>This is our current Maven file that we used to download scalatest</li><li>We can add more dependancies to this file<ul><li>Open the Maven sidebal, refresh, then download the new libraries</li></ul></li><li>Find new libraries at <a href="https://mvnrepository.com/">https://mvnrepository.com</a><ul><li>An enrmous wealth of shared libraries</li><li>Search for the new liraries, paste the dependency into you pom.xml file</li></ul></li></ul><h1 id="Lecture-Question"><a href="#Lecture-Question" class="headerlink" title="Lecture Question"></a>Lecture Question</h1><p><strong>Question:</strong> In a package named “oop.json” create and complete the “Store” class which is stared below           </p><p>asJSON returns a JSON string representing an object with keys “cashInRegister” and “inventory” mapping to the values from the two state variables with the same names       </p><p>fromJSON takes a JSON string in the same format returned from asJSON and sets the state variables to the values from the JSON string        </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> opp.json</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span>(<span class="params">var cashInRegister: <span class="type">Double</span>, var inventory: <span class="type">List</span>[<span class="type">String</span>]</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">asJSON</span></span>(): <span class="type">String</span> = &#123;</span><br><span class="line">        <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fromJSON</span></span>(jsonString: <span class="type">String</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Testing:</strong>             </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tests</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.scalatest.<span class="type">FunSuite</span></span><br><span class="line"><span class="keyword">import</span> oop.json.<span class="type">Store</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestSubmission</span> <span class="keyword">extends</span> <span class="title">FunSuite</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> <span class="type">EPSILON</span>: <span class="type">Double</span> = <span class="number">0.000001</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">equalDoubles</span></span>(d1: <span class="type">Double</span>, d2: <span class="type">Double</span>): <span class="type">Boolean</span> = &#123;</span><br><span class="line">        (d1 - d2).abs &lt; <span class="type">EPSILON</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    test(<span class="string">&quot;test the store JSON&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">val</span> store: <span class="type">Store</span> = <span class="keyword">new</span> <span class="type">Store</span>(<span class="number">550.21</span>, <span class="type">List</span>(<span class="string">&quot;eggs&quot;</span>, <span class="string">&quot;milk&quot;</span>, <span class="string">&quot;waffles&quot;</span>))</span><br><span class="line">        <span class="keyword">val</span> storeJSON: <span class="type">String</span> = store.asJSON()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> store2: <span class="type">Store</span> = <span class="keyword">new</span> <span class="type">Store</span>(<span class="number">0.0</span>, <span class="type">List</span>())</span><br><span class="line">        store2.fromJSON(storeJSON)</span><br><span class="line"></span><br><span class="line">        assert(equalDoubles(store2.cashInRegister, <span class="number">550.21</span>))</span><br><span class="line">        <span class="keyword">val</span> actualList: <span class="type">List</span>[<span class="type">String</span>] = store2.inventory.sorted</span><br><span class="line">        <span class="keyword">val</span> expectedList: <span class="type">List</span>[<span class="type">String</span>] = <span class="type">List</span>(<span class="string">&quot;eggs&quot;</span>, <span class="string">&quot;milk&quot;</span>, <span class="string">&quot;waffles&quot;</span>).sorted</span><br><span class="line"></span><br><span class="line">        assert(actualList == expectedList)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> CSE116 </category>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSE116的学习笔记 Lec2-2:Polymorphism</title>
      <link href="/cn/Polymorphism/"/>
      <url>/cn/Polymorphism/</url>
      
        <content type="html"><![CDATA[<p>Polymorphism</p><h1 id="Scala-Type-Hierarchy-1"><a href="#Scala-Type-Hierarchy-1" class="headerlink" title="Scala Type Hierarchy-1"></a>Scala Type Hierarchy-1</h1><p><img src="/cn/Polymorphism/image/lq2-1-12.png" alt="lq2-1-12"></p><ul><li>All objects share Any as their base typoes</li><li>Classes extending AnyVal will be stored on the <strong>stack</strong><ul><li>*Unless they are a state variable of an object</li></ul></li><li>Classes extending AnyRef will be stored on the <strong>heap</strong></li></ul><h1 id="Recall"><a href="#Recall" class="headerlink" title="Recall"></a>Recall</h1><p><img src="/cn/Polymorphism/image/Recall.png" alt="Recall"></p><h1 id="Scala-Type-Hierarchy-2"><a href="#Scala-Type-Hierarchy-2" class="headerlink" title="Scala Type Hierarchy-2"></a>Scala Type Hierarchy-2</h1><p><img src="/cn/Polymorphism/image/lq2-1-13.png" alt="lq2-1-13"></p><ul><li>Classes you define extend AnyRef by default</li><li>HealthPotion has 6 different types<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> potion1: <span class="type">HealthPotion</span> = <span class="keyword">new</span> <span class="type">HealthPotion</span>(<span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="number">6</span>) </span><br><span class="line"><span class="keyword">val</span> potion2: <span class="type">InanimateObject</span> = <span class="keyword">new</span> <span class="type">HealthPotion</span>(<span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="number">6</span>) </span><br><span class="line"><span class="keyword">val</span> potion3: <span class="type">DynamicObject</span> = <span class="keyword">new</span> <span class="type">HealthPotion</span>(<span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="number">6</span>) </span><br><span class="line"><span class="keyword">val</span> potion4: <span class="type">GameObject</span> = <span class="keyword">new</span> <span class="type">HealthPotion</span>(<span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="number">6</span>)</span><br><span class="line"><span class="keyword">val</span> potion5: <span class="type">AnyRef</span> = <span class="keyword">new</span> <span class="type">HealthPotion</span>(<span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="number">6</span>)</span><br><span class="line"><span class="keyword">val</span> potion6: <span class="type">Any</span> = <span class="keyword">new</span> <span class="type">HealthPotion</span>(<span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="number">6</span>)</span><br></pre></td></tr></table></figure></li></ul><h1 id="Polymorphism"><a href="#Polymorphism" class="headerlink" title="Polymorphism"></a>Polymorphism</h1><ul><li><p>HealthPotion has 6 different types</p></li><li><p>Polymorphism</p><ul><li>Poly -&gt; Many</li><li>Morph -&gt; Forms</li><li>Polymorphism -&gt; Many Forms</li></ul></li><li><p>Can store values in variables of any of their types</p></li><li><p>Can only access state and behavior defined in variable type</p></li><li><p>Defined magnitudeOfMomentum in lnanimateObject</p></li><li><p>HealthPotion inherited magnitudeOfMomentum when it extended InanimateObject</p></li><li><p>DynamicObject has no such method</p><ul><li>Even when potio3 stores a reference to a HealthPotion object it cannot access magnitudeOfMomentum</li></ul></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> potion1: <span class="type">HealthPotion</span> = <span class="keyword">new</span> <span class="type">HealthPotion</span>(<span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="number">6</span>) </span><br><span class="line"><span class="keyword">val</span> potion2: <span class="type">InanimateObject</span> = <span class="keyword">new</span> <span class="type">HealthPotion</span>(<span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="number">6</span>) </span><br><span class="line"><span class="keyword">val</span> potion3: <span class="type">DynamicObject</span> = <span class="keyword">new</span> <span class="type">HealthPotion</span>(<span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="number">6</span>) </span><br><span class="line"><span class="keyword">val</span> potion4: <span class="type">GameObject</span> = <span class="keyword">new</span> <span class="type">HealthPotion</span>(<span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="number">6</span>)</span><br><span class="line"><span class="keyword">val</span> potion5: <span class="type">AnyRef</span> = <span class="keyword">new</span> <span class="type">HealthPotion</span>(<span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="number">6</span>)</span><br><span class="line"><span class="keyword">val</span> potion6: <span class="type">Any</span> = <span class="keyword">new</span> <span class="type">HealthPotion</span>(<span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">potion1.magnitudeOfMomentum() </span><br><span class="line">potion2.magnitudeOfMomentum() </span><br><span class="line">potion3.magnitudeOfMomentum() <span class="comment">// Does not compile</span></span><br></pre></td></tr></table></figure><ul><li>Why use polymorphism if it restricts functionality?<ul><li>Simplify other classes</li></ul></li><li>Player has 2 methods<ul><li>One to use a ball</li><li>One to use a potion</li></ul></li><li>Each item the Player can use will need another method in the Player class</li><li>Tedious to expand game</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span>(<span class="params">var location: <span class="type">PhysicsVector</span>, var dimensions: <span class="type">PhysicsVector</span>, var velocity: <span class="type">PhysicsVector</span>, var orientation: <span class="type">PhysicsVector</span>, val maxHealth: <span class="type">Int</span>, val strength: <span class="type">Int</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> health: <span class="type">Int</span> = maxHealth</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">useBall</span></span>(ball: <span class="type">Ball</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        ball.use(<span class="keyword">this</span>) </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">useHealthPotion</span></span>(potion: <span class="type">HealthPotion</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        potion.use(<span class="keyword">this</span>) </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Write functionality using the common base type</li><li>The use method is part of IanimateObject</li><li>Can’t access any Ball or HealthPotion specific functionlity<ul><li>Any state &#x2F; behavior needed by Player must be in the InanimateObject class</li></ul></li></ul><p>Old version:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span>(<span class="params">var location: <span class="type">PhysicVector</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">             var dimensions: <span class="type">PhysicVector</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">             var velocity: <span class="type">PhysicVector</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">             val maxHealth: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">             val strength: <span class="type">Int</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> health: <span class="type">Int</span> = maxHealth</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">useBall</span></span>(ball: <span class="type">Ball</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        ball.use(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">useHealthPotion</span></span>(potion: <span class="type">HealthPotion</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        potion.use(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Change to this:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">InanimateObject</span>(<span class="params">location: <span class="type">PhysicsVector</span>, velocity: <span class="type">PhysicVector</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">objectMass</span></span>(): <span class="type">Double</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">use</span></span>(player: <span class="type">Player</span>): <span class="type">Unit</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span>(<span class="params">var location: <span class="type">PhysicVector</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">             var dimensions: <span class="type">PhysicVector</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">             var velocity: <span class="type">PhysicVector</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">             val maxHealth: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">             val strength: <span class="type">Int</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> health: <span class="type">Int</span> = maxHealth</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">useItem</span></span>(item: <span class="type">InanimateObject</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        item.use(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>We can call useItem with any object that extends InanimateObject as an argument</li><li>The useItem method will have different effrcts depending on the type of its parameter<ul><li>Different implementations of use will be called</li></ul></li><li>Adding new object types to our game does not require changing the Player class!<ul><li>Test Player once</li><li>Without polymorphism we’d have to update and test the Player class for every new object type added to the game.</li></ul></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">InanimateObject</span>(<span class="params">location: <span class="type">PhysicsVector</span>, velocity: <span class="type">PhysicVector</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">objectMass</span></span>(): <span class="type">Double</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">use</span></span>(player: <span class="type">Player</span>): <span class="type">Unit</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span>(<span class="params">var location: <span class="type">PhysicVector</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">             var dimensions: <span class="type">PhysicVector</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">             var velocity: <span class="type">PhysicVector</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">             val maxHealth: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">             val strength: <span class="type">Int</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> health: <span class="type">Int</span> = maxHealth</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">useItem</span></span>(item: <span class="type">InanimateObject</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        item.use(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> ball: <span class="type">Ball</span> = <span class="keyword">new</span> <span class="type">Ball</span>(<span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="number">5</span>)</span><br><span class="line"><span class="keyword">val</span> potion: <span class="type">HealthPotion</span> = <span class="keyword">new</span> <span class="type">HealthPotion</span>(<span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> player1: <span class="type">Player</span> = <span class="keyword">new</span> <span class="type">Player</span>(<span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="number">20</span>, <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">player1.useItem(ball)</span><br><span class="line">player1.useItem(potion)</span><br></pre></td></tr></table></figure><ul><li>We can also make our player be a DynamicObject</li></ul><p>Original:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span>(<span class="params">var location: <span class="type">PhysicVector</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">             var dimensions: <span class="type">PhysicVector</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">             var velocity: <span class="type">PhysicVector</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">             val maxHealth: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">             val strength: <span class="type">Int</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> health: <span class="type">Int</span> = maxHealth</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">useItem</span></span>(item: <span class="type">InanimateObject</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        item.use(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Extends the DynamicObject:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span>(<span class="params">var location: <span class="type">PhysicVector</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">             var dimensions: <span class="type">PhysicVector</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">             var velocity: <span class="type">PhysicVector</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">             val maxHealth: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">             val strength: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">DynamicObject</span>(<span class="params">_location, _dimensions</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.velocity = _velocity</span><br><span class="line">    <span class="keyword">var</span> health: <span class="type">Int</span> = maxHealth</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">useItem</span></span>(item: <span class="type">InanimateObject</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        item.use(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>With polymorphism, we can mix types in data structures<ul><li>Something we took for granted in Python &#x2F; JavaScript</li></ul></li><li>PhysicsEngine.updateWorld does not care about the types in world.object<ul><li>As long as they all have DynamicObject as a superclass</li></ul></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> player: <span class="type">Player</span> = <span class="keyword">new</span> <span class="type">Player</span>(<span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">2.0</span>), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>), <span class="number">10</span>, <span class="number">255</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> potion1: <span class="type">HealthPotion</span> = <span class="keyword">new</span> <span class="type">HealthPotion</span>(<span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">-8.27</span>, <span class="number">-3.583</span>, <span class="number">5.3459</span>), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">-9.0</span>, <span class="number">7.17</span>, <span class="number">-9.441</span>), <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> potion2: <span class="type">HealthPotion</span> = <span class="keyword">new</span> <span class="type">HealthPotion</span>(<span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">-8.046</span>, <span class="number">-2.128</span>, <span class="number">5.5179</span>), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">6.24</span>, <span class="number">-3.18</span>, <span class="number">-4.021</span>), <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> ball1: <span class="type">Ball</span> = <span class="keyword">new</span> <span class="type">Ball</span>(<span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">-2.28</span>, <span class="number">4.88</span>, <span class="number">5.1689</span>), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">-0.24</span>, <span class="number">8.59</span>, <span class="number">-6.711</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> ball2: <span class="type">Ball</span> = <span class="keyword">new</span> <span class="type">Ball</span>(<span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">10.325</span>, <span class="number">-2.14</span>, <span class="number">0.0</span>), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">1.2</span>, <span class="number">1.2</span>, <span class="number">1.2</span>), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">3.65</span>, <span class="number">-9.0</span>, <span class="number">-7.051</span>), <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> ball3: <span class="type">Ball</span> = <span class="keyword">new</span> <span class="type">Ball</span>(<span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">-6.988</span>, <span class="number">1.83</span>, <span class="number">2.5419</span>), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">1.5</span>, <span class="number">1.5</span>, <span class="number">1.5</span>), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">-3.08</span>, <span class="number">5.4</span>, <span class="number">7.019</span>), <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// -------</span></span><br><span class="line"><span class="keyword">val</span> gameObjects: <span class="type">List</span>[<span class="type">DynamicObject</span>] = <span class="type">List</span>(player, potion1, potion2, ball1, ball2, ball3)</span><br><span class="line"><span class="comment">// -------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> world: <span class="type">World</span> = <span class="keyword">new</span> <span class="type">World</span>(<span class="number">15</span>) </span><br><span class="line">world.dynamicObjects = gameObjects</span><br><span class="line"></span><br><span class="line"><span class="type">PhysicsEngine</span>.updateWorld(world, <span class="number">0.0167</span>)</span><br></pre></td></tr></table></figure><h1 id="Override"><a href="#Override" class="headerlink" title="Override"></a>Override</h1><ul><li>Functionality is inherited from Any and AnyRef</li><li>println calls an inherited .toString method<ul><li>Converts object to a String with <object_type>@<reference></li></ul></li><li>&#x3D;&#x3D; calls the inherited .equals method<ul><li>returns true only if the two variables refer to the same object in memory</li></ul></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> potion1: <span class="type">HealthPotion</span> = <span class="keyword">new</span> <span class="type">HealthPotion</span>(<span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>), <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> potion2: <span class="type">HealthPotion</span> = <span class="keyword">new</span> <span class="type">HealthPotion</span>(<span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>), <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> potion3 = potion1</span><br><span class="line"></span><br><span class="line">println(potion1) <span class="comment">// week4.oop_physics.with_oop.HealthPotion@17c68925</span></span><br><span class="line">println(potion2) <span class="comment">// week4.oop_physics.with_oop.HealthPotion@7e0ea639</span></span><br><span class="line">println(potion3) <span class="comment">// week4.oop_physics.with_oop.HealthPotion@17c68925</span></span><br><span class="line">println(potion1 == potion2) <span class="comment">// false</span></span><br><span class="line">println(potion1 == potion3) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>We can override this default functionality</li><li>Override toString to return a different string</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HealthPotion</span>(<span class="params">location: <span class="type">PhysicsVector</span>, dimensions: <span class="type">PhysicsVector</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">                   velocity: <span class="type">PhysicsVector</span>, val volume: <span class="type">Int</span></span>) </span></span><br><span class="line">    <span class="keyword">extends</span> <span class="type">InanimateObject</span>(location, dimensions, velocity) &#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span></span>: <span class="type">String</span> = &#123;</span><br><span class="line">        <span class="string">&quot;location: &quot;</span> + <span class="keyword">this</span>.location + <span class="string">&quot;; velocity: &quot;</span> + <span class="keyword">this</span>.velocity + <span class="string">&quot;; volume: &quot;</span> + volume </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhysicsVector</span>(<span class="params">var x: <span class="type">Double</span>, var y: <span class="type">Double</span>, var z: <span class="type">Double</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span></span>: <span class="type">String</span> = &#123;</span><br><span class="line">        <span class="string">&quot;(&quot;</span> + x + <span class="string">&quot;, &quot;</span> + y + <span class="string">&quot;, &quot;</span> + z + <span class="string">&quot;)&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Override equals to change the definition of equality</li><li>Takes Any as a parameter</li><li>Use match and case to behave differently on different types</li><li>The _ wildcard covers all types not explicitly mentioned (“_” 跟 else 一个性质, 或者说switch里的default)</li><li>This method return true when compared to another potion with the same volume, false otherwise</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HealthPotion</span>(<span class="params">location: <span class="type">PhysicsVector</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">                   dimensions: <span class="type">PhysicsVector</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">                   velocity: <span class="type">PhysicsVector</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">                   val volume: <span class="type">Int</span></span>)</span></span><br><span class="line">    <span class="keyword">extends</span> <span class="type">InanimateObject</span>(loaction, dimensions, velocity) &#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">equals</span></span>(obj: <span class="type">Any</span>): <span class="type">Boolean</span> = &#123;</span><br><span class="line">        obj <span class="keyword">match</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> hp: <span class="type">HealthPotion</span> =&gt; <span class="keyword">this</span>.volume == hp.volume</span><br><span class="line">            case_ =&gt; <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>With our overridden methods this code ggives very different output<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> potion1: <span class="type">HealthPotion</span> = <span class="keyword">new</span> <span class="type">HealthPotion</span>(<span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>), <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> potion2: <span class="type">HealthPotion</span> = <span class="keyword">new</span> <span class="type">HealthPotion</span>(<span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>), <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> potion3 = potion1</span><br><span class="line"></span><br><span class="line">println(potion1) <span class="comment">// week4.oop_physics.with_oop.HealthPotion@17c68925</span></span><br><span class="line">println(potion2) <span class="comment">// week4.oop_physics.with_oop.HealthPotion@7e0ea639</span></span><br><span class="line">println(potion3) <span class="comment">// week4.oop_physics.with_oop.HealthPotion@17c68925</span></span><br><span class="line">println(potion1 == potion2) <span class="comment">// true (上文写的 override def equals)</span></span><br><span class="line">println(potion1 == potion3) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="Override-in-Jumper"><a href="#Override-in-Jumper" class="headerlink" title="Override in Jumper"></a>Override in Jumper</h1><p>To create a platform in the jumper game</p><ul><li>Extend JumperObject which extends StaticObject<ul><li>Platforms are now StaticObject and are compatible with your PhysicsEngine</li></ul></li><li>Override collideWithDynamicObject to define how an object reacts to a collision with a Platforn<ul><li>If the colliding face is the top, the object lands on the Platform</li></ul></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JumperObject</span>(<span class="params">location: <span class="type">PhysicsVector</span>, dimensions: <span class="type">PhysicsVector</span></span>) <span class="keyword">extends</span> <span class="title">StaticObject</span>(<span class="params">location, dimensions</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">val</span> objectID: <span class="type">Int</span> = <span class="type">JumperObject</span>.nextID</span><br><span class="line">    <span class="type">JumperObject</span>.nextID += <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Platform</span>(<span class="params">location: <span class="type">PhysicsVector</span>, dimensions: <span class="type">PhysicsVector</span></span>) <span class="title">extend</span> <span class="title">JumperObject</span>(<span class="params">location, dimensions</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">conllideWithDynamicObject</span></span>(otherObject: <span class="type">DynamicObject</span>, face: <span class="type">Integer</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (face == <span class="type">Face</span>.top) &#123;</span><br><span class="line">            otherObject.velocity.z == <span class="number">0.0</span></span><br><span class="line">            otherObject.location.z == <span class="keyword">this</span>.location.z + <span class="keyword">this</span>.dimensions.z</span><br><span class="line">            otherObject.onGround()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>Similar method used to create Walls</p></li><li><p>Now all dynamic objects in our game react properly to wall and platform collisions as long as they extend DynamicObject</p></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JumperObject</span>(<span class="params">location: <span class="type">PhysicsVector</span>,  dimensions: <span class="type">PhysicsVector</span></span>) <span class="keyword">extends</span> <span class="title">StaticObject</span>(<span class="params">location, dimensions</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">val</span> objectID: <span class="type">Int</span> = <span class="type">JumperObject</span>.nextID</span><br><span class="line">    <span class="type">JumperObject</span>.nextID += <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wall</span>(<span class="params">location: <span class="type">PhysicsVector</span>, dimensions: <span class="type">PhysicsVector</span></span>) <span class="keyword">extends</span> <span class="title">JumperObject</span>(<span class="params">location, dimensions</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">collideWithDynamicObject</span></span>(otherObject: <span class="type">DynamicObject</span>, face: <span class="type">Integer</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">if</span>(face == <span class="type">Face</span>.negativeX)&#123;</span><br><span class="line">            otherObject.velocity.x = <span class="number">0.0</span></span><br><span class="line">            otherObject.location.x = <span class="keyword">this</span>.location.x - otherObject.dimensions.x</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (face == <span class="type">Face</span>.positiveX)&#123;</span><br><span class="line">            otherObject.velocity.x = <span class="number">0.0</span></span><br><span class="line">            otherObject.location.x = <span class="keyword">this</span>.location.x + <span class="keyword">this</span>.dimensions.x </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Lecture-Quesion"><a href="#Lecture-Quesion" class="headerlink" title="Lecture Quesion"></a>Lecture Quesion</h1><p><strong>Question:</strong> in a package named “oop.electronics”, implement the following to expand the Flashlight&#x2F;BoomBox functionality from the previous lecture question. Full functionality from the previous lecture question is required</p><ul><li>classes Battery, Electronic, BoomBox, and Flashlight as defined in the previous lecture question</li><li>An <strong>obeject</strong> named UseElectronics with<ul><li>A method named “useAll” that takes a List of Electronics as a parameter and returns Unit<ul><li>Calls the “use” method on all the Electronics in the input list</li><li>[Notice that the specific method that is called depends on whether the Electronic is a BoomBox or a Flashlight]</li></ul></li><li>A method named “swapBatteries” that takes two Electronics as parameters and returns Unit<ul><li>Exchanges the batteries between the two Electronics</li></ul></li></ul></li></ul><p><strong>Testing:</strong> In a package named “tests” create a Scala class named “TestElectronics” as a test suite that tests all the functionality listed above</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> CSE116 </category>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSE116的学习笔记 Lec2-1:Inheritance</title>
      <link href="/cn/Inheritance/"/>
      <url>/cn/Inheritance/</url>
      
        <content type="html"><![CDATA[<p>Inheritance</p><h1 id="Scala-Type-Hierarchy"><a href="#Scala-Type-Hierarchy" class="headerlink" title="Scala Type Hierarchy"></a>Scala Type Hierarchy</h1><p><img src="/cn/Inheritance/image/Hierarchy.png" alt="Hierarchy"></p><ul><li>All objects share Any as their base types</li><li>Classes extending <strong>AnyVal</strong> will be stored on the <strong>stack</strong></li><li>Classes extending <strong>AnyRef</strong> will be stored on the <strong>heap</strong></li></ul><h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><ul><li><p>Let’s do some world building</p></li><li><p>If we’re making a game, we’ll want various objects that will interact with each other</p></li><li><p>we’ll setup a simple game where</p><ul><li>Each player has a set health and strength</li><li>Players can pick up and throw balls</li><li>If a player gets hit with a ball, they lose health</li><li>Players can collect health potions to regain health</li></ul></li><li><p>Note: We might not build this full game, but we will build some of the game mechanics.</p></li></ul><h1 id="Objects-Review"><a href="#Objects-Review" class="headerlink" title="Objects Review"></a>Objects Review</h1><ul><li>We’ll need different objects for this game<ul><li>Player</li><li>Ball</li><li>HealthPotion</li></ul></li></ul><p><img src="/cn/Inheritance/image/lq2-1-1.png" alt="LQ2-1-1"></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> location: <span class="type">PhysicsVector</span> = <span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">2.0</span>, <span class="number">-2.0</span>, <span class="number">2.0</span>)</span><br><span class="line">    <span class="keyword">var</span> dimensions: <span class="type">PhysicsVector</span> = <span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">2.0</span>)</span><br><span class="line">    <span class="keyword">var</span> velocity: <span class="type">PhysicsVector</span> = <span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">0.0</span>, <span class="number">-1.0</span>, <span class="number">0.0</span>)</span><br><span class="line">    <span class="keyword">var</span> orientation: <span class="type">PhysicsVector</span> = <span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">0.5</span>, <span class="number">-1.5</span>, <span class="number">0.0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> maxHealth: <span class="type">Int</span> = <span class="number">20</span></span><br><span class="line">    <span class="keyword">val</span> strength: <span class="type">Int</span> = <span class="number">25</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> health: <span class="type">Int</span> = <span class="number">17</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">useBall</span></span>(ball: <span class="type">Ball</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        ball.use(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">use</span> <span class="title">HealthPotion</span></span>(potion: <span class="type">HealthPotion</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        potion.use(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/cn/Inheritance/image/lq2-1-2.png" alt="lq2-1-2"></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ball</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> location: <span class="type">PhysicsVector</span> = <span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">1.0</span>, <span class="number">5.0</span>, <span class="number">2.0</span>)</span><br><span class="line">    <span class="keyword">var</span> dimensions: <span class="type">PhysicsVector</span> = <span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>)</span><br><span class="line">    <span class="keyword">val</span> velocity: <span class="type">PhysicsVector</span> = <span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">10.0</span>)</span><br><span class="line">    <span class="keyword">val</span> mass: <span class="type">Double</span> = <span class="number">5.0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">use</span></span>(player: <span class="type">Player</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">this</span>.velocity = <span class="keyword">new</span> <span class="type">PhysicsVector</span>(</span><br><span class="line">            player.orientation.x * player.strength,</span><br><span class="line">            player.orientation.y * player.strength,</span><br><span class="line">            player.strength</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/cn/Inheritance/image/lq2-1-3.png" alt="lq2-1-3"></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">HealthPotion</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> location: <span class="type">PhysicsVector</span> = <span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">5.0</span>, <span class="number">7.0</span>, <span class="number">0.0</span>)</span><br><span class="line">    <span class="keyword">var</span> dimensions: <span class="type">PhysicsVector</span> = <span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>)</span><br><span class="line">    <span class="keyword">var</span> velocity: <span class="type">PhysicsVector</span> = <span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>)</span><br><span class="line">    <span class="keyword">val</span> volume: <span class="type">Int</span> = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">use</span></span>(player: <span class="type">Player</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        player.health = (player.health + <span class="keyword">this</span>.volume).min(player.maxHealth)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>But this is restrictive</li><li>Game can only have one Ball, one HealthPotion and on Player</li><li>Can play, but mot very fun</li></ul><h1 id="Classes-Review"><a href="#Classes-Review" class="headerlink" title="Classes Review"></a>Classes Review</h1><p><img src="/cn/Inheritance/image/lq2-1-4.png" alt="lq2-1-4"></p><ul><li>This is why we use classes</li><li>Classes let use create multiple objects of type Ball, HealthPotion, and Player.</li></ul><p><img src="/cn/Inheritance/image/lq2-1-5.png" alt="lq2-1-5"></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span>(<span class="params">var location: <span class="type">PhysicsVector</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">             var dimensions: <span class="type">PhysicsVector</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">             var velocity: <span class="type">PhysicsVector</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">             var orientation: <span class="type">PhysicsVector</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">             val maxHealth: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">             val strength: <span class="type">Int</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> health: <span class="type">Int</span> = maxHealth</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">useBall</span></span>(ball: <span class="type">Ball</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        ball.use(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">useHealthPotion</span></span>(potion: <span class="type">HealthPotion</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        potion.use(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/cn/Inheritance/image/lq2-1-6.png" alt="lq2-1-6"></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ball</span>(<span class="params">var location: <span class="type">PhysicsVector</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">           var dimensions: <span class="type">PhysicsVector</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">           var velocity: <span class="type">PhysicsVector</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">           val mass: <span class="type">Double</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">use</span></span>(player: <span class="type">Player</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">this</span>.velocity = <span class="keyword">new</span> <span class="type">PhysicsVector</span>(</span><br><span class="line">            player.orientation.x * player.strength,</span><br><span class="line">            player.orientation.y * player.strength,</span><br><span class="line">            player.strength</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/cn/Inheritance/image/lq2-1-7.png" alt="lq2-1-7"></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HealthPotion</span>(<span class="params">var location: <span class="type">PhysicsVector</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">                   var dimensions: <span class="type">PhysicsVector</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">                   var velocity: <span class="type">PhysicsVector</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">                   val volume: <span class="type">Int</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">use</span></span>(player: <span class="type">Player</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        player.health = (player.health + <span class="keyword">this</span>.volume).min(player.maxHealth)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/cn/Inheritance/image/lq2-1-6.png" alt="lq2-1-6"></p><ul><li>Use the class to create multiple objects with different states</li></ul><p><img src="/cn/Inheritance/image/lq2-1-8.png" alt="lq2-1-8"></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ball1: <span class="type">Ball</span> = <span class="keyword">new</span> <span class="type">Ball</span>(</span><br><span class="line">    <span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">1.0</span>, <span class="number">5.0</span>, <span class="number">2.0</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">10.0</span>),</span><br><span class="line">    <span class="number">5.0</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// ball1 stores 54224</span></span><br></pre></td></tr></table></figure><p><img src="/cn/Inheritance/image/lq2-1-9.png" alt="lq2-1-9"></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ball2: <span class="type">Ball</span> = <span class="keyword">new</span> <span class="type">Ball</span>(</span><br><span class="line">    <span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">6.0</span>, <span class="number">-3.0</span>, <span class="number">2.0</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">0.0</span>, <span class="number">4.5</span>, <span class="number">4.5</span>),</span><br><span class="line">    <span class="number">10.0</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// ball2 stores 21374</span></span><br></pre></td></tr></table></figure><h1 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h1><ul><li>Use inheritance to create classes with different behavior</li><li>Observe: Ball and HealthPotion have a lot in common</li></ul><p><img src="/cn/Inheritance/image/lq2-1-6.png" alt="lq2-1-6"><br><img src="/cn/Inheritance/image/lq2-1-7.png" alt="lq2-1-7">      </p><ul><li>Can add much more common functionality (that doesn’t fit on a slide)<ul><li>Compute mass of a potion based on volume</li><li>Compute momentum of both types based on mass * velocity</li><li>Method defining behavior when either hits the ground(bounce or shatter)</li></ul></li></ul><p><img src="/cn/Inheritance/image/lq2-1-10.png" alt="lq2-1-10"></p><ul><li><p>Factor out common state and behavior into a new calss</p></li><li><p>Ball and HealthPotion calsses <strong>inherent</strong> the state and behavior of InanimateObject</p></li><li><p>Ball and HealthPotion add their specific state and behavior</p></li><li><p>New class defines what every inheriting class must define</p></li><li><p>Any behavior that is to be defined by inheriting classes is declared <strong>abstract</strong></p><ul><li>We call this an abstract class</li><li>Cannot create objects of abstract</li></ul></li><li><p>Inheriting classes will define all abstract behavior</p><ul><li>We call these concrete classes<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">InanimateObject</span>(<span class="params">var location: <span class="type">PhysicsVector</span>, var dimension: <span class="type">PhysicsVector</span>, var velocity: <span class="type">PhysicsVector</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">objectMass</span></span>(): <span class="type">Double</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">use</span></span>(player: <span class="type">Player</span>): <span class="type">Unit</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Use the extends keyword to inherent another class</p><ul><li>Extend the definition of InanimateObject</li><li>We call IanimateObject the superclass of Ball<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">InanimateObject</span>(<span class="params">var location: <span class="type">PhysicsVector</span>, var dimension: <span class="type">PhysicsVector</span>, var velocity: <span class="type">PhysicsVector</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">objectMass</span></span>(): <span class="type">Double</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">use</span></span>(player: <span class="type">Player</span>): <span class="type">Unit</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ball</span>(<span class="params">location: <span class="type">PhysicsVector</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">           dimensions: <span class="type">PhysicsVector</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">           velocity: <span class="type">PhysicsVector</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">           mass: <span class="type">Double</span></span>)</span></span><br><span class="line">    <span class="keyword">extends</span> <span class="type">InanimateObject</span>(location, dimensions, velocity)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">objectMass</span></span>(): <span class="type">Double</span> = &#123;</span><br><span class="line">        <span class="keyword">this</span>.mass</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">use</span></span>(player: <span class="type">Player</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">this</span>.velocity.x = player.orientation.x * player.strength</span><br><span class="line">        <span class="keyword">this</span>.velocity.y = player.orientation.y * player.strength</span><br><span class="line">        <span class="keyword">this</span>.velocity.z = player.strength</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Ball has it’s own constructor</p></li><li><p>Ball must call InanimateObject’s constructor</p></li><li><p>var &#x2F; val declared in concrete class to make these public</p></li><li><p>Implement all abstract behavior</p></li><li><p>Use the <strong>override</strong> keyword when overwritting behavior from the superclass</p></li><li><p>Override all abstract methods with behavior for this class </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">InanimateObject</span>(<span class="params">var location: <span class="type">PhysicsVector</span>, var dimension: <span class="type">PhysicsVector</span>, var velocity: <span class="type">PhysicsVector</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">objectMass</span></span>(): <span class="type">Double</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">use</span></span>(player: <span class="type">Player</span>): <span class="type">Unit</span></span><br><span class="line">&#125;</span><br><span class="line">```   </span><br><span class="line">```scala</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HealthPotion</span>(<span class="params">location: <span class="type">PhysicsVector</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">                   dimensions: <span class="type">PhysicsVector</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">                   velocity: <span class="type">PhysicsVector</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">                   val volume: <span class="type">Int</span></span>)</span></span><br><span class="line">    extend <span class="type">InanimateObject</span>(location, dimensions, velocity) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">objectMass</span></span>(): <span class="type">Double</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> massPerVolume: <span class="type">Double</span> = <span class="number">7.0</span></span><br><span class="line">        volume * massPerVolume</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">use</span></span>(player: <span class="type">Player</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        player.health = (player.health + <span class="keyword">this</span>.volume).min(player.macHealth)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ball</span>(<span class="params">location: <span class="type">PhysicsVector</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">           dimensions: <span class="type">PhysicsVector</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">           velocity: <span class="type">PhysicsVector</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">           mass: <span class="type">Double</span></span>)</span></span><br><span class="line">    extend <span class="type">InanimateObject</span>(location, dimensions, velocity)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">objectMass</span></span>(): <span class="type">Double</span> = &#123;</span><br><span class="line">        <span class="keyword">this</span>.mass</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">use</span></span>(player: <span class="type">Player</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">this</span>.velocity.x = player.orientation.x * player.strength</span><br><span class="line">        <span class="keyword">this</span>.velocity.y = player.orientation.y * player.strength</span><br><span class="line">        <span class="keyword">this</span>.velocity.z = player.strength</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Define different behavior for each base class</p></li><li><p>Define similar types with some difference</p></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">InanimateObject</span>(<span class="params">var location: <span class="type">PhysicsVector</span>, var dimensions: <span class="type">PhysicsVector</span>, var velocity: <span class="type">PhysicsVector</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">objectMass</span></span>(): <span class="type">Double</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">use</span></span>(player: <span class="type">Player</span>): <span class="type">Unit</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">magnitudeOfMomentum</span></span>(): <span class="type">Double</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> magnitudeOfVelocity = <span class="type">Math</span>.sqrt(</span><br><span class="line">            <span class="type">Math</span>.pow(<span class="keyword">this</span>.velocity.x, <span class="number">2.0</span>) + </span><br><span class="line">            <span class="type">Math</span>.pow(<span class="keyword">this</span>.velocity.y, <span class="number">2.0</span>) +</span><br><span class="line">            <span class="type">Math</span>.pow(<span class="keyword">this</span>,velocity.z, <span class="number">2.0</span>)</span><br><span class="line">        )</span><br><span class="line">        magnitudeOfVelocity * <span class="keyword">this</span>.objectMass()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>OK, BUT Y THO?</strong></p></li><li><p>Add behavior to InanimateObject</p></li><li><p>Behavior is added to ALL inheriting classes</p></li><li><p>We may want many, many more subtypes of InanimateObjects in our game</p></li><li><p>Any common functionality added to InanimateObject</p><ul><li>Easy to add functionality to ALL subtypes will very little effort</li></ul></li><li><p><strong>But wait!</strong></p><ul><li>There’s more</li></ul></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">InanimateObject</span>(<span class="params">var location: <span class="type">PhysicsVector</span>, var dimensions: <span class="type">PhysicsVector</span>, var inputVelocity: <span class="type">PhysicsVector</span></span>) <span class="keyword">extends</span> <span class="title">DynamicObject</span>(<span class="params">location, dimensions</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.velocity = inputVelocity</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">objectMass</span></span>(): <span class="type">Double</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">use</span></span>(player: <span class="type">Player</span>): <span class="type">Unit</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">magnitudeOfMomentum</span></span>(): <span class="type">Double</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> magnitudeOfVelocity = <span class="type">Math</span>.sqrt(</span><br><span class="line">            <span class="type">Math</span>.pow(<span class="keyword">this</span>.velocity.x, <span class="number">2.0</span>) + </span><br><span class="line">            <span class="type">Math</span>.pow(<span class="keyword">this</span>.velocity.y, <span class="number">2.0</span>) +</span><br><span class="line">            <span class="type">Math</span>.pow(<span class="keyword">this</span>,velocity.z, <span class="number">2.0</span>)</span><br><span class="line">        )</span><br><span class="line">        magnitudeOfVelocity * <span class="keyword">this</span>.objectMass()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>If we want Ball, HealthPotion, and all other InanimateObjects to work with our physics engine</p><ul><li>Extend DynamicObject!</li></ul></li><li><p>Note that the velocity is inherited</p></li><li><p>The velocity parameter in the constructor must have a different name that the inherited variable</p><ul><li>Allows us to assign its value to the state variable</li><li>They would both be referred to with <strong>this</strong> causing a name conflict</li></ul></li><li><p>No name conflict with multiple location &#x2F; dimension since they are only in the header</p></li></ul><p><img src="/cn/Inheritance/image/lq2-1-11.png" alt="lq2-1-11"></p><h1 id="Scala-Type-Hierarchy-1"><a href="#Scala-Type-Hierarchy-1" class="headerlink" title="Scala Type Hierarchy"></a>Scala Type Hierarchy</h1><p><img src="/cn/Inheritance/image/lq2-1-12.png" alt="lq2-1-12"></p><ul><li>All objects share Any as their base types</li><li>Classes extending <strong>AnyVal</strong> will be stored on the <strong>stack</strong></li><li>Classes extending <strong>AnyRef</strong> will be stored on the <strong>heap</strong></li></ul><p><img src="/cn/Inheritance/image/lq2-1-13.png" alt="lq2-1-13"></p><ul><li>Classes you define extend AnyRef by default</li><li>HealthPotion has 6 different types<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> potion1: <span class="type">HealthPotion</span> = <span class="keyword">new</span> <span class="type">HealthPotion</span>(<span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="number">6</span>) </span><br><span class="line"><span class="keyword">val</span> potion2: <span class="type">InanimateObject</span> = <span class="keyword">new</span> <span class="type">HealthPotion</span>(<span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="number">6</span>) </span><br><span class="line"><span class="keyword">val</span> potion3: <span class="type">DynamicObject</span> = <span class="keyword">new</span> <span class="type">HealthPotion</span>(<span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="number">6</span>) </span><br><span class="line"><span class="keyword">val</span> potion4: <span class="type">GameObject</span> = <span class="keyword">new</span> <span class="type">HealthPotion</span>(<span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="number">6</span>)</span><br><span class="line"><span class="keyword">val</span> potion5: <span class="type">AnyRef</span> = <span class="keyword">new</span> <span class="type">HealthPotion</span>(<span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="number">6</span>)</span><br><span class="line"><span class="keyword">val</span> potion6: <span class="type">Any</span> = <span class="keyword">new</span> <span class="type">HealthPotion</span>(<span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="keyword">new</span> <span class="type">PhysicsVector</span>(), <span class="number">6</span>)</span><br></pre></td></tr></table></figure></li></ul><h1 id="Lecture-Question"><a href="#Lecture-Question" class="headerlink" title="Lecture Question"></a>Lecture Question</h1><p><strong>Question:</strong> in a package named “oop.electronics”, implement the following. This functionality is similar to the last lecture question            </p><ul><li>class Battery with<ul><li>A constructor that takes a variable named “charge” of type Int</li></ul></li><li>abstract class Electronic with<ul><li>A constructor that takes no parameters</li><li>A state variable named “battery” of type Battery</li><li>A method named “use” that takes no parameters and returns Unit (This can be abstract)</li><li>A method named “replaceBattery” that takes a Battery as a parameter and returns a Battery<ul><li>This method swaps the input Battery with the Battery currently stored in this Electronic’s state variable</li><li>The returned Battery is the one that was in the state variable when the method is called</li></ul></li></ul></li><li>class Flashlight that extends Electronic<ul><li>A constructor that takes no parameters<ul><li>When a new Flashlight is created, assign the inherited state variable named “battery” to a new Battery with 5 charge (ie. Batteries included)</li></ul></li><li>Override the “use” method to reduce the charge of the battery in the state variable by 1 if its charge is 1 or greater</li></ul></li><li>class BoomBox that extends Electronic<ul><li>A constructor that takes a variable of type Battery and assigns it to the inherited state variable named “battery”<ul><li>Your BoomBox constructor parameter should have a different name than the state variable</li></ul></li><li>Override the “use” method to reduce the charge of the battery in the state variable by 3 if its charge is 3 or greater</li></ul></li></ul><p><strong>Hint</strong><br>The code is in a different package so it doesn’t interfere with your code from the previous question. Be sure you check that this import works from a different package in your project            </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> oop.electronics.&#123;<span class="type">Battery</span>, <span class="type">BoomBox</span>, <span class="type">Flashlight</span>, <span class="type">Electronic</span>&#125;</span><br></pre></td></tr></table></figure><p>Your Flashlight and BoomBox classes must inherit Electronic. This will be checked by storing them in variables of type Electronic      </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> flashlight1: <span class="type">Electronic</span> = <span class="keyword">new</span> <span class="type">Flashlight</span>()</span><br><span class="line"><span class="keyword">val</span> boomBox1: <span class="type">Electronic</span> = <span class="keyword">new</span> <span class="type">BoomBox</span>(<span class="keyword">new</span> <span class="type">Battery</span>(<span class="number">10</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> CSE116 </category>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSE116的学习笔记-Lec#8:Model of Execution live</title>
      <link href="/cn/Model-of-Execution-live/"/>
      <url>/cn/Model-of-Execution-live/</url>
      
        <content type="html"><![CDATA[<h1 id="Model-of-Execution"><a href="#Model-of-Execution" class="headerlink" title="Model of Execution"></a>Model of Execution</h1><p><strong>Live Examples</strong></p><h1 id="Lecture-Question"><a href="#Lecture-Question" class="headerlink" title="Lecture Question"></a>Lecture Question</h1><p><strong>Question:</strong> in a package named “execution”, implement the following classes:             </p><p>Class Battery with:           </p><ul><li>A constructor that takes a variable named “charge” of type Int</li></ul><p>Class Flashlight with:           </p><ul><li>A constructor that takes no parameters<ul><li>When a new Flashlight is created, declare a state variable named “battery” of type Battery and set it to a new Battery with 5 charge (ie. Batteries included)</li></ul></li><li>A method named “use” that takes no parameters and return Unit<ul><li>This method will decrease the charge of the Flashlight’s battery by 1</li><li>If the charge of the battery is 0, this method does nothing</li></ul></li><li>A method named “replaceBattery” that takes a Battery as a parameter and returns a Battery<ul><li>This method swaps the inpit Battery with the Battery currently stored in this Flashlight’s state variable</li><li>The returned Battery is the one that was in the state variable when the method is called</li></ul></li></ul><p><strong>Testing:</strong> In a package named “tests” create a Scala class named “TestBatteries” as a test suite that tests all the functionality listed above. Be sure to check the references of batteries involved in both methods.         </p><p><strong>Checking References:</strong>     </p><ul><li>When a battery is used, it is not enough to check that the charge of the battery in the flashlight has decreased by 1<ul><li>You must check the reference of the battery in the flashlight to ensure that it is in fact the same battery</li><li>To do this, you should store a reference to the battery created when the flashlight was created so you can compare it to the reference in the flashlight after it’s used. The first thing you should do after creating a new flashlight is store a reference to its battery in a separate variable<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> f1: <span class="type">Flashlight</span> = <span class="keyword">new</span> <span class="type">Flashlight</span>() </span><br><span class="line"><span class="keyword">val</span> f1Battery: <span class="type">Battery</span> = f1.battery</span><br></pre></td></tr></table></figure></li></ul></li><li>When replacing a battery, the batteries will be swapped by reference<ul><li>Be sure to check for the proper reference of the battery in the flashlight <strong>and</strong> the battery that is returned by the method for proper references</li><li>Make sure the returned battery is the battery that was in the flashlight before the swap</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> CSE116 </category>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSE116的学习笔记-Lec#7:Model of Execution More Example</title>
      <link href="/cn/Model-of-Execution-2/"/>
      <url>/cn/Model-of-Execution-2/</url>
      
        <content type="html"><![CDATA[<p>Model of Execution</p><h1 id="More-Memory-Examples"><a href="#More-Memory-Examples" class="headerlink" title="More Memory Examples"></a>More Memory Examples</h1><ul><li>Multiple Obejects on the heap<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">winBattle</span></span>(character: <span class="type">PartyCharacter</span>, xp: <span class="type">Int</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    character.battlesWon += <span class="number">1</span></span><br><span class="line">    character.experiencePoints += xp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// Add the value mobXP to the stack with a value of 20</span></span><br><span class="line">    <span class="keyword">val</span> mbXP: <span class="type">Int</span> = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add the value bossXP to the stack with a value of 100</span></span><br><span class="line">    <span class="keyword">val</span> bossXP: <span class="type">Int</span> = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// A new object of type PartyCharacter is created</span></span><br><span class="line">    <span class="comment">// The &quot;hero&quot; value only stores this reference</span></span><br><span class="line">    <span class="keyword">val</span> hero: <span class="type">PartyCharacter</span> = <span class="keyword">new</span> <span class="type">PartyCharacter</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// do method &quot;winBattle&quot;</span></span><br><span class="line">    winBattle(hero, mobXP)</span><br><span class="line">    <span class="keyword">val</span> party: <span class="type">Party</span> = <span class="keyword">new</span> <span class="type">Party</span>(hero, <span class="keyword">new</span> <span class="type">PartyCharacter</span>())</span><br><span class="line">    party.winBattle(bossXP)</span><br><span class="line">    winBattle(party.characterOne, mobXP)</span><br><span class="line">    winBattle(party.characterTwo, mobXP)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PartyCharacter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> battlesWon: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> experiencePoints: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Party</span>(<span class="params">val characterOne: <span class="type">PartyCharacter</span>, val characterTwo: <span class="type">PartyCharacter</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> battleWon: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">winBattle</span></span>(xp:<span class="type">Int</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">this</span>.battlesWon += <span class="number">1</span></span><br><span class="line">        <span class="keyword">this</span>.<span class="type">CharacterOne</span>.battlesWon += <span class="number">1</span></span><br><span class="line">        <span class="keyword">this</span>.<span class="type">CharacterTwo</span>.battlesWon += <span class="number">1</span></span><br><span class="line">        <span class="keyword">this</span>.<span class="type">CharacterOne</span>.experiencePoints += xp</span><br><span class="line">        <span class="keyword">this</span>.<span class="type">CharacterTwo</span>.experiencePoints += xp</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Multiple frames on the stack<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">computeGeometricSum</span></span>(n: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> result: <span class="type">Int</span> = computeGeometricSum(n - <span class="number">1</span>)</span><br><span class="line">        result += n</span><br><span class="line">        result</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> result: <span class="type">Int</span> = computeGeometricSum(<span class="number">3</span>)</span><br><span class="line">    println(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>See the process detail in PDF</strong></p><h1 id="Old-Example"><a href="#Old-Example" class="headerlink" title="Old Example"></a>Old Example</h1><ul><li>Multiple Objects on the heap<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span> </span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> bird: <span class="type">Bird</span> = <span class="keyword">new</span> <span class="type">Bird</span>()</span><br><span class="line">    <span class="keyword">var</span> action: <span class="type">String</span> = <span class="string">&quot;Nothing&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(bird.inDanger())&#123;</span><br><span class="line">        <span class="keyword">val</span> action: <span class="type">String</span> = <span class="string">&quot;Panic!&quot;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> action: <span class="type">String</span> = <span class="string">&quot;Check bird&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    println(action)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> box: <span class="type">Box</span> = <span class="keyword">new</span> <span class="type">Box</span>(bird, <span class="keyword">new</span> <span class="type">Bird</span>())</span><br><span class="line">    <span class="keyword">if</span>(box.inDanger())&#123;</span><br><span class="line">        action = <span class="string">&quot;Stay in the boat&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    println(action)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span> </span>&#123;</span><br><span class="line">    <span class="keyword">val</span> timesHelpful: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> timesChecked: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inDanger</span></span>(): <span class="type">Boolean</span> = &#123;</span><br><span class="line">        timesChecked += <span class="number">1</span></span><br><span class="line">        <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span> (<span class="params">val bird1: <span class="type">Bird</span>, val bird2: <span class="type">Bird</span></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inDanger</span></span>(): <span class="type">Boolean</span> = &#123;</span><br><span class="line">        bird1.inDanger() &amp;&amp; bird2.inDanger()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>See the process detail in PDF</strong></p><h1 id="Lecture-Question"><a href="#Lecture-Question" class="headerlink" title="Lecture Question"></a>Lecture Question</h1><p><strong>Question:</strong> In a package named “execution” create a Scala class named “Team” and a Scala object named “Referee”.                </p><p>Team will have:         </p><ul><li>Two state values of type Int representing the strength of the team’s offense and defense with a constructor to set these values. The parameters for the constructor should be offense first, then defense (Note: These values do not have defined names in this question so you cannot access them in your testing. If I use “teamOffense” and you name it “offense” and access it in your tests, your tests will crash when testing my code since the variable “offense” will not exist)</li><li>A third state variable of type Int that is not in the constructor that represents the score of the team, is declared as a <strong>var</strong>, and is initialized to 0 (This variable also has not defined name)</li></ul><p>Referee will have:             </p><ul><li>A method named “playGame” that takes two Team objects as parameters and return type Unit. This method will alter the state of each input Team by setting their scores equal to their offense minus the other Team’s defense. If a Team’s offense is less than the other Team’s defense their score should be 0 (no negative scores)</li><li>A method named “declareWinner” that takes two Teams as parameters and returns the Team with the higher score. If both Teams have the same score, return a <strong>new</strong> Team object to indicate that neither competing team won (You may choose any values in the constructor call of this new Team)</li></ul><p><strong>Testing:</strong> In a package named “tests” create a Scala class named “TestTeams” as a test suite that tests the functionality listed above               </p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> CSE116 </category>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSE116的学习笔记-Lec#6:Model of Execution</title>
      <link href="/cn/Model-of-Execution/"/>
      <url>/cn/Model-of-Execution/</url>
      
        <content type="html"><![CDATA[<p><strong>Model of Execution</strong>              </p><h1 id="Interpretation-v-Compliation"><a href="#Interpretation-v-Compliation" class="headerlink" title="Interpretation v. Compliation"></a>Interpretation v. Compliation</h1><ul><li>Interpretation<ul><li>Code is read and executed one statement at a time</li></ul></li><li>Compliation<ul><li>Entire progeam is translated into another language</li><li>The translated code is interpreted</li></ul></li></ul><h2 id="Interpretation"><a href="#Interpretation" class="headerlink" title="Interpretation"></a>Interpretation</h2><ul><li>Python and JavaScript are interpreted languages</li><li>Run-time error are common<ul><li>Program runs, but crashes when a line with an error is interpreted</li></ul></li></ul><p>This program runs without error            </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RuntimeErrorExample</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_init_</span>(<span class="params">self, initial_state</span>):</span><br><span class="line">        self.state = initial_state</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_to_state</span>(<span class="params">self, to_add</span>):</span><br><span class="line">        println(<span class="string">&quot;adding to state&quot;</span>)</span><br><span class="line">        self.state += to_add</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> _name_ == <span class="string">&#x27;_main_&#x27;</span>:</span><br><span class="line">    example_object = RuntimeErrorExample(<span class="number">5</span>)</span><br><span class="line">    example_object.add_to_state(<span class="number">10</span>)</span><br><span class="line">    <span class="built_in">print</span>(example_object,state)</span><br></pre></td></tr></table></figure><p>This program crashes with runtime error            </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RuntimeErrorExample</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_init_</span>(<span class="params">self, initial_state</span>):</span><br><span class="line">        self.state = initial_state</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_to_state</span>(<span class="params">self, to_add</span>):</span><br><span class="line">        println(<span class="string">&quot;adding to state&quot;</span>)</span><br><span class="line">        self.state += to_add</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> _name_ == <span class="string">&#x27;_main_&#x27;</span>:</span><br><span class="line">    example_object = RuntimeErrorExample(<span class="number">5</span>)</span><br><span class="line">    example_object.add_to_state(<span class="string">&quot;ten&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(example_object,state)</span><br></pre></td></tr></table></figure><h2 id="Compilation"><a href="#Compilation" class="headerlink" title="Compilation"></a>Compilation</h2><ul><li>Scala, Java, C, and C++ are compiled language</li><li>Compiler errors are common<ul><li>Compilers will check all syntax and types and alert us of any errors (Compiler error)</li><li>Program fails to be converted into the target language</li><li>Program never runs</li><li>The compiler can help us find errors before they become run-time errors</li></ul></li></ul><p>Compilers and runs without error         </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CompileError</span>(<span class="params">var state: <span class="type">Int</span></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addToState</span></span>(toAdd: <span class="type">Int</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        println(<span class="string">&quot;adding to state&quot;</span>)</span><br><span class="line">        <span class="keyword">this</span>.state += toAdd</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> exampleObject = <span class="keyword">new</span> <span class="type">CompilerError</span>(<span class="number">5</span>)</span><br><span class="line">        exampleObject.addToState(<span class="number">10</span>)</span><br><span class="line">        println(exampleObject.state)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Does not compile. Will not run any code         </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CompileError</span>(<span class="params">var state: <span class="type">Int</span></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addToState</span></span>(toAdd: <span class="type">Int</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        println(<span class="string">&quot;adding to state&quot;</span>)</span><br><span class="line">        <span class="keyword">this</span>.state += toAdd</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> exampleObject = <span class="keyword">new</span> <span class="type">CompilerError</span>(<span class="number">5</span>)</span><br><span class="line">        exampleObject.addToState(<span class="string">&quot;ten&quot;</span>)</span><br><span class="line">        println(exampleObject.state)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Compilation-Scala"><a href="#Compilation-Scala" class="headerlink" title="Compilation - Scala"></a>Compilation - Scala</h2><ul><li><p>Scala compiles to Java Byte Code</p></li><li><p>Executed by the Java Virtual Machine (JVM)</p><ul><li>Installed on Billions of devices!</li></ul></li><li><p>Compiled Java and Scala code can be uesd in the same program</p><ul><li>Since they both compile to Java Byte Code</li></ul></li><li><p>Scala uses many Java classes</p><ul><li>We saw that Math in Scala is Java’s Math calss</li><li>We’ll somtimes use Java libraries in this course</li></ul></li></ul><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li>Every class you create will be passed by reference<ul><li>Also data structure (List, Map, Array) and other built-in calsses</li></ul></li><li>Pass-by-reference means that a copy is not made when a variable is assigned a value</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ItemReferences</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increasePrice</span></span>( item: <span class="type">Item</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        item.price += <span class="number">0.25</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args:<span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> cereal: <span class="type">Item</span> = <span class="keyword">new</span> <span class="type">Item</span>(<span class="string">&quot;cereal&quot;</span>, <span class="number">3.0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// pass-by-reference</span></span><br><span class="line">        increasePrice(cereal)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// assignment-by-reference</span></span><br><span class="line">        <span class="keyword">val</span> cereal2: <span class="type">Item</span> = cereal</span><br><span class="line"></span><br><span class="line">        increasePrice(cereal2)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.5</span></span><br><span class="line">        println(cereal.price)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>increasePrice returns Unit, yet it is able to modify an item</li><li>cereal and cereal2 “refer” to the same obejct<ul><li>Changes made to one will change both variables</li></ul></li></ul><h1 id="References-Warning"><a href="#References-Warning" class="headerlink" title="References: Warning"></a>References: Warning</h1><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">updateObject</span></span>(dynamicObject: <span class="type">DynamicObject</span>, deltaTime: <span class="type">Double</span>, magnitudeOfGravity: <span class="type">Double</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    dynamicObject.previousLocation = dynamicObject.location</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ... rest of the method</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>previousLocation and location are the same object!!!<ul><li>Changing location will change previousLocation</li></ul></li><li>Create a new PhysicsVector for previousLocation or copy x,y,z one at a time</li></ul><h1 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h1><ul><li>Random Access Memory (RAM)<ul><li>Access any value by index</li><li>Effectively a giant array</li></ul></li><li>All values in your program are stored here</li></ul><h2 id="Let’s-Talk-About-Memory"><a href="#Let’s-Talk-About-Memory" class="headerlink" title="Let’s Talk About Memory"></a>Let’s Talk About Memory</h2><ul><li><p>Significantly faster than reading &#x2F; writing to disk</p><ul><li>Even with a SSD</li></ul></li><li><p>Significantly more expensive than disk space</p></li><li><p>Operating System (OS) controls memory</p></li><li><p>On Program start, OS allocates a section of memory for our program</p><ul><li>Gives access to a range of memory addresses &#x2F; indices</li></ul></li><li><p>Some space is reserved for program data</p></li><li><p>Details not important to CSE116</p></li><li><p>The rest will be used for our data</p></li><li><p>Data stored in the <strong>memory stack</strong></p></li></ul><h2 id="Memory-Stack"><a href="#Memory-Stack" class="headerlink" title="Memory Stack"></a>Memory Stack</h2><ul><li><p>Stores the variables and values for our programs</p></li><li><p>LIFO - Last In First Out</p><ul><li>New values are added to the end of the stack</li><li>Only values at the end of the stack can be removed</li></ul></li><li><p>Method calls create new stack frames</p><ul><li>Active stack frame is the currently executiong method</li><li>Only stack values in the current stack frame can be accessed</li><li>A stack frame is isolated from the rest of the stack</li></ul></li><li><p>Program execution begins in the mian method stack frame</p></li><li><p>Code blocks control variable scope</p><ul><li>Code executing within a code block (ex. if, for, while) <br> begins a new section on the stack</li></ul></li><li><p>Similar to stack frames, but values outside of the code block can be accessed</p></li><li><p>Variables &#x2F; Values in the same code block cannot have the same name</p><ul><li>If variables in different blocks have the same name, the program searches the inner-most code block first for that variable</li></ul></li><li><p>When the end of a code block is reached, all variables &#x2F; values created within that block are destoryed</p></li></ul><h2 id="Memory-Stack-Example"><a href="#Memory-Stack-Example" class="headerlink" title="Memory Stack Example"></a>Memory Stack Example</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">computeFactorial</span>(<span class="params">n</span>)&#123;</span><br><span class="line">    result = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        result *= i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params">commandLineArgs</span>)&#123;</span><br><span class="line">    i = <span class="number">5</span></span><br><span class="line">    n = <span class="title function_">computeFactorial</span>(i)</span><br><span class="line">    <span class="title function_">print</span>(n)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Note: This example is language independent and will focus on the concept of memory. Each language will have differences in how memory is managed</strong>                 </p><p>No contents showing, check PDF              </p><h2 id="Stack-Memory"><a href="#Stack-Memory" class="headerlink" title="Stack Memory"></a>Stack Memory</h2><ul><li>Only “primitive” types are stored in stack memory<ul><li>Double &#x2F; Float</li><li>Int &#x2F; Long &#x2F; Short</li><li>Char</li><li>Byte</li><li>Boolean</li></ul></li><li>Values corresponding to Java primitives<ul><li>Compiler converts these objects to primitives in Java Byte Code</li></ul></li></ul><h2 id="Memory-Heap"><a href="#Memory-Heap" class="headerlink" title="Memory Heap"></a>Memory Heap</h2><p>No contents showing, check PDF             </p><h1 id="Lecture-Question"><a href="#Lecture-Question" class="headerlink" title="Lecture Question"></a>Lecture Question</h1><p><strong>Question:</strong> In a package named “physics” create a Scala class named “PhysicsVector” with the following:              </p><ul><li>A constructor that takes 3 <strong>var</strong>iables of type Double named “x”, “y”, and “z”</li><li>A method named “multiplyByConstant” that takes a Double and returns Unit. This method multiplies x, y, and z by the input<ul><li>Be sure to update the state variables of the object when this method is called</li><li>Example: If a vector with x, y, and z of (2.0, 0.0, -1.5) has multiplyByConstant(2.0) called on it, it’s state will become (4.0, 0.0, -3.0)</li></ul></li><li>A method named “addVector” that takes a PhysicsVector and returns Unit. This method adds the values of x, y, and z of the input vector to the state variables of the calling vector<ul><li>Example: If a vector with x, y, and z of (2.0, 0.0, -1.5) has addVector(otherVector) called on it where otherVector is (-3.5, 0.4, -1.0), it’s state will become (-1.5, 0.4, -2.5)</li></ul></li></ul><p><strong>Testing:</strong> In a package named “tests” create a Scala class named “TestVector” as a<br>test suite that tests <strong>all</strong> the functionality listed above</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> CSE116 </category>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSE116的学习笔记-Lec#5:Object &amp; Class</title>
      <link href="/cn/Object-Class/"/>
      <url>/cn/Object-Class/</url>
      
        <content type="html"><![CDATA[<h1 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h1><ul><li>Objects have State and Behavior</li><li>State &#x2F; Variables<ul><li>Objects store their state in variables</li><li>[Vocab]Often called fields, member variables, or instance variable</li></ul></li><li>Behavior &#x2F; Functions<ul><li>Objects contains functions that can depend on its state</li><li>[Vocab]When a function is part of an object it’s called a <strong>method</strong></li></ul></li></ul><h1 id="Object-with-State"><a href="#Object-with-State" class="headerlink" title="Object with State"></a>Object with State</h1><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ObjectWithState</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//state of the object</span></span><br><span class="line">    <span class="keyword">var</span> x: <span class="type">Int</span> = <span class="number">10</span></span><br><span class="line">    <span class="keyword">var</span> y: <span class="type">Int</span> = <span class="number">7</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Behavior of the object</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">doubleX</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">this</span>.x *= <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Any variale outside of all methods is part of the state of the object</li><li>Keyword <strong>this</strong> stores a reference to the enclosing object</li><li>Use this.<variable_name> to access state from within the object</li><li>Declare variables using <strong>var</strong> if the value can change</li><li>Declare variables using <strong>val</strong> to prevent the value from changing<ul><li>Changing a value declared with val will cause an error</li></ul></li><li>The variables defining the state of an object have many different names<ul><li>Instance variables</li><li>Member variables</li><li>Fields</li><li>State variables</li></ul></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ObjectMian</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="type">ObjectWithState</span>.doubleX()</span><br><span class="line">        println(<span class="type">ObjectWithState</span>.x)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Any code with access to an object can also access it’s state &#x2F; behavior with the dot notation</li><li>Can also change the state of an object</li></ul><p><strong>Every value in Scala is an object!</strong></p><h1 id="Classes"><a href="#Classes" class="headerlink" title="Classes"></a>Classes</h1><ul><li>Classes are templates for creating objects with similar state and behavior<ul><li>Objects are <strong>instantiated</strong> from classes using the keyword <strong>new</strong></li></ul></li><li>Used to create many objects<ul><li>Each object can have a different state</li><li>Each has its own copies of the state variables</li></ul></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span>(<span class="params">val description: <span class="type">String</span>, var price: <span class="type">Double</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timesPurchased: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">purchase</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">this</span>.timePurchased += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onSale</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">this</span>.price *= <span class="number">0.8</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Define a class to represent an item in a store</li><li>State and behavior is defined the same way as objects</li><li>We define one state variable to track the number of times this item was purchased along with a method &#x2F; behavior to purchase an item</li><li>We define more behavior to mark an item as on sale by reducing its price by 20%.</li><li>Classes also contain special methods called constructors</li><li>This method is called when a new object is created using this class</li><li>Any code calling the constructor can sue its parameters to set the initial state of the created object</li><li>[Scala] All constructor parameters become state variables<ul><li>Use <strong>var</strong> in the constructor id the state variable can change</li></ul></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ItemMain</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printPrice</span></span>(item: <span class="type">Item</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        println(<span class="string">&quot;Current price of &quot;</span> + item.description + <span class="string">&quot; is: $&quot;</span> + item.price)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> cereal: <span class="type">Item</span> = <span class="keyword">new</span> <span class="type">Item</span>(<span class="string">&quot;cereal&quot;</span>, <span class="number">3.0</span>)</span><br><span class="line">        <span class="keyword">val</span> milk: <span class="type">Item</span> = <span class="keyword">new</span> <span class="type">Item</span>(<span class="string">&quot;milk&quot;</span>, <span class="number">2.0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Change state using behavior</span></span><br><span class="line">        cereal.purchase()</span><br><span class="line">        cereal.onSale()</span><br><span class="line">        cereal.purchase()</span><br><span class="line"></span><br><span class="line">        println(cereal.decription + <span class="string">&quot; has been purchased &quot;</span> + cereal.timePurchaed + <span class="string">&quot; times&quot;</span>)</span><br><span class="line">        printPrice(cereal)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Change state directly</span></span><br><span class="line">        milk.price = <span class="number">1.5</span></span><br><span class="line"></span><br><span class="line">        printPrice(milk)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>Call a constructor using the <strong>new</strong> keyword</p></li><li><p>The constructor returns a reference to the created class of the type of the class</p></li><li><p>We have two different object of type item</p></li><li><p>cereal and milk have their own copies of each instance variable</p></li><li><p>Int, Double, Boolean, List, Array, Map</p><ul><li>Are all classes</li><li>We use these classes to creat objects</li><li>var list: List[Int] &#x3D; List(2, 3, 4)</li></ul></li><li><p>Create objects by calling the constructor for that class</p></li><li><p>List is setup in a way that we don’t use <strong>new</strong></p></li><li><p>For our classes we will use the <strong>new</strong> keyword</p></li></ul><h1 id="Something-about-homework"><a href="#Something-about-homework" class="headerlink" title="Something about homework"></a>Something about homework</h1><ul><li>Method parameters, including constructor, can have default values<ul><li>Any missing arguments are set to the default value</li><li>Can define a toSting method to print an object with custom formatting<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhysicsVector</span>(<span class="params">var x: <span class="type">Double</span> = 0.0, var y: <span class="type">Double</span> = 0.0, var z: <span class="type">Double</span> = 0.0</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span></span>: <span class="type">String</span> = &#123;</span><br><span class="line">        <span class="string">&quot;(&quot;</span> + x + <span class="string">&quot;, &quot;</span> + y + <span class="string">&quot;, &quot;</span> + z + <span class="string">&quot;)&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> vector: <span class="type">PhysicsVector</span> = <span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">4.0</span>, <span class="number">-3.5</span>, <span class="number">0.7</span>)</span><br><span class="line"><span class="comment">// (4.0, -3.5, 0.7)</span></span><br><span class="line"><span class="keyword">val</span> vector: <span class="type">PhysicsVector</span> = <span class="keyword">new</span> <span class="type">PhysicsVector</span>(<span class="number">-6.0</span>)</span><br><span class="line"><span class="comment">// (-6.0, 0.0, 0.0)</span></span><br><span class="line"><span class="keyword">val</span> vector: <span class="type">PhysicsVector</span> = <span class="keyword">new</span> <span class="type">PhysicsVector</span>()</span><br><span class="line"><span class="comment">// (0.0, 0.0, 0.0)</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="Testing-Classes-Demo"><a href="#Testing-Classes-Demo" class="headerlink" title="Testing Classes Demo"></a>Testing Classes Demo</h1><p>……<br>Nothing to show.<br>…… </p><h1 id="Lecture-Question"><a href="#Lecture-Question" class="headerlink" title="Lecture Question"></a>Lecture Question</h1><p><strong>Question:</strong> In a package named “rhymes” create a Scala <strong>class</strong> named “Word” with the following:                        </p><ul><li>A constructor that takes a <strong>val</strong>ue of type List of Strings representing the sounds of the word with each sound as a separate element in the list<ul><li>For more information on sounds, see the Rhyming Dictionary HW handout</li></ul></li><li>A method named “alliterationLength” that takes a Word as a parameter and returns an Int. This method returns the number of sounds at the beginning of the 2 words that match<ul><li>Ex. The Lists of sounds <ul><li>List(“K”, “AH0”, “L”, “AE1”, “M”, “AH0”, “T”, “AH0”, “S”) and </li><li>List(“K”, “AH0”, “L”, “IH1”, “P”, “S”, “OW2”) </li><li>have an alliteration length of 3 since the first 3 sounds are identical</li></ul></li></ul></li></ul><p><strong>Testing:</strong>  In a package named “tests” create a Scala class named “TestWords” as a test suite that tests the functionality listed above                   </p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> CSE116 </category>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EE202的学习笔记-Lec#1:Basic Components and Circuit Variables</title>
      <link href="/cn/EE-202-1/"/>
      <url>/cn/EE-202-1/</url>
      
        <content type="html"><![CDATA[<p>EE-202<br>Copy Right ©️ ：Farah Vandrevala<br>EE202LRA1:Circuit Analysis:220910582    </p><h1 id="Basic-Components-and-Circuit-Variables"><a href="#Basic-Components-and-Circuit-Variables" class="headerlink" title="Basic Components and Circuit Variables"></a>Basic Components and Circuit Variables</h1><h2 id="Circuit-Terminology"><a href="#Circuit-Terminology" class="headerlink" title="Circuit Terminology"></a>Circuit Terminology</h2><ol><li><p>Electric: Mathematical model that approximates the behavior of a actual electical system.     </p></li><li><p>Electric Charge(Q): Charge conservation gener governs the working of electrival circuits. Charge(Q),measured in Coulum (C)   </p></li><li><p>Current(I): Rate of flow of change. measured in Ampere(A).<br>i &#x3D; dQ &#x2F; dt &#x3D; Q &#x2F; t<br>1A &#x3D; 1C &#x2F; 1S     </p></li><li><p>Voltage(V) (Potential difference): Force that causes current to flow from higher potential point to lower potential point.<br>Vab &#x3D; Va - Vb<br>Amount of work done (energy expended) to move charge is voltage.<br>V &#x3D; dW &#x2F; dQ &#x3D; W &#x2F; Q    </p></li><li><p>Power(P): Rate at which energy is expended. measured in Watts(W).<br>Voltage &amp; Current are mesureable variables.<br>P &#x3D; dW &#x2F; dt &#x3D; W &#x2F; t &#x3D; dW &#x2F; dq X dq &#x2F; dt<br>P &#x3D; V * I<br>1W &#x3D; 1V * 1A     </p></li><li><p>Energy(W): the cost of … , measured in Joules(J).<br>W &#x3D; V * Q</p></li></ol><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><h4 id="P1"><a href="#P1" class="headerlink" title="P1"></a>P1</h4><p>If 5A of constant current passes through a conductor, how many electrons pass through a given point in 1 minute?   </p><p>Given:   </p><ul><li>i &#x3D; 5A</li><li>t &#x3D; 1min</li></ul><p>Find:    </p><ul><li>number of e, e &#x3D; -1.6 * 10^19 C</li></ul><p>Know:</p><ul><li>Amount of charge on each electron</li></ul><p>i &#x3D; q &#x2F; t<br>q &#x3D; i * t &#x3D; 5A * 60s &#x3D; 300C    </p><p>Verify: </p><ul><li>Balance the units</li></ul><p>e- &#x3D; q &#x2F; |e-| &#x3D; 1.875 * 10^21 electrons &#x3D; 300C &#x2F; 1.6 * 10^19 C    </p><h4 id="P2"><a href="#P2" class="headerlink" title="P2"></a>P2</h4><p>In a circuit, 9.25 uJ of energy is needed to move 0.5 uC of charge from point A to point B. What is the voltage between the points?    </p><p>Given: </p><ul><li>W &#x3D; 9.25 uJ   </li><li>q &#x3D; 0.5 uC</li></ul><p>Find:</p><ul><li>Vab &#x3D; W &#x2F; Q &#x3D; 9.25 * 10^-6 J &#x2F; 0.5 * 10^-6 C &#x3D; 18.5 V</li></ul><p>Verify:  </p><ul><li>Balance units 1V &#x3D; 1J &#x2F; 1C</li></ul><h4 id="P3"><a href="#P3" class="headerlink" title="P3"></a>P3</h4><p>A 120V battery is connected across a 100W bulb. How many electrons pass through the bulb in 1 hour?    </p><p>Given: </p><ul><li>V &#x3D; 120V</li><li>P &#x3D; 100W</li><li>t &#x3D; 1h</li></ul><p>Find: </p><ul><li>number of e<ul><li>Need: Total charge<ul><li>Current</li></ul></li></ul></li></ul><p>Know:</p><ul><li>P &#x3D; V * I</li><li>I &#x3D; P &#x2F; V &#x3D; 100W &#x2F; 120V &#x3D; 5&#x2F;6A</li><li>I &#x3D; Q &#x2F; t &#x3D; I * t &#x3D; 5&#x2F;6 * 60s * 60min &#x3D; 3000C</li><li>#of e- &#x3D; Q &#x2F; |e-| &#x3D; 3000C &#x2F; 1.6 * 10^-19C &#x3D; 1.875 * 10^22 e</li></ul><h4 id="P4"><a href="#P4" class="headerlink" title="P4"></a>P4</h4><p>A smartphone has a 3.8V battery whose charge capacity is 1.5mAh. One full cycle of charge will last 12h on talk time, and 10days on stanby. How mauch power is consumed in each case?     </p><p>q &#x3D; i * t<br>1C &#x3D; 1A * 1S &#x3D; 1A * 3600s &#x3D; 1Ah     </p><p>Given: </p><ul><li>V &#x3D; 3.8V</li><li>Q &#x3D; 1.5mAh</li><li>Talk time mode: t &#x3D; 12h</li></ul><p>Find:   </p><ul><li>P</li></ul><p>Know:   </p><ul><li>W &#x3D; V * Q </li><li>P &#x3D; W &#x2F; t</li><li>P &#x3D; (V * Q) &#x2F; t &#x3D; [3.8V * (1.5 * 10^-3Ah)] &#x2F; 12h &#x3D; 475 * 10^-6W &#x3D; 475 mW</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> EE202 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EE202 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSE116的学习笔记-Lec#3:Scala Unit Testing</title>
      <link href="/cn/Unit-Testing/"/>
      <url>/cn/Unit-Testing/</url>
      
        <content type="html"><![CDATA[<h1 id="Unit-Testing"><a href="#Unit-Testing" class="headerlink" title="Unit Testing"></a>Unit Testing</h1><h2 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h2><ul><li>How do you know if your code is correct?</li><li>Submit to AutoLab?<ul><li>Does not exist outside of class</li><li>Does not exist for your project</li></ul></li></ul><h2 id="Recall"><a href="#Recall" class="headerlink" title="Recall"></a>Recall</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Conditional</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">computeSize</span></span>(input: <span class="type">Double</span>): <span class="type">String</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> large: <span class="type">Double</span> = <span class="number">60.0</span></span><br><span class="line">        <span class="keyword">val</span> medium: <span class="type">Double</span> = <span class="number">30.0</span></span><br><span class="line">        <span class="keyword">if</span> (input &gt;= large) &#123;</span><br><span class="line">            <span class="string">&quot;large&quot;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (input &gt;= medium) &#123;</span><br><span class="line">            <span class="string">&quot;medium&quot;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="string">&quot;small&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>How do we test this function to verufy that it’s correct?</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Conditional</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">computeSize</span></span>(input: <span class="type">Double</span>): <span class="type">String</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> large: <span class="type">Double</span> = <span class="number">60.0</span></span><br><span class="line">        <span class="keyword">val</span> medium: <span class="type">Double</span> = <span class="number">30.0</span></span><br><span class="line">        <span class="keyword">if</span> (input &gt;= large) &#123;</span><br><span class="line">            <span class="string">&quot;large&quot;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (input &gt;= medium) &#123;</span><br><span class="line">            <span class="string">&quot;medium&quot;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="string">&quot;small&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        println(computeSize(<span class="number">70.0</span>))</span><br><span class="line">        println(computeSize(<span class="number">50.0</span>))</span><br><span class="line">        println(computeSize(<span class="number">10.0</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Call the method from main</li><li>Print the results</li><li>Manaually verify</li></ul><h2 id="What-about-Large-Projects"><a href="#What-about-Large-Projects" class="headerlink" title="What about Large Projects?"></a>What about Large Projects?</h2><ul><li><p>There may be 100’s of files and 1000’s of methods</p></li><li><p>Any change in a function might break any code</p></li><li><p>Will you manually verify all that code for each change?</p></li><li><p>Unit Testing</p><ul><li>Automate testing</li><li>Provide structure to testing</li></ul></li></ul><h2 id="Unit-Testing-1"><a href="#Unit-Testing-1" class="headerlink" title="Unit Testing"></a>Unit Testing</h2><ul><li>Run a serious of tests on your code</li><li>If the code is correct, all test should pass</li><li>If the code is incorrect, at least one test should fail</li><li>A set of test should test every possible error that could occur</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tests</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.scalatest._</span><br><span class="line"><span class="keyword">import</span> example.<span class="type">Conditional</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestComputeDize</span> <span class="title">extend</span> <span class="title">FunSuite</span> </span>&#123;</span><br><span class="line">    test(<span class="string">&quot;Doubles are checked for size in each category&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">val</span> largeDouble: <span class="type">Double</span> = <span class="number">70.0</span></span><br><span class="line">        <span class="keyword">val</span> mediumDoubleUpperBound: <span class="type">Double</span> = <span class="number">59.99</span></span><br><span class="line">        <span class="keyword">val</span> mediumDoubleLowerBound: <span class="type">Double</span> = <span class="number">30.00</span></span><br><span class="line">        <span class="keyword">val</span> smallDouble: <span class="type">Double</span> = <span class="number">10.0</span></span><br><span class="line"></span><br><span class="line">        assert(<span class="type">Conditional</span>.computeSize(largeDouble) == <span class="string">&quot;large&quot;</span>, largeDouble)</span><br><span class="line">        assert(<span class="type">Conditional</span>.computeSize(mediumDoubleUpperBound) == <span class="string">&quot;medium&quot;</span>, mediumDoubleUpperBound)</span><br><span class="line">        assert(<span class="type">Conditional</span>.computeSize(mediumDoubleLowerBound) == <span class="string">&quot;medium&quot;</span>, mediumDoubleLowerBound)</span><br><span class="line">        assert(<span class="type">Conditional</span>.computeSize(smallDouble) == <span class="string">&quot;small&quot;</span>, smallDouble)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Use Maven to download scalatest</li><li>Click Maven in the IntelliJ sidebar to interact with pom.xml</li></ul><p>Create a new test that will be executed when this file is ran        </p><p>No main method      </p><p>FunSuite controls execution instead of main     </p><p>Is this enough testing?    </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tests</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.scalatest._</span><br><span class="line"><span class="keyword">import</span> example.<span class="type">Conditional</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestComputeDize</span> <span class="title">extend</span> <span class="title">FunSuite</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    test(<span class="string">&quot;Use many test cases for each category&quot;</span>)&#123;</span><br><span class="line">        <span class="comment">// notice largeDouble must be declared with var we change its value</span></span><br><span class="line">        <span class="keyword">var</span> largeDoubles: <span class="type">List</span>[<span class="type">Double</span>] = <span class="type">List</span>(<span class="number">60.0</span>, <span class="number">60.01</span>, <span class="number">70.0</span>, <span class="number">90.0</span>, <span class="number">1000.0</span>)</span><br><span class="line">        <span class="keyword">val</span> mediumDoubles: <span class="type">List</span>[<span class="type">Double</span>] = <span class="type">List</span>(<span class="number">59.9</span>, <span class="number">30.0</span>, <span class="number">30.01</span>, <span class="number">40.0</span>, <span class="number">50.0</span>)</span><br><span class="line">        <span class="keyword">val</span> smallDoubles: <span class="type">List</span>[<span class="type">Double</span>] = <span class="type">List</span>(<span class="number">29.99</span>, <span class="number">20.0</span>, <span class="number">10.0</span>, <span class="number">0.0</span>, <span class="number">-100.0</span>, <span class="number">-1000.0</span>)</span><br><span class="line"></span><br><span class="line">        largeDoubles = largeDoubles :+ <span class="number">10000.0</span> <span class="comment">// Example of adding an element to a List</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(largeDouble &lt;- largeDoubles)&#123;</span><br><span class="line">            assert(<span class="type">Conditional</span>.computeSize(largeDouble) == <span class="string">&quot;large&quot;</span>, largeDouble)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(mediumDouble &lt;- mediumDoubles)&#123;</span><br><span class="line">            assert(<span class="type">Conditional</span>.computeSize(mediumDouble) == <span class="string">&quot;large&quot;</span>, mediumDouble)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(smallDouble &lt;- smallDoubles)&#123;</span><br><span class="line">            assert(<span class="type">Conditional</span>.computeSize(smallDouble) == <span class="string">&quot;large&quot;</span>, smallDouble)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Use data structure to run many test cases       </p><h2 id="Unit-Testing-Objectives"><a href="#Unit-Testing-Objectives" class="headerlink" title="Unit Testing Objectives"></a>Unit Testing Objectives</h2><ul><li>Each homework, and other places in the course, will have objectives that require through testing</li><li>When these objectives are graded, your test suite is ran:<ul><li>Against your solution</li><li>Against a correct solution stored on the server</li><li>Against a variety of incorrect solution stored on the server</li></ul></li><li>Your test suite should pass on both your solution and the correct solution</li><li>Your test suite should fail on all the incorrect solutions</li></ul><h2 id="Maven-Dependency-Management"><a href="#Maven-Dependency-Management" class="headerlink" title="Maven: Dependency Management"></a>Maven: Dependency Management</h2><ul><li>To run this testing code, we used an external library named Scalatest<ul><li>Scalatest does not come with Scala</li><li>We must download it before running tests</li></ul></li><li>To manage external libraies, we’ll use Maven<ul><li>List all dependancies(libraies)in a file named pom.xml</li><li>Save pom.xml in the root directory of your project</li><li>Use Maven to download all dependancies</li></ul></li><li>The pom.xml is similar to the requirements.txt file we used in Python</li></ul><h2 id="Lecture-Question"><a href="#Lecture-Question" class="headerlink" title="Lecture Question"></a>Lecture Question</h2><p><strong>Method:</strong> In a package named “lecture” create an object named “FirstObject” with a metho named “computeShippingCost” that takes a Double representing the weight of a package as a paramater and returns a Double representing the shipping cost of the package.</p><p>The shipping cost is ($)5 + 0.25 for each pound over 30.      </p><p><strong>Unit Testing:</strong> In a package named “tests” create a class &#x2F; file named “UnitTesting” as a test suite that tests the computeShipping Cost method.     </p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> CSE116 </category>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSE116的学习笔记-Lec#2:Scala Basics cont&#39;</title>
      <link href="/cn/Scala-Basics-cont/"/>
      <url>/cn/Scala-Basics-cont/</url>
      
        <content type="html"><![CDATA[<p>Lecture #2  9&#x2F;4<br>授课时间：2020-09-04 13:50:00</p><h1 id="Scala-Basics-cont’"><a href="#Scala-Basics-cont’" class="headerlink" title="Scala Basics cont’"></a>Scala Basics cont’</h1><h2 id="Scala-Types"><a href="#Scala-Types" class="headerlink" title="Scala Types"></a>Scala Types</h2><ul><li>All values in Scala are objects<ul><li>Objects contain variables and methods</li><li>No primitive values in Scala</li></ul></li></ul><h3 id="Int"><a href="#Int" class="headerlink" title="Int"></a>Int</h3><ul><li>A whole number</li><li>32 bit representation</li><li>-2147483648 to 2147483648<ul><li>values out side this range will overflow</li></ul></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> a: <span class="type">Int</span> = <span class="number">27397129</span></span><br><span class="line">println(a)</span><br></pre></td></tr></table></figure><h3 id="Long"><a href="#Long" class="headerlink" title="Long"></a>Long</h3><ul><li>A whole number (like int)</li><li>64 bit representation</li><li>-9223372036854775808 to 9223372036854775808</li><li>Useful when you expect values that would overflow an Int</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> a: <span class="type">Long</span> = <span class="number">27397129</span></span><br><span class="line">println(a)</span><br></pre></td></tr></table></figure><h3 id="Double"><a href="#Double" class="headerlink" title="Double"></a>Double</h3><ul><li>Number with a whole number and a decimal portion</li><li>64 bit representataion</li><li>Values are truncated to fit in 64 bit<ul><li>Loss of precision!</li><li>0.1 doesn’t exit!</li></ul></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> epsilon: <span class="type">Double</span> = <span class="number">0.00000001</span></span><br><span class="line"><span class="keyword">val</span> b: <span class="type">Double</span> = <span class="number">0.1</span></span><br><span class="line"><span class="keyword">val</span> c: <span class="type">Double</span> = b * <span class="number">3</span></span><br><span class="line"><span class="keyword">val</span> expected: <span class="type">Double</span> = <span class="number">0.3</span></span><br><span class="line">println(<span class="type">Math</span>.abs(c - <span class="number">0.3</span>)&lt; epsilon)</span><br></pre></td></tr></table></figure><h3 id="Boolean-and-Unit"><a href="#Boolean-and-Unit" class="headerlink" title="Boolean and Unit"></a>Boolean and Unit</h3><ul><li>Boolean <ul><li>true or false</li></ul></li><li>Unit<ul><li>Nothing</li><li>Used to indicate a method &#x2F; function that does not return a value</li></ul></li></ul><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><ul><li>A sequence of characters (type Char)</li><li>Declared with double quotes <code>&quot; &quot;</code><ul><li>val s: String &#x3D; “nice”</li></ul></li><li>Many useful methods.<ul><li>startsWith()</li><li>length() - number of String</li><li>.split() - Separates this String by given String<ul><li>line.split(“#”)</li></ul></li></ul></li></ul><h2 id="Scala-Type-Conversions"><a href="#Scala-Type-Conversions" class="headerlink" title="Scala Type Conversions"></a>Scala Type Conversions</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Types</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Declaring variable</span></span><br><span class="line">        <span class="keyword">var</span> anInt: <span class="type">Int</span> = <span class="number">10</span></span><br><span class="line">        <span class="keyword">var</span> aDouble: <span class="type">Double</span> = <span class="number">5.8</span></span><br><span class="line">        <span class="keyword">var</span> aBoolean: <span class="type">Boolean</span> = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">var</span> aString: <span class="type">String</span> = <span class="string">&quot;6.3&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Converting variable types</span></span><br><span class="line">        <span class="keyword">var</span> anotherDouble: <span class="type">Double</span> = aString.toDouble</span><br><span class="line">        <span class="keyword">var</span> anotherString: <span class="type">String</span> = anInt.toString</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Truncates the decimal. anotherInt == 5</span></span><br><span class="line">        <span class="keyword">var</span> anotherInt: <span class="type">Int</span> = aDouble.toInt</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="For-Loop"><a href="#For-Loop" class="headerlink" title="For Loop"></a>For Loop</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (&lt;variable_name&gt; &lt;- &lt;data_structure&gt;)&#123;</span><br><span class="line">    &lt;loop_body&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Loop</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printOneTo</span></span>(n: <span class="type">Int</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">for</span>(i &lt;- <span class="number">1</span> to n)&#123;</span><br><span class="line">            println(<span class="string">&quot;i == &quot;</span> + i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printOneToAlternate</span></span>(n: <span class="type">Int</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> numbers: <span class="type">Range</span> = <span class="number">1</span> to n</span><br><span class="line">        <span class="keyword">for</span>(i &lt;- numbers) &#123;</span><br><span class="line">            println(<span class="string">&quot;i == &quot;</span> + i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        printOneTo(<span class="number">10</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="For-Loop-String-Example"><a href="#For-Loop-String-Example" class="headerlink" title="For Loop + String Example"></a>For Loop + String Example</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">StringSplitter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">computPercentTrue</span></span>(line: <span class="type">String</span>): <span class="type">Double</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> splits: <span class="type">Array</span>[<span class="type">String</span>] = line.split(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">        <span class="keyword">var</span> totalCount: <span class="type">Double</span> = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> trueCount: <span class="type">Double</span> = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> (value &lt;- splits) &#123;</span><br><span class="line">            <span class="keyword">val</span> valueAsBoleean: <span class="type">Boolean</span> = value.toBoolean</span><br><span class="line">            <span class="keyword">if</span> (valueAsBoleean)&#123;</span><br><span class="line">                trueCount += <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            totalCount += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        trueCount / totalCount</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> testInput = <span class="string">&quot;true;false;true;true;ture&quot;</span></span><br><span class="line">        <span class="keyword">val</span> percenTrue = computePercentTrue(testInput) <span class="comment">// expecting 0.8</span></span><br><span class="line">        println(<span class="string">&quot;Percentage true == &quot;</span> + percentTrue)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Reading-Files"><a href="#Reading-Files" class="headerlink" title="Reading Files"></a>Reading Files</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.io.&#123;<span class="type">BufferedSource</span>, <span class="type">Source</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">FileReader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">convertFileToString</span></span>(filename: <span class="type">String</span>): <span class="type">String</span> = &#123;</span><br><span class="line">        <span class="keyword">var</span> contents: <span class="type">String</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">val</span> file: <span class="type">BufferedSource</span> = <span class="type">Source</span>.fromFile(filename)</span><br><span class="line">        <span class="keyword">for</span> (line &lt;- file.getLines()) &#123;</span><br><span class="line">            contents += line + <span class="string">&quot;\n&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        contents</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> filename = <span class="string">&quot;data/testFile.txt&quot;</span></span><br><span class="line">        <span class="keyword">val</span> contents = convertFileToString(filename)</span><br><span class="line">        println(contents)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Data-Structures"><a href="#Data-Structures" class="headerlink" title="Data Structures"></a>Data Structures</h2><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><ul><li>Sequential<ul><li>One continuous block of memory</li><li>Random access based on memory address<ul><li>address &#x3D; first_address + (element_size * index)</li></ul></li></ul></li><li>Fixed Size<ul><li>Since memory adjacent to the block may be usedd</li><li><strong>Efficient when you konw how many elements you’ll need to store</strong></li></ul></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">arrayExample</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//Create new Array of Int</span></span><br><span class="line">    <span class="keyword">val</span> arr: <span class="type">Array</span>[int] = <span class="type">Array</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Change a value by index</span></span><br><span class="line">    arr(<span class="number">1</span>) = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Access a value by index</span></span><br><span class="line">    <span class="keyword">val</span> x: <span class="type">Int</span> = arr(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Iterate over elements</span></span><br><span class="line">    <span class="keyword">for</span> (element &lt;- arr) &#123;</span><br><span class="line">        println(element)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Iterate over indices</span></span><br><span class="line">    <span class="keyword">for</span> (index &lt;- <span class="number">0</span> to (arr.length - <span class="number">1</span>)) &#123;</span><br><span class="line">        println(index)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Iterate over indices - alternate</span></span><br><span class="line">    <span class="keyword">for</span> (index &lt;- arr.indices) &#123;</span><br><span class="line">        println(index)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><ul><li>Sequential<ul><li>Spread across memory</li><li>Each element knows the memory address of the next element<ul><li>Follow the addresses to find each element</li></ul></li></ul></li><li>Variable Size<ul><li>Store new element anywhere in memory</li><li>Add the new memory address to the last element<ul><li>Or new element stores address of first element</li></ul></li></ul></li><li>Values cannot change [In Scala]</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listExample</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// Create new Array of Int</span></span><br><span class="line">    <span class="keyword">var</span> list: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Access the first element</span></span><br><span class="line">    <span class="keyword">val</span> x: <span class="type">Int</span> = list.head</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Access a value by position</span></span><br><span class="line">    <span class="keyword">val</span> y: <span class="type">Int</span> = list.apply(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add an element to the end of the list (append)</span></span><br><span class="line">    list = list :+ <span class="number">50</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add an element to the beginning of the list (prepend)</span></span><br><span class="line">    list = <span class="number">70</span> :: list</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Iteration</span></span><br><span class="line">    <span class="keyword">for</span> (element &lt;- list) &#123;</span><br><span class="line">        println(element)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><ul><li>Key-Value Store<ul><li>Values stroed at keys instead of indices</li><li>Multiple different implementations<ul><li>Default is HashMap (CSE250 topic)</li></ul></li></ul></li><li>Variable Size</li><li>Variable Values</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mapExample</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// Create new Map of Int to Int</span></span><br><span class="line">    <span class="keyword">var</span> myMap: <span class="type">Mao</span>[<span class="type">Int</span>, <span class="type">Int</span>] = <span class="type">Map</span>(<span class="number">2</span> -&gt; <span class="number">4</span>, <span class="number">3</span> -&gt; <span class="number">9</span>, <span class="number">4</span> -&gt; <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add an key-value pair</span></span><br><span class="line">    myMap = myMap + (<span class="number">5</span> -&gt; <span class="number">25</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Access a value by key (Crashes if key not in map)</span></span><br><span class="line">    <span class="keyword">val</span> x: <span class="type">Int</span> = myMap(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Accesss a value by key with default value if key not in map</span></span><br><span class="line">    <span class="keyword">val</span> y: <span class="type">Int</span> = myMap.getOrElse(<span class="number">100</span>, <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Iteration</span></span><br><span class="line">    <span class="keyword">for</span> ((key, value) &lt;- myMap) &#123;</span><br><span class="line">        println(<span class="string">&quot;value &quot;</span> + vlue + <span class="string">&quot; stored at ket &quot;</span> + key)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Lecture-Question"><a href="#Lecture-Question" class="headerlink" title="Lecture Question"></a>Lecture Question</h2><p>In a package named “lecture” create an object named “LectureQuestion” with a method named “fileSum” that takes a filename as a String and returns an Int which is the sum of the values in the file.     </p><p>The input file will contain multiple lines each with multiple integer values separated by the ‘#’ character     </p><p>Return the sum of all of the integer values in the file   </p><p>You may assume that the file exists and is properly formatted    </p><p>Sample file contents:   </p><p>——Sample File Contents——<br>3#1#8<br>12#9#25#10<br>-2#12<br>1#2<br>—————End————–</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> CSE116 </category>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决域名覆盖的问题</title>
      <link href="/cn/CNAME/"/>
      <url>/cn/CNAME/</url>
      
        <content type="html"><![CDATA[<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>以我用GitHub.io搭我的博客为例，GitHub会生成一个CNAME文件来进行域名重定向。但是当你使用 <code>hexo d</code>指令是会导致建好的CNAME文件被覆盖 &#x2F; 删除。这时你又要重新去生成CNAME文件，十分的繁琐。   </p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>问题也很好解决，既然hexo默认没有 <code>CNAME</code> 文件，那我们在本地生成一个 local <code>CNAME</code> 即可解决问题，步骤也非常的简单。   </p><p>首先在终端cd到你的博客根目录，<br>接着cd到 <code>source</code> 文件夹，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="built_in">source</span></span><br></pre></td></tr></table></figure><p>输入以下指令生成CNAME文件：   </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> CNAME</span><br></pre></td></tr></table></figure><p>创建完成后使用 <code>vim</code> 指令打开 CNAME文件，并输入你的自定义域名：   </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim CNAME</span><br></pre></td></tr></table></figure><p>修改完 <code>CNAME</code> 文件保存退出即可，后续再使用 <code>hexo d</code> 时就不会出现这种情况。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> 域名 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> CNAME </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSE191的学习笔记</title>
      <link href="/cn/CSE191/"/>
      <url>/cn/CSE191/</url>
      
        <content type="html"><![CDATA[<p>CSE-191 Discrete Structures<br>Copy right©️ : Andrew Hughes (SUNY at Buffalo)</p><h1 id="Introduction-to-Propositional-Logic-9-2-Lec-1"><a href="#Introduction-to-Propositional-Logic-9-2-Lec-1" class="headerlink" title="Introduction to Propositional Logic (9&#x2F;2 Lec#1)"></a>Introduction to Propositional Logic (9&#x2F;2 Lec#1)</h1><h2 id="Outline"><a href="#Outline" class="headerlink" title="Outline"></a>Outline</h2><ul><li>Propositional Logic<ul><li><a href="#propositional-Logic">Propositions</a></li><li><a href="#logical-operators">Logical Operators</a></li><li><a href="#truth-tables">Truth Tables</a></li></ul></li></ul><h2 id="The-Foundations-Lagic-and-Proofs"><a href="#The-Foundations-Lagic-and-Proofs" class="headerlink" title="The Foundations: Lagic and Proofs"></a>The Foundations: Lagic and Proofs</h2><ul><li>Rules of logic specify the precise meanings of mathematical statements</li><li>Logic is the basis of all correct mathematical arguments (i.e.,proofs)</li><li>Important in all of CS and CEN:<ul><li>Problem soving</li><li>Software engineering (requirements specification, verification)</li><li>Databases (relational algebras, SQL)</li><li>Computer architecture (logic gates, verification)</li><li>AI (automated theorem proving, rule-based ML)</li><li>Computer security (threat modeling)</li><li>…</li></ul></li></ul><h2 id="Propositional-Logic-Why-do-we-care"><a href="#Propositional-Logic-Why-do-we-care" class="headerlink" title="Propositional Logic: Why do we care?"></a>Propositional Logic: Why do we care?</h2><p>George Boole</p><h2 id="Propositional-Logic"><a href="#Propositional-Logic" class="headerlink" title="Propositional Logic"></a>Propositional Logic</h2><p>Definition: A proposition is a declarative statement    </p><ul><li><p>Must be either TRUE or FALSE   </p></li><li><p>Cannot be both TRUE or FALSE</p></li><li><p>An opinion of a specific person is a proposition</p><ul><li>Their opinion would determine the truth value</li></ul></li><li><p>The bits 0&#x2F;1 are used for F&#x2F;T, respectively</p><ul><li>Digital logic uses 0&#x2F;1 or LOW&#x2F;HIGH or OFF&#x2F;ON</li><li>Computers use bits and logic gates for <strong>all</strong> computation</li></ul></li><li><p>Prositions:</p><ul><li>Declarative statements</li><li>Must be either true of false</li></ul></li><li><p>Non-Prositions:</p><ul><li>Questions</li><li>Commands</li><li>Statements with unassigned variables</li><li>…</li></ul></li></ul><h2 id="Prositional-Variables"><a href="#Prositional-Variables" class="headerlink" title="Prositional Variables"></a>Prositional Variables</h2><p>Definition: Propositional variables arevariables that represent propositions</p><ul><li>Commonly used letters: <em>p</em>, <em>q</em>, <em>r</em> <ul><li>Or first letter of what we mean to represent</li></ul></li><li>A propositional variable may be associated with a <strong>specific proposition</strong> or left as a placeholder for an <strong>arbitrary proposition</strong></li><li>Propositional variables and logical operators are used to form <strong>compound propositions.</strong><ul><li>Each compound prosition is a new proposition itself</li></ul></li></ul><h2 id="Logical-Operators"><a href="#Logical-Operators" class="headerlink" title="Logical Operators"></a>Logical Operators</h2><p>Logical operators allow the combination of propositions.</p><ul><li>Going forward: combine propositions to create new propositions.</li><li>Going backwards: decompose proposition into atomics.</li></ul><h3 id="Negation-operator"><a href="#Negation-operator" class="headerlink" title="Negation operator"></a>Negation operator</h3><ul><li>The proposition <em><code>-p</code></em> is read as <em><code>not p</code></em></li><li>The truth value of <em><code>-p</code></em> is the <strong>opposite</strong> of the truth value of <em><code>p</code></em></li></ul><p>Example:  </p><ul><li><em><code>p</code></em> : I like apple.</li><li><em><code>-p</code></em> : I don’t like apple.</li></ul><h3 id="Binary-logical-operators"><a href="#Binary-logical-operators" class="headerlink" title="Binary logical operators"></a>Binary logical operators</h3><p>Unary operators: Transform <strong>one proposition</strong> into another.<br>Binary operators: Combine <strong>two propositions</strong> into <strong>one compound proposition</strong>.   </p><p>The <strong>conjunction</strong> of <em><code>p</code></em>  and <em><code>q</code></em>, denoted by <em><code>p ʌ q</code></em><br><em><code>p ʌ q</code></em> means <em><code>p and q</code></em><br>it’s only TRUE when <em><code>p</code></em> &amp; <em><code>q</code></em> are <strong>both TRUE</strong>.  </p><p>The <strong>disjunction</strong> of <em><code>p</code></em>  and <em><code>q</code></em>, denoted by <em><code>p V q</code></em><br><em><code>p V q</code></em> means <em><code>p or q</code></em><br>it’s TRUE that <strong>one of them are TRUE</strong> or <strong>both TRUE</strong>.</p><p>The <strong>exclusive</strong> of <em><code>p</code></em>  or <em><code>q</code></em>, denoted by <em><code>p ⊕ q</code></em><br><em><code>p ⊕ q</code></em> means <em><code>p or q, but not both</code></em><br>it’s TRUE that <strong>one of them are TRUE</strong> but <strong>not both TRUE</strong>.   </p><p>The <strong>implication</strong> of <em><code>p</code></em>  on <em><code>q</code></em>, denoted by <em><code>p → q</code></em><br><em><code>p → q</code></em> means <em><code>p implies q</code></em> or <em><code>if p, then q</code></em><br>it’s TRUE that as long as <strong><em><code>p</code></em> is FALSE</strong> or <strong><em><code>q</code></em> is TRUE</strong>.     </p><p>The <strong>bidirectional implication</strong> between <em><code>p</code></em>  and <em><code>q</code></em>, denoted by <em><code>p ↔ q</code></em><br><em><code>p ↔ q</code></em>  means <em><code>p if and only if q</code></em><br>it’s only TRUE when <strong><em><code>p</code></em> and <em><code>q</code></em> share the same truth value</strong>.   </p><h3 id="English-Example"><a href="#English-Example" class="headerlink" title="English Example"></a>English Example</h3><p><em>p</em>: I like apple<br><em>q</em>: I like banana<br><em>p ʌ q</em>: I like apple and banana<br><em>p V q</em>: I like apple or banana    </p><p><em>p</em>: The car costs less than $100<br><em>q</em>: I will buy the car<br><em>p → q</em>: If the car costs less than $100, I’ll buy the car.   </p><h2 id="Truth-Tables-9-3-Lec-1"><a href="#Truth-Tables-9-3-Lec-1" class="headerlink" title="Truth Tables (9&#x2F;3 Lec#1)"></a>Truth Tables (9&#x2F;3 Lec#1)</h2><ul><li>List <strong>all possible combinations</strong> of tryth values for the operands.</li><li>List <strong>the resulting truth value</strong> in the rightmost column.</li></ul><h3 id="Truth-table-for-negation"><a href="#Truth-table-for-negation" class="headerlink" title="Truth table for negation"></a>Truth table for negation</h3><p>negation: The truth value of <em><code>-p</code></em> is the opposite of the truth value of <em><code>p</code></em>.   </p><p>Only two cases to consider:    </p><ul><li>Original proposition <em><code>p</code></em> is FALSE:  <ul><li>New proposition <em><code>-p</code></em> is a TRUE proposition.</li></ul></li><li>Original proposition <em><code>p</code></em> is TRUE:  <ul><li>New proposition <em><code>-p</code></em> is a FALSE proposition.</li></ul></li></ul><p>Truth table for negation:   </p><table><thead><tr><th><em>p</em></th><th><em>-p</em></th></tr></thead><tbody><tr><td>F</td><td>T</td></tr><tr><td>T</td><td>F</td></tr></tbody></table><h3 id="Number-of-binary-logic-operators"><a href="#Number-of-binary-logic-operators" class="headerlink" title="Number of binary logic operators"></a>Number of binary logic operators</h3><p>Q: We have introduced 5 binary logic operators. Are there more?<br>A: There are totally 16 binary logic operators:   </p><ul><li>For any binary operator, there are 4 rowa in its truth table.</li><li>Operator is defined by the F&#x2F;T values in the 3rd column.</li><li>Each entry in the 3rd column of the truth table has 2 possible values (F&#x2F;T).</li><li>Total number of truth tables w&#x2F; a unique 3rd column:  <ul><li>2 x 2 x 2 x 2 &#x3D; 16</li></ul></li></ul><h3 id="How-did-we-construct-the-truth-table"><a href="#How-did-we-construct-the-truth-table" class="headerlink" title="How did we construct the truth table?"></a>How did we construct the truth table?</h3><p>We need a row for each possible combination of truth values.    </p><ul><li>Need <em>2^n</em> rows, where <em>n</em> is the number of propositional variables.<ul><li>For <em>p V q</em> we have 2 variables, so we need 2^2 &#x3D; 4 rows.</li></ul></li><li>Fill half of the first column with F values, remainder with T.</li><li>In the second column:<ul><li>For each group of rows in first column: fill half with F and half with T.</li></ul></li><li>Determine truth value of new proposition in the last column.</li></ul><h3 id="Precedence-of-Operators"><a href="#Precedence-of-Operators" class="headerlink" title="Precedence of Operators"></a>Precedence of Operators</h3><table><thead><tr><th>Operator</th><th>Precedence</th></tr></thead><tbody><tr><td>()</td><td>0</td></tr><tr><td>-</td><td>1</td></tr><tr><td>ʌ</td><td>2</td></tr><tr><td>V</td><td>3</td></tr><tr><td>⊕</td><td>4</td></tr><tr><td>→</td><td>5</td></tr><tr><td>↔</td><td>6</td></tr></tbody></table><h1 id="Tautologies-and-Logical-Equivalence-9-4-Lec-2"><a href="#Tautologies-and-Logical-Equivalence-9-4-Lec-2" class="headerlink" title="Tautologies and Logical Equivalence (9&#x2F;4 Lec#2)"></a>Tautologies and Logical Equivalence (9&#x2F;4 Lec#2)</h1><p>Definitions:  </p><ul><li>A compound proposition that is always True is called a <strong>tautology</strong>. </li><li>Two propositions <em><code>p</code></em> and <em><code>q</code></em> are said to be <strong>logically equivalent</strong> if their truth tables are the same.   <ul><li>Namely, <em><code>p</code></em> and <em><code>q</code></em> are <strong>logically equivalent</strong> if and only if the proposition <em><code>p ↔ q</code></em> is a <strong>tautology</strong>.</li></ul></li><li>if <em><code>p</code></em> and <em><code>q</code></em> are <strong>logically equivalent</strong> , we write <em><code>p ≡ q</code></em> or <em><code>p ↔ q</code></em>.</li></ul><h2 id="Examples-of-Logical-Equivalence"><a href="#Examples-of-Logical-Equivalence" class="headerlink" title="Examples of Logical Equivalence"></a>Examples of Logical Equivalence</h2><p>Ex:<br>Consider the following two compound propositions: <em>p → q</em> and <em>q V -p</em>.<br>Are <em>p → q</em> and <em>q V -p</em> logically equivalent?    </p><table><thead><tr><th><em>p</em></th><th><em>q</em></th><th><em>p → q</em></th><th><em>-p</em></th><th><em>q V -p</em></th><th>(<em>p → q</em>) ↔ (<em>q V -p</em>)</th></tr></thead><tbody><tr><td>F</td><td>F</td><td><strong>T</strong></td><td>T</td><td><strong>T</strong></td><td>T</td></tr><tr><td>F</td><td>T</td><td><strong>T</strong></td><td>T</td><td><strong>T</strong></td><td>T</td></tr><tr><td>T</td><td>F</td><td><strong>F</strong></td><td>F</td><td><strong>F</strong></td><td>T</td></tr><tr><td>T</td><td>T</td><td><strong>T</strong></td><td>F</td><td><strong>T</strong></td><td>T</td></tr></tbody></table><ul><li>The columns for our propositions in question are identical.<ul><li>So (<em>p → q</em>) ↔ (<em>q V -p</em>) is a <strong>tautology</strong></li></ul></li><li>Therefore, (<em>p → q</em>) and (<em>q V -p</em>) are <strong>logically equivalent</strong>.</li></ul><h2 id="Equivalence-Laws"><a href="#Equivalence-Laws" class="headerlink" title="Equivalence Laws"></a>Equivalence Laws</h2><h3 id="DeMorgan’s-Law"><a href="#DeMorgan’s-Law" class="headerlink" title="DeMorgan’s Law"></a>DeMorgan’s Law</h3><p>-(<em>p ʌ q</em>) ≡ -<em>p</em> V -<em>q</em><br>-(<em>p V q</em>) ≡ -<em>p</em> ʌ -<em>q</em>     </p><h3 id="Law-of-Distributivity"><a href="#Law-of-Distributivity" class="headerlink" title="Law of Distributivity"></a>Law of Distributivity</h3><p><em>p</em> V (<em>q</em> ʌ <em>r</em>) ≡ (<em>p V q</em>) ʌ (<em>p V r</em>)<br><em>p</em> ʌ (<em>q</em> V <em>r</em>) ≡ (<em>p ʌ q</em>) V (<em>p ʌ r</em>)    </p><h3 id="Law-of-Contraposition"><a href="#Law-of-Contraposition" class="headerlink" title="Law of Contraposition"></a>Law of Contraposition</h3><p><em>p</em> → <em>q</em> ≡ <em>-q</em> → -<em>p</em>     </p><h3 id="Converse-and-Inverse"><a href="#Converse-and-Inverse" class="headerlink" title="Converse and Inverse"></a>Converse and Inverse</h3><h4 id="Converse"><a href="#Converse" class="headerlink" title="Converse"></a>Converse</h4><p><em>p</em> → <em>q</em> to <em>q</em> → <em>p</em>      </p><h4 id="Inverse"><a href="#Inverse" class="headerlink" title="Inverse"></a>Inverse</h4><p><em>p</em> → <em>q</em> to -<em>p</em> → -<em>q</em>     </p><h3 id="Logical-Equivalence-Rules"><a href="#Logical-Equivalence-Rules" class="headerlink" title="Logical Equivalence Rules"></a>Logical Equivalence Rules</h3><table><thead><tr><th>Equivalence</th><th>Name</th></tr></thead><tbody><tr><td><em>p</em> ʌ T ≡ <em>p</em>, <em>p</em> V F ≡ <em>p</em></td><td>Identity laws</td></tr><tr><td><em>p</em> V T ≡ T, <em>p</em> ʌ F ≡ F</td><td>Domination laws</td></tr><tr><td><em>p</em> V <em>p</em> ≡ <em>p</em>, <em>p</em> ʌ <em>p</em> ≡ <em>p</em></td><td>Idempotent laws</td></tr><tr><td>-(-<em>p</em>) ≡ <em>p</em></td><td>Double negation law</td></tr><tr><td><em>p</em> V <em>q</em> ≡ <em>q</em> V <em>p</em> <br> <em>p</em> ʌ <em>q</em> ≡ <em>q</em> ʌ <em>p</em></td><td>Commutative laws</td></tr><tr><td>(<em>p</em> V <em>q</em>) V <em>r</em> ≡ <em>p</em> V (<em>q</em> V <em>r</em>) <br> (<em>p</em> ʌ <em>q</em>) ʌ <em>r</em> ≡ <em>p</em> ʌ (<em>q</em> ʌ <em>r</em>)</td><td>Associative laws</td></tr><tr><td><em>p</em> V (<em>q</em> ʌ <em>r</em>) ≡ (<em>p</em> V <em>q</em>) ʌ (<em>p</em> V <em>r</em>) <br> <em>p</em> ʌ (<em>q</em> V <em>r</em>) ≡ (<em>p</em> ʌ <em>q</em>) V (<em>p</em> ʌ <em>r</em>)</td><td>Distributive laws</td></tr><tr><td>-(<em>p</em> ʌ <em>q</em>) ≡ -<em>p</em> V -<em>q</em> <br> -(<em>p</em> V <em>q</em>) ≡ -<em>p</em> ʌ -<em>q</em></td><td>De Morgan’s laws</td></tr><tr><td><em>p</em> V (<em>p</em> ʌ <em>q</em>) ≡ <em>p</em> <br> <em>p</em> ʌ (<em>p</em> V <em>q</em>) ≡ <em>p</em></td><td>Absorption laws</td></tr><tr><td><em>p</em> V -<em>p</em> ≡ T, <em>p</em> ʌ -<em>p</em> ≡ F</td><td>Negation laws</td></tr></tbody></table><h4 id="Logical-Equivalences-Involving-Conditional-Statements"><a href="#Logical-Equivalences-Involving-Conditional-Statements" class="headerlink" title="Logical Equivalences Involving Conditional Statements"></a>Logical Equivalences Involving Conditional Statements</h4><table><thead><tr><th></th></tr></thead><tbody><tr><td><em>p</em> → <em>q</em> ≡ -<em>p</em> V <em>q</em></td></tr><tr><td><em>p</em> → <em>q</em> ≡ <em>-q</em> → -<em>p</em></td></tr><tr><td><em>p</em> V <em>q</em> ≡ -<em>p</em> → <em>q</em></td></tr><tr><td><em>p</em> ʌ <em>q</em> ≡ -(<em>p</em> → -<em>q</em>)</td></tr><tr><td>-(<em>p</em> → <em>q</em>) ≡ <em>p</em> ʌ -<em>q</em></td></tr><tr><td>(<em>p</em> → <em>q</em>) ʌ (<em>p</em> → <em>r</em>) ≡ <em>p</em> → (<em>q</em> ʌ <em>r</em>)</td></tr><tr><td>(<em>p</em> → <em>r</em>) ʌ (<em>q</em> → <em>r</em>) ≡ (<em>p</em> V <em>q</em>) → <em>r</em></td></tr><tr><td>(<em>p</em> → <em>q</em>) V (<em>p</em> → <em>r</em>) ≡ <em>p</em> → (<em>q</em> V <em>r</em>)</td></tr><tr><td>(<em>p</em> → <em>r</em>) V (<em>q</em> → <em>r</em>) ≡ (<em>p</em> ʌ <em>q</em>) → <em>r</em></td></tr></tbody></table><h4 id="Logical-Equivalences-Involving-Biconditional-Statements"><a href="#Logical-Equivalences-Involving-Biconditional-Statements" class="headerlink" title="Logical Equivalences Involving Biconditional Statements"></a>Logical Equivalences Involving Biconditional Statements</h4><table><thead><tr><th></th></tr></thead><tbody><tr><td><em>p</em> ↔ <em>q</em> ≡ (<em>p</em> → <em>q</em>) ʌ (<em>q</em> → <em>p</em>)</td></tr><tr><td><em>p</em> ↔ <em>q</em> ≡ <em>q</em> ↔ <em>p</em></td></tr><tr><td><em>p</em> ↔ <em>q</em> ≡ -<em>p</em> ↔ -<em>q</em></td></tr><tr><td><em>p</em> ↔ <em>q</em> ≡ (<em>p</em> ʌ <em>q</em>) V (-<em>p</em> ʌ -<em>q</em>)</td></tr><tr><td>-(<em>p</em> ↔ <em>q</em>) ≡ <em>p</em> ↔ -<em>q</em></td></tr></tbody></table><h1 id="Predicates-and-Quantifiers-9-9-Lec-3"><a href="#Predicates-and-Quantifiers-9-9-Lec-3" class="headerlink" title="Predicates and Quantifiers (9&#x2F;9 Lec#3)"></a>Predicates and Quantifiers (9&#x2F;9 Lec#3)</h1><h2 id="From-Propositions-to-Predicates"><a href="#From-Propositions-to-Predicates" class="headerlink" title="From Propositions to Predicates"></a>From Propositions to Predicates</h2><ul><li>Consider the statement “X” is even<ul><li>Contains the variable X, so it is not a proposition<ul><li>Given a value for X, we can determine the truth value</li><li>Once X is filled, sentence is TRUE or FALSE, but not both</li></ul></li></ul></li><li>Sentences whose truth value is based on variables are <strong>predicates</strong></li></ul><p>Definition:    </p><ul><li><p>A <strong>predicate</strong> is a <strong>function</strong> that takes some <strong>variable(s) as arguments;</strong> It returns rither TURE or FALSE (but never both) for each combination of the argument values.</p></li><li><p>In contrast, a <strong>proposition</strong> is a function of 0 variables</p><ul><li>Propositions have no variables.</li><li>Each proposition is either TRUE or FALSE (but not both)</li></ul></li><li><p>Predicate variables are derived from an associated <strong>domain of discourse.</strong></p><ul><li>Domain of discourse describes all allowable argument values.</li></ul></li><li><p>Ex, Coffee has a nice flavor.</p><ul><li>Now we can consider this as a function of “Who said it?”</li><li><em>C(x)</em>: <em>x</em> thinks coffee has a nice flavor.</li></ul></li></ul><p>Definition:</p><ul><li><p>Given a predicate <em>P(x)</em>, the <strong>domain of discourse</strong> (often referred to as the domain) is a set of all possible values for the variable <em>x</em>.</p></li><li><p>Predicates with multiple variables may have:</p><ul><li>multiple domains of discourse, one for each variable, or</li><li>a single domain of discourse for all variables.</li></ul></li></ul><h2 id="Quantifiers"><a href="#Quantifiers" class="headerlink" title="Quantifiers"></a>Quantifiers</h2><h3 id="Universal-Quantification"><a href="#Universal-Quantification" class="headerlink" title="Universal Quantification"></a>Universal Quantification</h3><p>Dedinition:      </p><ul><li><p>Suppose <em>P(x)</em> is apredicate on some domain.</p><ul><li>The <strong>universal quantification of <em>P(x)</em></strong> is the proposition:<ul><li>“<strong><em>P(x)</em> is true for all <em>x</em> in the domain of discourse <em>D</em>.”</strong><ul><li>Written as: ∀<em>x</em>,<em>P(x)</em></li><li>Read as: “<strong>For all</strong><em>x</em>,<em>P(x)</em>.”</li></ul></li></ul></li></ul></li><li><p>∀<em>x</em>,<em>P(x)</em> is TRUE <strong>if</strong> <em>P(x)</em> is TRUE for every <em>x</em> in <em>D</em>. </p></li><li><p>∀<em>x</em>,<em>P(x)</em> is FALSE <strong>if</strong> <em>P(x)</em> is FALSE for some <em>x</em> in <em>D</em>. </p></li><li><p>An input that causes a universally quantified statement to evaluate to FALSE is called a <strong>counterexample</strong>.</p></li></ul><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><p><em>P(x)</em>: <em>x</em> + 2 &#x3D;5, domain of discourse: {1,2,3}.      </p><ul><li>∀<em>x</em>,<em>P(x)</em> means: “<strong>for all <em>x</em> in {1,2,3}, <em>x</em> + 2 &#x3D; 5.</strong>“</li><li>∀<em>x</em>,<em>P(x)</em> is FALSE (since 1 + 2 &#x3D; 5, 2 + 2 &#x3D; 5 are both FALSE).</li></ul><h3 id="Existential-Quantification"><a href="#Existential-Quantification" class="headerlink" title="Existential Quantification"></a>Existential Quantification</h3><p>Definition:      </p><ul><li><p>Suppose <em>P(x)</em> is a predicate on some domain of discourse.</p><ul><li>The <strong>existential quantification of</strong> <em>P(x)</em> is the proposition:<ul><li>“<em>P(x)</em> <strong>is true for some <em>x</em> in the domain of discourse <em>D</em></strong>.”<ul><li>Written as: ∃<em>x</em>,<em>P(x)</em></li><li>Read as: “<strong>There exists</strong> <em>x</em>, <em>P(x)</em>“.</li></ul></li></ul></li></ul></li><li><p>∃<em>x</em>,<em>P(x)</em> is TRUE <strong>if</strong> <em>P(x)</em> is TRUE for some <em>x</em> in <em>D</em>.</p></li><li><p>∃<em>x</em>,<em>P(x)</em> is FALSE <strong>if</strong> for every <em>x</em> in <em>D</em>, <em>P(x)</em> is FALSE.</p></li><li><p>An input that causes predicate to evaluate to TRUE is called a <strong>satisfying assignment</strong>.</p></li></ul><h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h4><p><em>P(x)</em>: <em>x</em> + 2 &#x3D;5, domain of discourse: {1,2,3}.   </p><ul><li>∃<em>x</em>,<em>P(x)</em> means: “<strong>for some <em>x</em> in {1,2,3}, <em>x</em> + 2 &#x3D; 5.</strong>“</li><li>∃<em>x</em>,<em>P(x)</em> is TRUE (since 3 + 2 &#x3D; 5 is TRUE).</li></ul><h3 id="Quantifiers-and-Their-Variables-9-11-Lec-4"><a href="#Quantifiers-and-Their-Variables-9-11-Lec-4" class="headerlink" title="Quantifiers and Their Variables (9&#x2F;11 Lec#4)"></a>Quantifiers and Their Variables (9&#x2F;11 Lec#4)</h3><h4 id="Quantifier-and-Variable-Mechanics"><a href="#Quantifier-and-Variable-Mechanics" class="headerlink" title="Quantifier and Variable Mechanics"></a>Quantifier and Variable Mechanics</h4><p>Example:<br>Suppose <em>L(x,y)</em>: <em>x</em> loves <em>y</em>, where</p><ul><li><p>the domain of <em>x</em> is all CSE 191 students and</p></li><li><p>the domain of <em>y</em> is the courses offered by UB CSE</p></li><li><p><em>L(x,y)</em> has <em>x</em> as the first variable and <em>y</em> is the second variable.</p><ul><li>The position of the variable determines its domain.</li><li>Here, we have <em>x</em> is a student and <em>y</em> is a course.</li></ul></li><li><p>Suppose we were to write <em>L(y,w)</em>.</p><ul><li><em>L(x,y)</em> translates to: <em>y</em> loves <em>w</em></li><li>Here, we have <em>y</em> is a student and <em>w</em> is a course.</li></ul></li><li><p>Pay close attention to where the variable enters the predicate:</p><ul><li>∀<em>w</em>∃<em>x</em>,<em>L(w,x)</em> ʌ ∃<em>y</em>,<em>z</em>,<em>L(y,z)</em></li><li><em>w</em> and <em>y</em> are students.</li><li><em>x</em> and <em>z</em> are courses.</li></ul></li></ul><h4 id="Quantified-Statements-and-English"><a href="#Quantified-Statements-and-English" class="headerlink" title="Quantified Statements and English"></a>Quantified Statements and English</h4><p>Example:<br>Suppose <em>L(x,y)</em>: <em>x</em> loves <em>y</em>, where</p><ul><li><p>the domain of <em>x</em> is all CSE 191 students and</p></li><li><p>the domain of <em>y</em> is the courses offered by UB CSE</p></li><li><p>∃<em>x</em>,(<em>L</em>(<em>x</em>,CSE 191) ʌ <em>L</em>(<em>x</em>, CSE250)):</p><ul><li>A CSE 191 student loves both CSE191 and CSE250</li></ul></li><li><p>∃<em>x</em>∃<em>y</em>∀<em>z</em>,((<em>x</em> !&#x3D; <em>y</em>) ʌ (<em>L</em>(<em>x</em>,<em>z</em>) → <em>L</em>(<em>y</em>,<em>z</em>))):</p><ul><li>There are different students <em>x</em> and <em>y</em> in CSE 191 such that if <em>x</em> loves a CSE course, then <em>y</em> loves it as well.</li></ul></li><li><p>Every CSE course is loved by some student in CSE 191:</p><ul><li>∀<em>y</em>∃<em>x</em>, <em>L</em>(<em>x</em>,<em>y</em>)</li></ul></li><li><p>No student in CSE 191 loves CSE 191 and CSE 250:</p><ul><li>-∃<em>x</em>,(<em>L</em>(<em>x</em>,CSE191) ʌ <em>L</em>(<em>x</em>,CSE250)).</li></ul></li></ul><h4 id="Translating-Theorems"><a href="#Translating-Theorems" class="headerlink" title="Translating Theorems"></a>Translating Theorems</h4><ul><li><p>If <em>x</em> is an even number, then <em>x</em> + 1 is odd.</p><ol><li>Identify a domain and predicates:<ul><li>Domain: all integers.</li><li><em>P(x)</em> : <em>x</em> is an even number.</li><li><em>Q(x)</em> : <em>x</em> is an odd number&#x2F;</li></ul></li><li>Quantified statement: <em><code>∀x,(P(x) → Q(x + 1))</code></em></li></ol></li><li><p>Every even number is a multiple of 2.</p><ol><li>Domain and predicates:<ul><li>Domain: all integers.</li><li><em>R(x)</em> : <em>x</em> is an even number.</li><li><em>S(x)</em> : <em>x</em> is a multiple of 2.</li></ul></li><li>Quantified statement: <em><code>∀y,(R(y) → S(y))</code></em></li></ol></li><li><p>Every even number is a multiple of 2. (alternative)</p><ol><li>Domain and predicates:<ul><li><strong>Domain: all integers</strong></li><li><em>T(x)</em> : <em>x</em> is a multiple of 2.</li></ul></li><li>Quantified statement: <em><code>∀z, T(z)</code></em></li></ol></li></ul><h3 id="Quantifier-Negation"><a href="#Quantifier-Negation" class="headerlink" title="Quantifier Negation"></a>Quantifier Negation</h3><p>In general we have for any predicate <em>P(x)</em>:</p><ul><li>-∀<em>x</em>,<em>P(x)</em> ≡ ∃<em>x</em>,-<em>P(x)</em> and -∃<em>x</em>,<em>P(x)</em> ≡ ∀<em>x</em>,-<em>P(x)</em></li></ul><h3 id="Quantifier-Negation-Rule"><a href="#Quantifier-Negation-Rule" class="headerlink" title="Quantifier Negation Rule"></a>Quantifier Negation Rule</h3><p>Move the negation over a quantifier. Flip the quantifier passed.</p><ul><li><code>∃</code> flips to <code>∀</code><ul><li>-∃<em>x</em>,(…) becomes ∀<em>x</em>,-(…)</li></ul></li><li><code>∀</code> flips to <code>∃</code><ul><li>-∀<em>x</em>,(…) becomes ∃<em>x</em>,-(…)</li></ul></li></ul><p>E.g.: No CSE 191 student lives in Amherst:</p><ul><li>-∃<em>x</em>,(<em>B(x)</em> ʌ <em>A(x)</em>) ≡ ∀<em>x</em>,-(<em>B(x)</em> ʌ <em>A(x)</em>)</li></ul><h3 id="Nested-Quantifiers"><a href="#Nested-Quantifiers" class="headerlink" title="Nested Quantifiers"></a>Nested Quantifiers</h3><p>How do sentences with multiple quantifiers work?       </p><p>Definition:      </p><ul><li>A logical expression with more than one quantifier that bind different variables in the same predicate is said to have <strong>nested quantifiers</strong>.<ul><li>Need to consider thier <strong>ordering</strong> and <strong>scope</strong>.</li></ul></li></ul><h3 id="Nested-Quantifiers-Ordering"><a href="#Nested-Quantifiers-Ordering" class="headerlink" title="Nested Quantifiers Ordering"></a>Nested Quantifiers Ordering</h3><p><strong>Recall:</strong><br>Every CSE course is loved by some student in CSE 191:</p><ul><li><p>∀<em>y</em> ∃<em>x</em>,<em>L(x,y)</em>.</p></li><li><p>Does switching the ordering of quantifiers maintain the meaning?</p><ul><li>∃<em>x</em> ∀<em>y</em>,<em>L(x,y)</em>: Some CSE 191 student lovers every CSE course.</li></ul></li></ul><p><strong>In general, we cannot switch the ordering and guarantee equivanlence.</strong>          </p><p><strong>Consecutive quantifiers of the same type can be reordered and maintain equivalence.</strong>          </p><ul><li>Suppose <em>Q(x,y,z)</em> is an arbitary predicate:<ul><li>∀<em>i</em>∀<em>j</em>∀<em>k</em>, <em>Q(i,j,k)</em> ≡ ∀<em>j</em>∀<em>i</em>∀<em>k</em>, <em>Q(i,j,k)</em> ≡ ∀<em>k</em>∀<em>j</em>∀<em>i</em>, <em>Q(i,j,k)</em> ≡ …</li><li>∃<em>i</em>∃<em>j</em>∃<em>k</em>, <em>Q(i,j,k)</em> ≡ ∃<em>j</em>∃<em>i</em>∃<em>k</em>, <em>Q(i,j,k)</em> ≡ ∃<em>k</em>∃<em>j</em>∃<em>i</em>, <em>Q(i,j,k)</em> ≡ …</li></ul></li></ul><p>We usually simplify consecutive variables with the same quantifier:</p><ul><li>∀<em>i</em>∀<em>j</em>∀<em>k</em>, <em>Q(i,j,k)</em> ≡ ∀<em>i</em>,<em>j</em>,<em>k</em>,<em>Q(i,j,k)</em></li><li>∃<em>i</em>∃<em>j</em>∃<em>k</em>, <em>Q(i,j,k)</em> ≡ ∃<em>i</em>,<em>j</em>,<em>k</em>,<em>Q(i,j,k)</em></li></ul><p><strong>Note</strong>: the order variables enter <em>Q(…)</em> does not change.         </p><h3 id="Nested-Quantifiers-Scoping"><a href="#Nested-Quantifiers-Scoping" class="headerlink" title="Nested Quantifiers Scoping"></a>Nested Quantifiers Scoping</h3><p><strong>Definition:</strong><br>The portion of the formula a quantifier is covering is called the <strong>scope of the quantifier</strong>.</p><ul><li>The scope of the quantifier is the predicate immediately following.<ul><li>Precedence is just below parenthesis.</li></ul></li><li>Any variable that is not covered by a quantifier is called a <strong>free variable</strong>.</li></ul><p>Consider the formula: <em><code>∀i ∃j, (P(i,j) → ∀k,Q(k))</code></em>         </p><ul><li>The scope of <em><code>∀i</code></em> is the entire formula.</li><li>The scope of <em><code>∃j</code></em> is the entire formula, minus <em><code>∀i</code></em>.</li><li>The scope of <em><code>∀k</code></em> is limited to <em>Q(k)</em>.</li></ul><p>Consider:        </p><p><em>∀i ∃j, (P(i,j) → ∀k,Q(k))</em>           </p><p>vs           </p><p><em>∀i ∃j ∀k, (P(i,j) → Q(k))</em>            </p><p><strong>Quantifiers can move as long as their scope doesn’t encompass additional quantifiers of a different type.✅</strong>        </p><p>Consider:        </p><p><em>∀i ∃j, (P(i,j) → ∀k,Q(k))</em>           </p><p>vs           </p><p><em>∀i ∃j, (∀k,P(i,j) → Q(k))</em>            </p><ul><li>In the second formula, <em>k</em> in <em>Q(k)</em> is no longer <strong>bound</strong> by any quantifier.<ul><li><em>k</em> is a free variable.</li></ul></li></ul><p><strong>Ensure that any reordering doesn’t free variables originally covered.❌</strong></p><h1 id="Homework-1"><a href="#Homework-1" class="headerlink" title="Homework#1"></a>Homework#1</h1><p><img src="/cn/CSE191/image/hw1.png" alt="Homework#1"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Do not submit this file to Autolab.</span></span><br><span class="line"><span class="comment"># This file is only meant for testing your code.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cse191_homework01</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter a number n: &quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The following is the &quot;</span> + <span class="built_in">str</span>(n) + <span class="string">&quot; left-hand column(s) of a &quot;</span> + <span class="built_in">str</span>(n) + <span class="string">&quot; variable truth table:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----&quot;</span>)</span><br><span class="line">cse191_homework01.generateTTRows(n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DO NOT REMOVE THIS HEADER</span></span><br><span class="line"><span class="comment"># Modfiy this header to specify your ubit and person number.</span></span><br><span class="line"><span class="comment"># UBIT: </span></span><br><span class="line"><span class="comment"># Person Number: </span></span><br><span class="line"><span class="comment"># ----</span></span><br><span class="line"><span class="comment"># Note: Do not add any input statements to this file.</span></span><br><span class="line"><span class="comment"># Note: You may not add any import statements to this file.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your code goes within the funciton definition below, only.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generateTTRows</span>(<span class="params">n</span>):</span><br><span class="line">  row = [<span class="string">&quot;F&quot;</span>] * n</span><br><span class="line">  row_str = <span class="string">&quot;&quot;</span>.join(row)</span><br><span class="line">  index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> row_str.rfind(<span class="string">&quot;F&quot;</span>) != -<span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(row_str)</span><br><span class="line">    index = row_str.rfind(<span class="string">&quot;F&quot;</span>)</span><br><span class="line">    row = <span class="built_in">list</span>(row_str)</span><br><span class="line">    row[index] = <span class="string">&quot;T&quot;</span></span><br><span class="line">    row_str = <span class="string">&quot;&quot;</span>.join(row)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> index &lt; n-<span class="number">1</span>:</span><br><span class="line">      <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(index + <span class="number">1</span>, n):</span><br><span class="line">        row[i] = <span class="string">&quot;F&quot;</span></span><br><span class="line">        row_str = <span class="string">&quot;&quot;</span>.join(row)</span><br><span class="line">  <span class="built_in">print</span>(row_str)</span><br></pre></td></tr></table></figure><h1 id="Logical-Reasoning-and-Proof-Methods"><a href="#Logical-Reasoning-and-Proof-Methods" class="headerlink" title="Logical Reasoning and Proof Methods"></a>Logical Reasoning and Proof Methods</h1><h2 id="Logical-Reasoning"><a href="#Logical-Reasoning" class="headerlink" title="Logical Reasoning"></a>Logical Reasoning</h2><h3 id="Logical-Reasoning-Definition"><a href="#Logical-Reasoning-Definition" class="headerlink" title="Logical Reasoning Definition"></a>Logical Reasoning Definition</h3><ul><li>Differences from logical equivalence<ul><li>Statements derived are not always equivalent.<ul><li>Can be new knowledge.</li></ul></li><li>Multiple facts can be used to drive a new statement.</li></ul></li></ul><p>Arguments are:         </p><ul><li>A list of propositions, called <strong>hypotheses</strong>, and</li><li>A final proposition, called the <strong>conclusion</strong>.</li></ul><p><img src="/cn/CSE191/image/arguments.png" alt="Arguments"></p><p>Definition:      </p><ul><li>An argument is <strong>valid</strong> if:<ul><li>(<em>p1 ʌ p2 ʌ … ʌ pn</em>) → <em>c</em> is a tautology</li></ul></li><li>An argument is <strong>invalid</strong> if it is not valid.</li></ul><h4 id="Example-2"><a href="#Example-2" class="headerlink" title="Example"></a>Example</h4><ul><li><p>Prove that the following is a valid argument:<br><img src="/cn/CSE191/image/argument-example1.png" alt="Arguments Example#1"></p></li><li><p>Proving this argument valid is the same as proving that <em><code>p → p</code></em> is a tautology.</p><table><thead><tr><th><em>p</em></th><th><em>p → p</em></th></tr></thead><tbody><tr><td>F</td><td>T</td></tr><tr><td>T</td><td>T</td></tr></tbody></table></li><li><p>Logical reasoning proof:</p></li></ul><ol><li><em>p</em> is Hypothesis</li></ol><p>Since we have arrived at our conclusion our proof is complete.      </p><ul><li>Therefore, we have shown that this is a valid argument.</li></ul><h4 id="Another-Simple-Example"><a href="#Another-Simple-Example" class="headerlink" title="Another Simple Example"></a>Another Simple Example</h4><p>Consider the contrapositive as a logical argument:<br><img src="/cn/CSE191/image/argument-example2-1.png" alt="Arguments Example#2-1"></p><p><strong>Proof of validity:</strong><br><img src="/cn/CSE191/image/argument-example2-2.png" alt="Arguments Example#2-2"></p><ul><li>Note: this is the logical equivalence proof we performed.<ul><li>Add line numbers for logical argument proofs.</li></ul></li></ul><p><img src="/cn/CSE191/image/argument-example2-3.png" alt="Arguments Example#2-3"></p><h3 id="Logical-Reasoning-Proof-Definition"><a href="#Logical-Reasoning-Proof-Definition" class="headerlink" title="Logical Reasoning: Proof Definition"></a>Logical Reasoning: Proof Definition</h3><p>Definition<br>A <strong>logical proof</strong> of an argument is a sequence of steps, each of which consists of a proposition and a justification.         </p><ul><li><p>Each line should contain:</p><ol><li>a hypothesis (assumption)</li><li>a proposition that is equivalent to a previous statement</li><li>a proposition that is derived by applying an argument to previous statements.</li></ol></li><li><p>Justifications should state</p><ol><li>hypothesis.</li><li>the equivalence law used (and the line it was applied to)</li><li>the argument used (and the line(s) it was applied to)</li></ol></li><li><p>The last line should be the conclusion.</p></li></ul><h3 id="Invalid-Argument"><a href="#Invalid-Argument" class="headerlink" title="Invalid Argument"></a>Invalid Argument</h3><p>To prove an argument is invalid, we need a counterexample.<br><img src="/cn/CSE191/image/invalid-argument-example1.png" alt="Invalid Arguments Example#1"></p><p>Proof of invalidity:         </p><ol><li>Suppose <em><code>p</code></em>: FALSE and <em><code>q</code></em>: TRUE.</li><li>Then **<code>p → q</code>* is TRUE, but <em><code>q → p</code></em> is FALSE.</li><li>Thus, the argument is invalid.</li></ol><p>Counterexample: a situation where all hypotheses are TRUE and the conclusion is FALSE.</p><h3 id="Logical-Reasoning-Rules"><a href="#Logical-Reasoning-Rules" class="headerlink" title="Logical Reasoning Rules"></a>Logical Reasoning Rules</h3><p>The following are a number of commonly used rules of inference:<br><img src="/cn/CSE191/image/rules-of-inference.png" alt="Rules of inference"></p><h1 id="Introduction-to-Mathematical-Proofs"><a href="#Introduction-to-Mathematical-Proofs" class="headerlink" title="Introduction to Mathematical Proofs"></a>Introduction to Mathematical Proofs</h1><h2 id="Mathenatical-Proofs"><a href="#Mathenatical-Proofs" class="headerlink" title="Mathenatical Proofs"></a>Mathenatical Proofs</h2><p>A <strong>mathematical proof</strong> is usually “informal”              </p><ul><li>More formal than everyday language, less foraml than logical proofs.<ul><li>More than one rule may be used in step.</li><li><strong>(Some)</strong> step may be skipped.</li><li>Axioms may be assumed</li><li>Rules for inference need not be explicitly stated.</li></ul></li><li>Proofs must be a self-contained line of reasoning.<ul><li>Statements used must be<ul><li>facts (axioms)</li><li>theorems, lemmas, corollaries (previously proved statements), or</li><li>statements that can be derived from the above.</li></ul></li><li>You cannot use something as fact within a proof if you are not certain it is.</li></ul></li></ul><h2 id="Terminology"><a href="#Terminology" class="headerlink" title="Terminology"></a>Terminology</h2><ul><li><strong>Theorem:</strong> statement than can be shown true.<ul><li><strong>Proposition:</strong> less important theorem.</li><li><strong>Lemma:</strong> less important theorem used to prove other theorems.</li><li><strong>Corollary:</strong> theorem that trivially follows another theorem.</li></ul></li><li><strong>Conjecture:</strong> statement that is proposed to be true, but has not been proved.</li><li><strong>Axiom:</strong> statement assumed to be true (i.e., true statement that does not need a proof)</li><li>Most axioms, theorems, etc, are properties concerning all elements over some domain.<ul><li>E.g., All perfect squares are non-negative.</li></ul></li><li>The domain should be clear from context or explicitky stated.</li></ul><h2 id="Example-3"><a href="#Example-3" class="headerlink" title="Example"></a>Example</h2><p><img src="/cn/CSE191/image/Hidden-Universal-Quantifier.png" alt="Hidden Universal Quantifier"></p><h2 id="Proof-by-Exhaustion"><a href="#Proof-by-Exhaustion" class="headerlink" title="Proof by Exhaustion"></a>Proof by Exhaustion</h2><p>Definition<br>A <strong>proof by exhaustion</strong> for <strong><code>p → q</code></strong> starts by considering each element of the domain of discourse and showing that the predicate is true.              </p><ul><li>Only a useful method when dealing with a small domain.<ul><li>In our first example(below), our domain was {2,4,6}.</li><li>Small is relative, but must be finite.</li></ul></li></ul><h3 id="Example-4"><a href="#Example-4" class="headerlink" title="Example"></a>Example</h3><p><img src="/cn/CSE191/image/Proof-by-Exhaustion-Example.png" alt="Proof by Exhaustion Example"></p><h3 id="non-Example"><a href="#non-Example" class="headerlink" title="(non-)Example"></a>(non-)Example</h3><p><img src="/cn/CSE191/image/non-Example.png" alt="Proof by Exhaustion (non-)Example"></p><h2 id="Disproof-by-Counterexample"><a href="#Disproof-by-Counterexample" class="headerlink" title="Disproof by Counterexample"></a>Disproof by Counterexample</h2><p><img src="/cn/CSE191/image/Disproof-by-Counterexample.png" alt="Disproof by Counterexample"></p><h2 id="Direct-Proofs"><a href="#Direct-Proofs" class="headerlink" title="Direct Proofs"></a>Direct Proofs</h2><p>Definition<br>A <strong>direct proof</strong> for <code>P(x) → Q(x)</code> starts by assuming P(x) (for x) as fact and finishes by establishing Q(x).</p><ul><li>Make use of axioms, previously proven theorems, inference rules, etc…</li><li>Same approach was used to prove that a logical argument is true.<ul><li>P(x) is the hypothesis.</li><li>Q(x) is the conclusion.</li></ul></li></ul><p><img src="/cn/CSE191/image/direct-proof-definition.png" alt="direct proof definition"></p><h3 id="Example-5"><a href="#Example-5" class="headerlink" title="Example"></a>Example</h3><p>Example1:<br><img src="/cn/CSE191/image/direct-proof-example.png" alt="direct proof example"></p><p>Example2:<br><img src="/cn/CSE191/image/direct-proof-example2.png" alt="direct proof example"></p><h2 id="Proof-by-Contraposition"><a href="#Proof-by-Contraposition" class="headerlink" title="Proof by Contraposition"></a>Proof by Contraposition</h2><p>Recall that <code>p → q</code> is logically equivalent to <code>-q → -p</code>, its contrapositive            </p><p>Definition<br>A proof by contraposition for P(x) → Q(x) is proof P(x) → Q(x) where:           </p><ol><li>write a direct proof for -Q(x) → -P(x) and</li><li>conclude that the contrapositive of -Q(x) → -P(x) is also true.</li></ol><ul><li>Proof layout:<br><img src="/cn/CSE191/image/proof-layout.png" alt="proof layout"></li></ul><h3 id="Example-6"><a href="#Example-6" class="headerlink" title="Example"></a>Example</h3><p><img src="/cn/CSE191/image/proof-by-contraposition.png" alt="proof by contraposition"></p><h1 id="Proof-by-Exhaustion-1"><a href="#Proof-by-Exhaustion-1" class="headerlink" title="Proof by Exhaustion"></a>Proof by Exhaustion</h1><p>For a proof by exhaustion to work, cases must <strong>exhaust</strong>, or consider, the entire domain.</p><ul><li>Overlap is OK, but may introduce redundant work.<ul><li>For the domian of integers,<ul><li>n &gt;&#x3D; 0, n &#x3D; 0, and n &lt;&#x3D; 0 are exhaustive cases, but have overlap.</li><li>Bettter: n &gt;&#x3D; 0 and n &lt; 0 or n &gt; 0 and n &lt;&#x3D; 0</li></ul></li></ul></li><li>Non-exhaustive cases leave the possibility for error:<ul><li>For the domian of integers.<ul><li>n is positive and n is negative are non-exhaustive cases</li><li>Missing n &#x3D; 0</li></ul></li></ul></li></ul><h2 id="Example-7"><a href="#Example-7" class="headerlink" title="Example"></a>Example</h2><p>Prove that for any integers <em>x</em> and <em>y</em>, if both <em>x+y</em> and <em>xy</em> are even, then both <em>x</em> and <em>y</em> are even.       </p><p>Note the contrapositive is:        </p><ul><li>If <em>x</em> and <em>y</em> are not both even, then <em>x+y</em> and <em>xy</em> are not both even.</li></ul><p>Proof(by contraposition):<br><img src="/cn/CSE191/image/Exhaustion-1.png" alt="Exhaustion"><br>In both cases, we get that <em>x+y</em> and <em>xy</em> are not both even.</p><h2 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h2><p>Prove that if <em>n</em> is an integer, then <em>n^2</em> &gt;&#x3D; <em>n</em></p><h1 id="WLOG"><a href="#WLOG" class="headerlink" title="WLOG"></a>WLOG</h1><p>Without Loss Of Generality (不失一般性)<br>被用在证明中将前提条件明确到个例上时，说明该个例能代表普遍情况，而非一种特例。</p><h1 id="Sets"><a href="#Sets" class="headerlink" title="Sets"></a>Sets</h1><p>A <strong>set</strong> is a <strong>collection of objects</strong> that do NOT have a order.       </p><ul><li>Each object is called an <strong>element</strong></li><li>We write:<br><img src="/cn/CSE191/image/Sets-1.png" alt="Sets"></li></ul><h2 id="How-to-describe-a-set"><a href="#How-to-describe-a-set" class="headerlink" title="How to describe a set:"></a>How to describe a set:</h2><ul><li>List all elements.<ul><li>E.g., {1,2,3}</li><li>This is called <strong>roster notation</strong> - list all contents</li></ul></li><li>Provide a description of what the elements look like.<ul><li>E.g., <img src="/cn/CSE191/image/Sets1-2.png" alt="example"></li><li>This is called <strong>set builder notation</strong> - describe contained elements.</li></ul></li></ul><h2 id="Common-Sets"><a href="#Common-Sets" class="headerlink" title="Common Sets"></a>Common Sets</h2><p><img src="/cn/CSE191/image/Sets1-3.png" alt="Common Sets"></p><p><img src="/cn/CSE191/image/Sets1-4.png" alt="More Examples"></p><h2 id="Universal-Set"><a href="#Universal-Set" class="headerlink" title="Universal Set"></a>Universal Set</h2><p>When discussing sets, there is always a <strong>universal set</strong> <em>U</em> involved, which contains all objects under consideration.<br><img src="/cn/CSE191/image/Sets2-1.png" alt="Universal Set"><br>In many casesm the universal set is <strong>implict and omitted from discussion</strong>.</p><h3 id="Russell’s-Parabox"><a href="#Russell’s-Parabox" class="headerlink" title="Russell’s Parabox"></a>Russell’s Parabox</h3><p>Is there a universal set covering all universes?<br><img src="/cn/CSE191/image/Sets2-2.png" alt="Universal Set"></p><h1 id="Cardinality"><a href="#Cardinality" class="headerlink" title="Cardinality"></a>Cardinality</h1><p>Definition:<br>If a set A contains exactly <em>n</em> elements, where <em>n</em> is a non-negative integer, then A <strong>is a finite set</strong>.       </p><ul><li><em>n</em> is called <strong>the cardinality of A</strong></li><li>Denoted by |A| &#x3D; <em>n</em>.</li><li>For a finite set, its cardinality is the “size” of A.</li></ul><p>Definition:<br>The <strong>empty set</strong> is the set that <strong>contains no elements</strong>.</p><ul><li><p>Denoted by {}</p></li><li><p>Has size 0</p></li><li><p>Do we count duplicate items?</p><ul><li><strong>NO</strong>. We only count unque items for cardinality</li></ul></li></ul><p><img src="/cn/CSE191/image/Cardinality-1.png" alt="Cardinality"></p><p><strong>∅ &#x3D; 0</strong><br><strong>{∅} &#x3D; 1</strong>             </p><h1 id="Cardinality-for-infinite-sets"><a href="#Cardinality-for-infinite-sets" class="headerlink" title="Cardinality(for infinite sets)"></a>Cardinality(for infinite sets)</h1><p>Definition:<br>If A is not finite, then it is an <strong>infinite set</strong>.           </p><ul><li>What is the cardinality of an <strong>infinite set</strong>?</li><li>Do all infinite sets have the same size?<ul><li>Appears to not be the case.<ul><li>Are there more rational numbers than integers?</li><li>Are there are more real numbers than rational numbers?</li><li>Only one of these is true.</li></ul></li></ul></li></ul><h1 id="Subsets"><a href="#Subsets" class="headerlink" title="Subsets"></a>Subsets</h1><p><img src="/cn/CSE191/image/SubSet-1.png" alt="Subset"></p><h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><p><img src="/cn/CSE191/image/SubSet-2.png" alt="Subset"></p><h2 id="Equal-Sets"><a href="#Equal-Sets" class="headerlink" title="Equal Sets"></a>Equal Sets</h2><p>Definition:<br>Two sets are <strong>equal</strong> if and only if <strong>they have the same elements.</strong>            </p><ul><li>Denoted by A &#x3D; B.</li><li>Order of elements irrelevant.</li></ul><p><img src="/cn/CSE191/image/EqualSets.png" alt="Equal Sets"></p><h1 id="Set-Equality"><a href="#Set-Equality" class="headerlink" title="Set Equality"></a>Set Equality</h1><p><img src="/cn/CSE191/image/EqualitySet-1.png" alt="Set Equality"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> CSE191 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建-如何在文章中插入图片</title>
      <link href="/cn/hexo-image/"/>
      <url>/cn/hexo-image/</url>
      
        <content type="html"><![CDATA[<h1 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h1><p>在你的博客的根目录中，进入 <code>source</code> 文件夹，新建一个 <code>image</code> 文件夹。<br>你可以将需要加载的图片统统放在这里，但是并不建议这么做，因为当文章多起来的时候就显得很乱，很难去整理。   </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](<span class="link">/images/xxx.jpg</span>)</span><br></pre></td></tr></table></figure><p>我一般是将主页的图片素材放入此文件夹，文章图片我更推荐下方操作。</p><h1 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h1><p>这种方法是对每一个文章新建一个同名的文件夹，用于放入对该文章的素材，比较推荐。<br>首先你需要修改你的 <code>_config.yml</code>,将 <code>post_asset_folder</code> 改为 <code>true</code>：  </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>后续创建新文章的时候就会生成同名文件夹，图片丢进去即可。<br><strong>需要注意的是，在使用此方法之前的文章需要你自己创建同名文件夹，系统并不会补上。</strong>   </p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> 图片 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSE116的学习笔记-Lec#1:Scala基础语法</title>
      <link href="/cn/scala-basic/"/>
      <url>/cn/scala-basic/</url>
      
        <content type="html"><![CDATA[<p>Lecture #1  9&#x2F;2<br>授课时间：2020-09-02 13:50:00</p><h1 id="Scala-Basics"><a href="#Scala-Basics" class="headerlink" title="Scala Basics"></a>Scala Basics</h1><h2 id="Hello-Scala"><a href="#Hello-Scala" class="headerlink" title="Hello Scala!"></a>Hello Scala!</h2><p>Example:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> week1.basics </span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        println(<span class="string">&quot;Hello Scala!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>package week1.basics</code> : define where this code lives.<br><code>object Hello</code>: Objects<br><code>def main&#123;&#125;</code>: Main Method<br><code>println(&quot;Hello Scala!&quot;)</code>: Print Line   </p><h2 id="Methods-Variables"><a href="#Methods-Variables" class="headerlink" title="Methods Variables"></a>Methods Variables</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> week1.basics</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">FirstObject</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">multiplyBtTwo</span></span>(input: <span class="type">Double</span>): <span class="type">Double</span> = &#123;</span><br><span class="line">        input * <span class="number">2.0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">var</span> x: <span class="type">Double</span> = <span class="number">7.0</span></span><br><span class="line">        <span class="keyword">var</span> result = multiplyBtTwo(x)</span><br><span class="line">        println(result)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>input</code>: input value<br><code>Double</code>: Data type<br>Usually no <code>return</code> statements.</p><p><code>var</code>: Variables declaration </p><h2 id="Conditionals"><a href="#Conditionals" class="headerlink" title="Conditionals"></a>Conditionals</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> week1.basics</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Coditional</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">computeSize</span></span>(inout: <span class="type">Double</span>): <span class="type">String</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> large: <span class="type">Double</span> = <span class="number">60.0</span></span><br><span class="line">        <span class="keyword">val</span> medium: <span class="type">Double</span> = <span class="number">60.0</span></span><br><span class="line">        <span class="keyword">if</span> (input &gt;= large) &#123;</span><br><span class="line">            <span class="string">&quot;large&quot;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (input &gt;= medium) &#123;</span><br><span class="line">            <span class="string">&quot;medium&quot;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="string">&quot;small&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span> </span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        println(computeSize(<span class="number">70.0</span>))</span><br><span class="line">        println(computeSize(<span class="number">50.0</span>))</span><br><span class="line">        println(computeSize(<span class="number">10.0</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>val</code>: Values declared with <code>val</code> cannot change, Reassignment causes an ERROR!<br><code>&quot;small&quot;</code>: means <code>return &quot;small&quot;</code></p><h2 id="Lecture-Question"><a href="#Lecture-Question" class="headerlink" title="Lecture Question"></a>Lecture Question</h2><h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><p>In a package named “lecture” create an object named “FirstObject” with a metho named “computeShippingCost” that takes a Double representing the weight of a package as a paramater and returns a Double representing the shipping cost of the package.</p><p>Ex:<br>The shipping cost is ($)5 + 0.25 per pound over 30</p><ul><li>Every package weighing 30 pounds or less will cost 5 to ship.</li><li>Ex. A package weighting 31 pounds cost 5.25 to ship</li><li>Ex. A package weighting 40 pounds cost 7.50 to ship</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> CSE116 </category>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo主题更换</title>
      <link href="/cn/hexo-theme/"/>
      <url>/cn/hexo-theme/</url>
      
        <content type="html"><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>想必大家都看腻了官方的主题，作为hexo的优势之一，丰富的主题可以带给你不一样的界面和用户体验，我将会在这里教你如何变更hexo的主题。</p><h1 id="选择主题"><a href="#选择主题" class="headerlink" title="选择主题"></a>选择主题</h1><p>你可以前往hexo的官方主题页面选择你心仪的主题，<a href="https://hexo.io/themes/">点击跳转</a><br><img src="/cn/hexo-theme/image/hexo-theme.png" alt="Hexo theme"></p><h1 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h1><p>既然要变更主题，那么我们就要先将主题下载到我们博客里。<br>下载主题可以从作者的GitHub里或者使用 <code>npm</code> 进行下载，这里我就不多描述了。<br>这里就以我现在使用的主题 <code>butterfly</code> 进行演示：  </p><h2 id="使用git下载"><a href="#使用git下载" class="headerlink" title="使用git下载"></a>使用git下载</h2><p>终端下输入：   </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><h2 id="使用npm下载（要求Hexo版本5-0-0以上）"><a href="#使用npm下载（要求Hexo版本5-0-0以上）" class="headerlink" title="使用npm下载（要求Hexo版本5.0.0以上）"></a>使用npm下载（要求Hexo版本5.0.0以上）</h2><p>终端里先cd到博客的根目录，然后输入：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-theme-butterfly</span><br></pre></td></tr></table></figure><h1 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a>应用主题</h1><p>前往博客根目录，找到文件 <code>_config.yml</code>，打开它。<br>在最下面的 <code># Extensions</code> 里，将 <code>theme</code> 后面的内容改成 <code>butterfly</code> 即可。<br><img src="/cn/hexo-theme/image/config.png" alt="Hexo theme"></p><h1 id="刷新主题"><a href="#刷新主题" class="headerlink" title="刷新主题"></a>刷新主题</h1><p>应用完成后输入以下指令刷新博客，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>再将其推到云端或本地即可。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> 主题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>执行&quot;hexo d&quot;时产生关于deploy的报错</title>
      <link href="/cn/hexo-d/"/>
      <url>/cn/hexo-d/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>在设置完 <code>deploy</code> 时，执行 <code>hexo d</code> 报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR Deployer not found: git</span><br></pre></td></tr></table></figure><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>错误原因在于你没有安装 <code>hexo-deployer-git</code> 插件，在你的博客根目录下输入以下命令进行安装：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>现在再执行 <code>hexo d</code> 时就不会报错了</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> 报错 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 报错 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/cn/hello-world/"/>
      <url>/cn/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> Hello World </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Setup</title>
      <link href="/cn/Hexo-Setup/"/>
      <url>/cn/Hexo-Setup/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-Setup"><a href="#Hexo-Setup" class="headerlink" title="Hexo-Setup"></a>Hexo-Setup</h1><p>本文基于程序羊（CodeSheep）在b站的发布的关于博客搭建的视频，以下均为学习笔记。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>下载：</p><ul><li><a href="https://nodejs.org/">node.js</a></li><li>iTerm</li></ul><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>打开 <code>iTerm</code>，输入 <code>sudo su</code>，输入密码以root身份运行。<br>如果出现 <code>sh-3.2#</code> 字样说明成功。<br><img src="/cn/Hexo-Setup/image/su.png" alt="sudo su">  </p><p>我们可以查看以下 <code>node</code> 和 <code>npm</code> 的版本以确保安装成功<br>分别为 <code>node -v</code> 和 <code>npm -v</code>，如果出现版本号则说明安装成功。<br><img src="/cn/Hexo-Setup/image/check.png" alt="check"> </p><p><strong>国内用户需安装 <code>cnpm</code></strong><br>输入以下指令即可：<br><code>npm install -g cnpm --registry=http://registry.npm.taobao.org</code></p><p>安装完成后，输入 <code>cnpm -v</code> 查看 <code>cnpm</code> 版本以确保安装无误。</p><h2 id="安装hexo框架"><a href="#安装hexo框架" class="headerlink" title="安装hexo框架"></a>安装hexo框架</h2><p>输入 <code>npm install -g hexo-cli</code> 以安装 <code>hexo</code> 框架<br><img src="/cn/Hexo-Setup/image/hexo-cli.png" alt="hexo-cli"> </p><p><strong>国内用户使用 <code>cnpm</code> 安装框架即可。</strong><br>输入 <code>cnpm install -g hexo-cli</code> 以安装 <code>hexo</code> 框架</p><p>安装完成后，输入 <code>hexo -v</code> 查看 <code>hexo</code> 版本，以确保安装成功<br><img src="/cn/Hexo-Setup/image/hexo-v.png" alt="hexo-v"> </p><h2 id="生成博客"><a href="#生成博客" class="headerlink" title="生成博客"></a>生成博客</h2><p>输入 <code>mkdir blog</code> 以创建一个名字为<code>blog</code>的文件夹，文件夹名字没有要求，可以随便起，这里只是为了方便记忆。  </p><p>输入 <code>cd blog</code> 进入 刚创好的 <code>blog</code> 文件夹。<br>不确定位置在哪的可以使用 <code>pwd</code> 来查看文件位置。<br><img src="/cn/Hexo-Setup/image/new_blog.png" alt="blog"> </p><p>输入 <code>sudo hexo init</code> 初始化博客 &#x2F; 生成博客  </p><p>完成后输入 <code>hexo s</code> 启动本地博客<br>启动完成后，浏览器输入 <code>http://localhost:4000/ </code>即可看到生成的博客  </p><h2 id="线上博客部署-免费"><a href="#线上博客部署-免费" class="headerlink" title="线上博客部署(免费)"></a>线上博客部署(免费)</h2><p>打开你的 <code>GitHub</code>，创建一个与你用户名同名的io库：   </p><p>举例：<br>用户名： <code>abc</code>  ➡️  库名： <code>abc.github.io</code>  </p><p><img src="/cn/Hexo-Setup/image/github.png" alt="github-io"> </p><p>创建后转到 <code>iTerm</code>：<br>输入 <code>npm install --save hexo-deployer-git</code> 安装git部署插件<br><strong>国内用户输入：<code>cnpm install --save hexo-deployer-git</code> 安装git部署插件</strong>  </p><p>安装完成后输入 <code>vim _config.yml</code> 打开 <code>_config.yml</code> 文件<br><img src="/cn/Hexo-Setup/image/config-1.png" alt="打开 _cofig.yml"> </p><p>打开文件后，直接跳转到最下面，在 <code>Deployment</code> 菜单下输入图中的参数，<br><strong>并把 <code>repo</code> 的内容改为自己刚创建的 <code>repo</code> 的地址。</strong><br><img src="/cn/Hexo-Setup/image/config-2.png" alt="配置 _cofig.yml"> </p><p>修改完成后按 <code>esc</code> 键退出编辑模式，并输入 <code>:wq</code> 保存&amp;退出 <code>_config.yml</code><br><img src="/cn/Hexo-Setup/image/config-3.png" alt="保存并退出 _cofig.yml"> </p><p>输入 <code>hexo d</code> 将本地的博客推到你的GitHub库中<br><img src="/cn/Hexo-Setup/image/config-4.png" alt="推库"> </p><p>系统会要求你输入GitHub的用户名和密码，输入即可：<br><img src="/cn/Hexo-Setup/image/config-5.png" alt="登陆GitHub"> </p><p>至此你的本地博客已经挂到GitHub上，现在即可进行远程访问。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> 部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCore for macOS Big Sur</title>
      <link href="/cn/Open-Core-for-macOS-Big-Sur/"/>
      <url>/cn/Open-Core-for-macOS-Big-Sur/</url>
      
        <content type="html"><![CDATA[<p>警告⚠️：本目录仅为个人记录所准备，如果你也想尝试升级macOS11可以以此教程作为参考，本人不会为你操作过程中所出现的任何错误负责！请自己酌量而行。   </p><p><strong>EFI支持OTA或者通过下载好的更新程序app更新，因此建议先尝试这两种办法，其次再尝试U盘安装，再者查看我后面写的关于虚拟机安装教程！</strong><br><strong>EFI support OTA &amp; app update, recommend use these two method first, then try my virtual machine tutorial.</strong>   </p><p>由于我即将开学，这几天还在搬家+布置网络，因此村里刚通网，对此我非常抱歉。在后续的时间我将降低我的更新频率，学业为重希望大家理解，不过我也向大伙们保证不会停更的（日更我肯定是肝不动了，毕竟👴每周都要做Lab Report，因此我尽量保持周更。）</p><h1 id="文件说明-File-Description"><a href="#文件说明-File-Description" class="headerlink" title="文件说明 &#x2F; File Description"></a>文件说明 &#x2F; File Description</h1><ul><li><p><strong>CLOVER</strong></p><ul><li><code>CLOVER</code>引导<code>EFI</code>，版本<code>5103</code>，对应系统 <code>macOS 10.15.4</code>。由于我已经转入 <code>OC</code> 引导，因此不会再进行更新，放在这里只是为了给那些需要使用 <code>5120</code> 的人作为参考</li><li>EFI with <code>CLOVER</code>，<code>v5103</code>, for <code>macOS 10.15.4</code>. I won’t update it anymore,because of I move to <code>OC</code>. Just a reference for guys who want to use <code>CLOVER v5120</code>.</li><li>问题：无问题  &#x2F; Issue: None</li></ul></li><li><p><del><strong>EFI 10.15.6</strong> (使用时记得改名为 <code>EFI</code>)</del></p><ul><li><del><code>OpenCore</code> 版本的EFI，版本 <code>0.6.0</code>，对应系统 <code>macOS 10.15.6</code>。我会更新该EFI，但是频率不高，因为我现在很少使用该版本系统。</del></li><li><del>EFI with <code>OpenCore</code> , <code>v0.6.0</code>, for <code>macOS 10.15.6</code>. Still updating, but low freq.</del></li><li><del>问题：睡眠唤醒黑屏  &#x2F; Issue: Wakeup with BlackScreen(after sleep)</del></li></ul></li><li><p><strong>EFI beta</strong>  (使用时记得改名为 <code>EFI</code>)</p><ul><li><code>OpenCore</code> 版本的EFI，版本 <code>0.6.1</code>，对应系统 <code>macOS 11</code>。该版本的EFI更新频率较高（更新比较激进，基本对应最新自编译 <code>Kext</code> 和 <code>OpenCore</code>）因此很容易出现一些BUG。喜欢尝鲜的可以使用。</li><li>EFI with <code>OpenCore</code> , <code>v0.6.1</code>, for <code>macOS 11</code>. Update with High Freq (<strong>Lastest <code>Kext</code>[Self Compile] &amp; <code>OpenCore</code>[From <code>OpenCore-Factory</code>]</strong>)which could cause some <strong>ISSUE</strong> that don’t expect.</li><li><strong>问题：</strong><ul><li><strong><del>使用 <code>SecureBoot</code> 无法进入<code>恢复模式</code></del></strong>  </li><li><strong>包含<code>EFI</code>里所有的BUG</strong></li><li><strong>可能会有其他未知BUG</strong></li></ul></li><li><strong>Issue:</strong><ul><li><strong><del>Can’t enter <code>Recovery</code> with <code>SecureBoot</code>.</del></strong></li><li><strong>Contain all BUG in <code>EFI</code></strong></li><li><strong>Might have other unknow BUG</strong></li></ul></li></ul></li><li><p><strong>EFI</strong> </p><ul><li><code>OpenCore</code> 版本的EFI，版本 <code>0.6.1</code>，对应系统 <code>macOS 11</code> &amp; <code>macOS 10.15.6</code>。较为稳定的EFI，只有在确认稳定后才会进行更新，因此更新频率不是很高。</li><li>EFI with <code>OpenCore</code> , <code>v0.6.1</code>, for <code>macOS 11</code> &amp; <code>macOS 10.15.6</code>. <code>Stable Version</code> for EFI, Only updated while it’s stable to use. Thus not too high freq.</li><li><strong>问题：</strong><ul><li><del><strong>睡眠唤醒后时间仍定格在睡眠前（需手动更新时间）</strong></del> </li><li><strong>无法自动切换音频输出，开机默认耳机输出，变更输出需要手动切换。</strong></li></ul></li><li><strong>Issue:</strong><ul><li><del><strong>Time Freeze while laptop sleep, That means you have to MANUALLY update the time after sleep.</strong></del></li><li><strong>Can’t switch audio output automatically. You have to MANUALLY switch it</strong></li></ul></li></ul></li><li><p><strong>Tools</strong></p><ul><li>里面包含该教程需要的基本工具（软件）。</li><li>Include some necessary &#x2F; basic <code>tools</code> for this tutorial</li></ul></li><li><p><strong>Wallpaper</strong></p><ul><li>我备份的壁纸。。。</li><li>Just <code>Wallpaper</code>,nothing else. (if u want something else, go porxhxb prm)</li></ul></li><li><p><strong>image</strong></p><ul><li>本教程所包含的图片的缓存，对于你们来说并没有什么用</li><li>Just some <code>image caches</code> for this tutorial, <code>useless</code> to your guys.</li></ul></li><li><p><strong>Changelog</strong></p><ul><li>关于Releases上的变更目录。</li><li>Changelog for releases.</li></ul></li></ul><h1 id="写在最前"><a href="#写在最前" class="headerlink" title="写在最前"></a>写在最前</h1><ul><li>本文的内容主要参考了<a href="https://github.com/EmeryWan">EmeryWan</a>的文章<a href="https://github.com/EmeryWan/Razer-Blade-15-2018-Base-Hackintosh">“雷蛇灵刃15黑苹果”</a>作为入门黑苹果的教程（该文章采用了Clover的引导），<a href="https://github.com/blade15basehackintosh">Razer Blade 15 Base Model Hackintosh</a>的文章<a href="https://github.com/blade15basehackintosh/razerbladehackintosh">“razerbladehackintosh”</a>作为OC（OpenCore）引导转换的参考文档，以及<a href="https://github.com/doanhmaple">doanhmaple</a>的文章<a href="https://github.com/doanhmaple/Razer-Blade-15-Advanced-2018-Hackintosh">“Razer-Blade-15-Advanced-2018-Hackintosh”</a>对ACPI的电池修补工作的patch帮助。这里再次感谢他们对安装黑苹果的分享和付出（Big thanks for <a href="https://github.com/EmeryWan">EmeryWan</a>, <a href="https://github.com/blade15basehackintosh">Razer Blade 15 Base Model Hackintosh</a> and <a href="https://github.com/doanhmaple">doanhmaple</a>!!!)。如果你还需要更多关于黑苹果安装以及优化的教程，可以前往<a href="https://blog.daliansky.net/">黑果小兵的部落阁</a>和<a href="https://github.com/daliansky/Hackintosh">Hackintosh黑苹果长期维护机型EFI及安装教程整理</a>查看，里面有很多杂七杂八的机型配置和安装教程以及一些实用的黑苹果优化。</li><li>跟很多人一样，我开始接触黑苹果这个领域是因为macOS的流畅与稳定性，对码农更友好的unix内核和好看的系统UI。再者由于新冠疫情的影响，我被迫长时间拘留在家中实在无聊🥱，并且找到了很多相同机型的教程，这大大减少了入门黑苹果的难度。</li><li>如果你只想寻求稳定的macOS，建议你前往文章开头的那些文章查看（macOS 10.15），<strong>⚠️这里我只会讲解关于macOS 11 的安装⚠️</strong> ，当然如果你希望充分利用你的显卡（例如GTX1060，GTX1070，GTX960，GTX980等20系之前的英伟达显卡[<strong>RTX系列：RTX2060，RTX2060 SUPER，RTX2070，RTX2070Ti，等类似显卡均不可用 🚫</strong> ]），你可以尝试安装macOS 10.13（High Sierra是支持英伟达显卡的最新的版本，在此之后只能运行你的IGPU，也就是英特尔的集成显卡），请自行爬贴查找教程。</li><li><strong>本文并不会讲解关于OC配置的问题，我相信既然你想升级 macOS Big Sur ，那么你应该具有一定的OC基础知识，再者由于机型的不同大家的OC也都不大一样，这里很难进行细说。如果你真的是新手并且想尝试新系统，那我也不建议你进行操作，首先新系统的bug有很多，它并不是理想的macOS，其次各种驱动和插件对于 macOS Big Sur 都还在测试阶段并不稳定，如果哪里出了问题，一个新手很难去解决。</strong></li><li>看到这里如果你真的打算继续安装macOS 11。那么建议你最好更换为博通的网卡进行使用，USB网卡和英特尔网卡驱动在11里仍然存在众多问题，<del>现无法在11里运行</del> (USB网卡现在可以使用，但需要关闭SIP)。</li><li><strong>同机型或者相似机型的同学们可以参考我的efi，当然在你使用我的efi的时候记得更改里面的三码（我忘改了😭），以免造成设备冲突！</strong></li></ul><h1 id="基础配置-知识"><a href="#基础配置-知识" class="headerlink" title="基础配置 &amp; 知识"></a>基础配置 &amp; 知识</h1><p>由于许多核心Kext都对CLOVER引导停止了维护，OpenCore作为新力军建议提前 研究 &#x2F; 制作 引导，以适应未来的场景。</p><ul><li>CLOVER<ul><li><a href="https://github.com/EmeryWan/Razer-Blade-15-2018-Base-Hackintosh">Razer Blade 15 Base Model (2018) [Clover] [10.15.3 &#x2F; Catalina]</a></li><li><a href="https://github.com/stonevil/Razer_Blade_Advanced_early_2019_Hackintosh">Razer Blade 15 Advanced Model (early-2019) [Clover] [10.14 &#x2F; 10.15]</a> [英文 &#x2F; English]</li><li><a href="https://github.com/stonevil/Razer_Blade_Advanced_early_2019_Hackintosh">Razer Blade 15 Avdanced Model (2018) [Clover] [10.13 &#x2F; High Sierra]</a> [英文 &#x2F; English]</li></ul></li><li>OpenCore<ul><li><a href="https://github.com/blade15basehackintosh/razerbladehackintosh">Razer Blade 15 Base Model (2018) [OpenCore] [10.15.4 &#x2F; Catalina]</a> [英文 &#x2F; English]</li><li><a href="https://github.com/doanhmaple/Razer-Blade-15-Advanced-2018-Hackintosh">Razer Blade 15 Advanced Model (2018) [OpenCore] [10.15.5 &#x2F; Catalina]</a> [英文 &#x2F; English]</li></ul></li><li>OpenCore向导<ul><li><a href="https://dortania.github.io/vanilla-laptop-guide/">vanilla-laptop-guide</a> [英文 &#x2F; English]</li><li><a href="https://blog.xjn819.com/?p=543">使用OpenCore引导黑苹果</a></li><li><a href="https://blog.daliansky.net/OpenCore-BootLoader.html">精解OpenCore</a></li><li><a href="https://blog.daliansky.net/From-Clover-To-OpenCore.html">从Clover到OpenCore</a></li><li><a href="http://imacos.top/2020/03/28/0154/">【持续更新】OpenCore引导-v各种卡及OC引导常见问题解决方案速查表合集</a></li></ul></li><li><strong>其他机型的EFI（不会配的或者想要现成的看这里！）</strong><ul><li><a href="https://github.com/daliansky/Hackintosh">Hackintosh黑苹果长期维护机型EFI及安装教程整理</a></li></ul></li></ul><p><em>以上所有的文章均为 搬运 &#x2F; 转载 如果觉得有用，可以打赏原作者 <strong>（我不是原作者！！！）</strong></em></p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li>更新<ul><li><a href="#819-%E6%9B%B4%E6%96%B0"> macOS Big Sur Beta5 &amp; Public Beta2 （8&#x2F;19 更新）</a></li><li><a href="#813-%E6%9B%B4%E6%96%B0"> macOS Big Sur Public Beta (8&#x2F;13更新)</a></li><li><a href="#84-%E6%9B%B4%E6%96%B0"> macOS Big Sur Beta4 （8&#x2F;4 更新）</a></li><li><a href="#722-%E6%9B%B4%E6%96%B0"> macOS Big Sur Beta3 （7&#x2F;22 更新）</a></li><li><a href="#716-%E6%9B%B4%E6%96%B0-clover-v5120"> Clover v5120 （7&#x2F;16 更新）</a></li><li><a href="#715-%E6%9B%B4%E6%96%B0-%E9%9D%9E-big-sur--catalina"> macOS 10.15.6 （7&#x2F;15 更新）</a></li><li><a href="#711-%E6%9B%B4%E6%96%B0"> 【黑果小兵】macOS Big Sur Beta 2 Installer for OpenCore and PE双EFI分区原版镜像 （7&#x2F;11 更新）</a></li><li><a href="#77-%E6%9B%B4%E6%96%B0">macOS Big Sur Beta2 （7&#x2F;7 更新）</a></li></ul></li><li><a href="#%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98">一些问题</a></li><li><a href="#1%E7%A1%AC%E4%BB%B6%E4%BB%8B%E7%BB%8D">硬件介绍</a></li><li><a href="#2%E6%9C%80%E7%BB%88%E6%95%88%E6%9E%9C">最终效果</a></li><li><a href="#3%E8%A7%A3%E9%94%81bios">解锁BIOS</a></li><li><a href="#4%E5%AE%89%E8%A3%85%E5%89%8D%E7%9A%84%E5%87%86%E5%A4%87">安装前的准备</a></li><li><a href="#5%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85">系统安装</a></li><li><a href="#6%E4%B8%80%E4%BA%9B%E4%BC%98%E5%8C%96">一些优化</a></li><li><a href="#7%E9%99%84%E5%8A%A0u%E7%9B%98%E7%9B%B4%E8%A3%85">附加：U盘直装</a></li><li><a href="#8%E5%8F%82%E8%80%83">参考</a></li><li><a href="#9%E5%8F%98%E6%9B%B4%E7%9B%AE%E5%BD%95">变更目录</a></li></ul><h1 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h1><h2 id="8-19-更新"><a href="#8-19-更新" class="headerlink" title="8&#x2F;19 更新"></a>8&#x2F;19 更新</h2><p>这次官方推迟了一天发布 <code>beta5</code>，版本号 <code>20a5354i</code>，正常 <code>OTA</code> 更新即可。增量包大小 <code>7.15GB</code>，全量包大小 <code>12.13GB</code>。目前版本已无什么大的BUG，更多的为UI BUG，可以日常使用。 <code>Public Beta2</code> 内容与 <code>beta5</code> 一致(版本号也均为 <code>20A5354i</code>)，用哪个看你自己了。 </p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/beta5.jpg" alt="11 beta5"></p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/beta5-1.jpeg" alt="11 beta5"></p><h2 id="8-13-更新"><a href="#8-13-更新" class="headerlink" title="8&#x2F;13 更新"></a>8&#x2F;13 更新</h2><p>对 <code>AirportBrcmFixup</code> 进行了修补， 现在 <code>DW1560 / Brcm94352z</code> 在 <code>Beta4</code> 和 <code>Public Beta</code> 均可正常运行，不会再卡开机boot。    </p><p><code>Beta4</code> 与 <code>Public Beta</code> 内容一致，只是变更了版本号而已，这里我选择使用 <code>Public Beta</code>。   </p><p>版本说明：<br><code>20A5343j</code> ➡️ <code>Public Beta</code><br><code>20A5343i</code> ➡️ <code>Beta4</code></p><p>附上截图：<br><img src="/cn/Open-Core-for-macOS-Big-Sur/image/publicbeta1.png" alt="11 publicbeta"></p><h2 id="8-4-更新"><a href="#8-4-更新" class="headerlink" title="8&#x2F;4 更新"></a>8&#x2F;4 更新</h2><p>苹果官方推出了 macOS Big Sur Beta4，更新过程与之前一致。由于我在 <code>beta4</code> 中有许多软件都出现了问题，因此我决定回到 <code>beta3</code> 版本继续使用，所以这里并没有放出截图。公测版(Public Beta)与 <code>beta4</code> 内容一致，只是更改了版本号。<strong>EFI 现已修复，可以进行 <code>ota</code> 升级至 <code>beta4</code></strong></p><h2 id="7-22-更新"><a href="#7-22-更新" class="headerlink" title="7&#x2F;22 更新"></a>7&#x2F;22 更新</h2><p>苹果官方推出了 macOS Big Sur Beta3，图如下，大小为4.96GB，全量包为12GB多，正常OTA更新即可。</p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/beta3.jpg" alt="11 beta3"></p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/beta3-2.png" alt="11 beta3"></p><p>更新完成，附上截图：</p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/beta3-3.png" alt="11 beta3"></p><p>这次更新也修复了一些bug，例如菜单栏的时钟得到汉化+修复：</p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/beta3-4.png" alt="11 beta3"></p><p>被人疯狂吐槽的电池图标得到更换：</p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/beta3-5.png" alt="11 beta3"></p><p>已知问题：<br>由于苹果在beta3中更新了SDK，现被识别成 <code>macOS 11.0</code> 而非  <code>macOS 10.16</code>，因此一些bash无法识别并安装，这里需要注意⚠️ 。</p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/beta3-6.png" alt="11 beta3"></p><p>可以看到提示需升级 <code>CLT</code>，但我检查过没有新的更新了，因此问题出在SDK中，这需要官方进行适配。</p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/beta3-7.png" alt="11 beta3"></p><p>图中可以看到并无检查到更新：</p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/beta3-8.png" alt="11 beta3"></p><h3 id="关于CLT的修复"><a href="#关于CLT的修复" class="headerlink" title="关于CLT的修复"></a>关于<code>CLT</code>的修复</h3><p>前往 <a href="https://developer.apple.com/download/more/">https://developer.apple.com/download/more/</a> 登陆苹果账号并下载 <code>Xcode 12 beta</code> 和 <code>Command Line Tools for Xcode 12 beta3</code>,下载完成后双击安装 <code>CLT</code> 即可，<code>Xcode 12</code> 需要解压xip文件后拖入应用程序完成安装，<strong>同时删除老版本 <code>Xcode</code></strong>   </p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/CLT.png" alt="CLT"></p><h2 id="7-16-更新-CLOVER-v5120"><a href="#7-16-更新-CLOVER-v5120" class="headerlink" title="7&#x2F;16 更新 (CLOVER v5120)"></a>7&#x2F;16 更新 (<code>CLOVER v5120</code>)</h2><p><code>CloverBootloader</code> 发布了最新版<code>CLOVER</code>引导 <code>v5.0 r5120</code> ，此次更新从 <code>OpenCore</code> 那边搬来了 <code>OcQuirks.efi</code> 和 <code>OpenRuntime.efi</code> 以实现引导 <code>Big Sur</code>。原文如下</p><blockquote><p>   “This release includes OcQuirks.efi and OpenRuntime.efi copied from OpenCore project.”</p><p> “OcQuirks.plist embedded into config.plist and present in Clover GUI as separate menu to tune settings on the fly.”</p><p>“Kernel patching includes pattern for Big Sur.”</p></blockquote><p>这里附上原文章地址供大家下载 <a href="https://github.com/CloverHackyColor/CloverBootloader/releases/tag/5120">点击跳跃至 <code>CloverBootloader</code></a></p><p>考虑到还是有不少人不会配置 <code>OC</code>，我把自己当时使用的CLOVER放入本文，希望可以对你有所帮助。（<code>CLOVER</code> 版本为 <code>v5103</code>，对应系统版本为 <code>10.15.4</code>）</p><h2 id="7-15-更新-（”非-Big-Sur“-Catalina）"><a href="#7-15-更新-（”非-Big-Sur“-Catalina）" class="headerlink" title="7&#x2F;15 更新 （”非 Big Sur“ &#x2F; Catalina）"></a>7&#x2F;15 更新 （”<strong>非 <code>Big Sur</code></strong>“ &#x2F; <code>Catalina</code>）</h2><ol><li>苹果官方推送 <code>macOS 10.15.6</code> 正式版（版本号 <code>19G73</code> ，日常OTA升级即可，无其他问题。</li><li>苹果官方推送 <code>Safari 14.0</code> 测试版 [适用于 <code>macOS 10.15 及更低版本</code>]，内容与 Big Sur 版本里的 <code>Safari</code> 同步。</li></ol><p>更新推送图：[10.15.6 beta4 ➡️  10.15.6]</p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/15.6.jpg" alt="10.15.6正式版"></p><p>更新完毕： </p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/15.6-2.jpg" alt="10.15.6正式版"></p><h2 id="7-11-更新"><a href="#7-11-更新" class="headerlink" title="7&#x2F;11 更新"></a>7&#x2F;11 更新</h2><p>黑苹果大佬更新了他自己制作的恢复镜像，对于新手来说应该是福音！！！</p><p><a href="https://blog.daliansky.net/WeChat-First-macOS-Big-Sur-Beta-2-Installer-for-OpenCore-and-PE-dual-EFI-partition-original-image.html">【黑果小兵】【微信首发】macOS Big Sur Beta 2 Installer for OpenCore and PE双EFI分区原版镜像</a>   </p><p>这里简略的搬运一些描述 ⬇️    </p><p>特点：</p><ul><li>两个独立的<code>EFI</code>引导分区，同时支持 <code>OpenCore</code> &#x2F; <code>PE</code> 引导</li><li>支持 <code>z300</code> &#x2F; <code>b300</code> 等部分台式机直接安装</li><li><code>PE</code> 可连接网络，可远程协助，集成 <code>向日葵</code> 和 <code>AnyDesk</code></li></ul><p><em>©️ 搬运自<a href="https://blog.daliansky.net/">黑果小兵的部落阁</a>，版权为Daliansky所有，侵权立删！©️</em></p><h2 id="7-7-更新"><a href="#7-7-更新" class="headerlink" title="7&#x2F;7 更新"></a>7&#x2F;7 更新</h2><p>苹果刚发布了macOS BigSur的beta2版本，同样为全量包，大小将近10GB，使用普通的OTA更新即可。（下载可能略慢，如果进度条不动请耐心等待，这并不是卡了）</p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/beta2.jpg" alt="beta2"></p><p>下面为更新完成的样子（感觉就变了个版本号…..）</p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/info2.png" alt="info2"></p><p>从macOS Catalina升级后直接为<strong>beta2</strong>版本，因此并不影响后面的操作。</p><p><strong>7&#x2F;7 之前：</strong><br><strong>macOS Catalina ➡️ macOS Big Sur beta1 ➡️ macOS Big Sur beta2</strong><br><strong>7&#x2F;7 之后：</strong><br><strong>macOS Catalina ➡️ macOS Big Sur beta2</strong>   </p><p>不确定的可以自己查看自己的<strong>版本号</strong>：</p><ul><li><code>20A4299v</code>  —beta1</li><li><code>20A4300b</code>  —beta2</li></ul><p>踩过的坑：   </p><ul><li><strong>安装卡引导的请将你的OC更新到7&#x2F;6以后的OC版本，<del>并把kext里的<code>VisualSMC</code>更换为<code>FakeSMC</code></del> (新版 <code>VirtualSMC</code> 已解决该问题，v1.1.5+)</strong></li><li><del>安装后无电池图标🔋或者电量一直为0%（触摸板可用但是设置里识别不出来的，<strong>别问我为啥这跟触摸板也有关系，我也不知道，反正我是这样做就好了😯</strong>），请将kext里的<code>SMCBatteryManager</code>更换为<code>ACPIBatteryManager</code></del> <strong>(新版 <code>VirtualSMC</code> 已解决该问题，v1.1.5+)</strong></li><li>无需在OC里注入显卡信息，如果显示出现问题可尝试删除<code>Device</code>里的显卡注入信息 <strong>（仅限 UHD630，其他型号无视本信息）</strong></li></ul><h1 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h1><p>我也是刚接触黑苹果不久，到我写这篇文章才一个多月？ 还有很多问题是我无法解决的，当然我后面也会努力爬贴查找解决方案，毕竟 <code>macOS 11</code> 我不就是这么过来的嘛。如果有哪位大佬知道如何解决可以联系我，感激不尽！</p><ul><li><del>与10.15的问题一样，睡眠后无法唤醒，开盖就只有黑屏，其他都正常运作</del>  (已解决，现在可以直接关盖睡眠💤 )</li><li><del>无法进入Recovery  （直升无此问题，但这里并不会讲解直升，也许以后会？）</del>  (具体解决方案请移步[<a href="#6-10%E4%BF%AE%E5%A4%8Drecovery%E6%97%A0%E6%B3%95%E8%BF%9B%E5%85%A5">6-10修复Recovery无法进入</a>])</li><li><del>Wi-Fi老断</del>  (更新AirportBrcmFixup)</li><li><del>直升系统导致Safari无法正常运行（过一会就闪退）</del></li><li><del>开机画屏</del>  （显卡注入问题，UHD630 无需再注入显卡id）</li><li><del>电池无显示 &amp; 电量始终为 0%  （具体解决方案请移步 <a href="#%5B6-3%5D%E7%94%B5%E6%B1%A0%E4%B8%8D%E6%98%BE%E7%A4%BA">[6-3]电池修复</a> ）</del> [新版 <code>VirtualSMC</code> 已修复此问题，v1.1.5+]</li><li><del>触摸板可用但是设置偏好里找不到触摸板  （具体解决方案请移步 <a href="#%5B6-3%5D%E7%94%B5%E6%B1%A0%E4%B8%8D%E6%98%BE%E7%A4%BA">[6-3]电池修复</a> ）</del> [新版 <code>VirtualSMC</code> 已修复此问题，v1.1.5+]</li><li><del><code>sip</code> 无法关闭  （需要进入Recovery方可更改，据说直升无此问题）</del> (具体解决方案请移步 <a href="#6-6%E5%85%B3%E9%97%AD-sip">[6-6]关闭 <code>SIP</code></a></li><li><del>时间无法更改自定义设置</del> (<code>beta3</code> 已修复该错误)</li><li><del>蓝牙不可用</del> （已通过更换网卡解决）</li><li><del>USB网卡不可用</del> (<code>chris1111</code>现已更新USB网卡对macOS11的支持，<strong>使用时需关闭 <code>SIP</code>!!!</strong>)</li><li><del>状态栏卡顿</del>   (具体解决方案请移步 <a href="#%5B6-4%5D%E7%8A%B6%E6%80%81%E6%A0%8F%E7%9A%84%E5%8D%A1%E9%A1%BF">[6-4]状态栏卡顿</a> ）</li><li><strong>新增：睡眠时，时间会定格在睡眠前的时候，唤醒后需手动同步时间。</strong></li><li><strong>目前无解：无限实现自动切换音频输出，需手动进行切换</strong></li></ul><h1 id="1-硬件介绍"><a href="#1-硬件介绍" class="headerlink" title="[1]硬件介绍"></a>[1]硬件介绍</h1><table><thead><tr><th align="center">部件</th><th align="center">型号</th><th align="center">最终情况</th></tr></thead><tbody><tr><td align="center">CPU</td><td align="center">Intel Core i7-8750H processor, 6 Cores &#x2F; 12 Threads, 2.2GHz &#x2F; 4.1GHz, 9MB Cache</td><td align="center">无问题（系统将采用UHD630作为显卡）</td></tr><tr><td align="center">IGPU</td><td align="center">Intel UHD 630</td><td align="center">无问题</td></tr><tr><td align="center">GPU</td><td align="center">Nvdia 1060 Max-Q</td><td align="center">除 10.13 High Sierra 安装 WebDriver 外，10.13以上版本皆不可用（建议直接屏蔽掉）</td></tr><tr><td align="center">内存</td><td align="center">16GB dual-channel DDR4-2667MHz, up to 64GB</td><td align="center">无问题</td></tr><tr><td align="center">硬盘</td><td align="center">更换为 Sabrent Rocket NVMe 1TB</td><td align="center">无问题</td></tr><tr><td align="center">网卡</td><td align="center">9560NGW （现已更换为DW1560 &#x2F; BCM94352Z）</td><td align="center">无问题（Windows驱动需要自己下载）</td></tr><tr><td align="center">显示器</td><td align="center">15.6” Full HD 60Hz, 1920 x 1080 IPS</td><td align="center">无问题（可以在60Hz和48Hz之间切换）</td></tr><tr><td align="center">摄像头</td><td align="center">HD webcam (1MP &#x2F; 720P)</td><td align="center">无问题</td></tr><tr><td align="center">扬声器</td><td align="center">Realtek ALC256</td><td align="center">无问题</td></tr><tr><td align="center">耳机</td><td align="center">爱插啥就是啥</td><td align="center">无问题</td></tr><tr><td align="center">麦克风</td><td align="center">鬼晓得啥型号</td><td align="center">无问题</td></tr><tr><td align="center">触控板</td><td align="center">全玻璃</td><td align="center">无问题</td></tr><tr><td align="center">HDMI 接口</td><td align="center"></td><td align="center">直通显卡，除安装 High Sierra 外不可用</td></tr><tr><td align="center">Mini DP 接口</td><td align="center"></td><td align="center">直通显卡，除安装 High Sierra 外不可用</td></tr><tr><td align="center">雷电3</td><td align="center"></td><td align="center">被识别成 USB3.1 ？？？（eGPU目前不确定，应该无法使用）</td></tr><tr><td align="center">大小</td><td align="center">17.8mm x 235mm x 355mm</td><td align="center">这tm还能变？？？</td></tr><tr><td align="center">重量</td><td align="center">2.21 Kg</td><td align="center">还想变的更轻？别做梦了老铁</td></tr><tr><td align="center">电池</td><td align="center">80Wh （好像是，我忘了，反正不耐用…)</td><td align="center">无问题（还能有问题 ？？？）</td></tr><tr><td align="center">电源适配器</td><td align="center">180W</td><td align="center">没PD快充，当然你可以自己试试诱骗器</td></tr></tbody></table><h3 id="1-1-硬件更换-硬件升级"><a href="#1-1-硬件更换-硬件升级" class="headerlink" title="[1-1]硬件更换 &#x2F; 硬件升级"></a>[1-1]硬件更换 &#x2F; 硬件升级</h3><p><strong>网卡 &amp; 蓝牙</strong> </p><table><thead><tr><th align="right">网卡型号</th><th align="left">描述</th></tr></thead><tbody><tr><td align="right"><code>BCM94352Z (DW-1560)</code></td><td align="left">适配macOS 11，双天线，即装即用（用我EFI的话）。<strong>Windows 10需要安装驱动才可使用！</strong></td></tr><tr><td align="right"><code>BCM94360cs2</code></td><td align="left">双天线 + 免驱，但是需要自己另购买转接卡，据说2.4GHz WiFi 与 蓝牙有干扰</td></tr><tr><td align="right"><code>BCM94350ZAE(DW-1820a)</code></td><td align="left">黑果小兵推荐的网卡，在macOS 11中已不是免驱卡，需要自己打驱动补丁，并且需要屏蔽针脚，爱折腾的可以上</td></tr></tbody></table><p><strong>固态硬盘</strong></p><table><thead><tr><th align="right">NVMe硬盘</th><th align="left">4k 支持</th><th align="left">描述</th></tr></thead><tbody><tr><td align="right"><code>Samsung EVO 970 NVMe</code></td><td align="left">否</td><td align="left">一个性能非常优秀的SSD，当然价格也非常的扎心，我知道买不起是我的问题，但是不支持4k使我劝退</td></tr><tr><td align="right"><code>Sabrent Rocket NVMe</code></td><td align="left">是</td><td align="left">由<code>stonevil</code>大佬确认，外网许多评测都对该SSD的性价比表示认可，我也入手了该SSD，顺序读取3500MB&#x2F;s</td></tr><tr><td align="right"><code>WD Black SN750 NVMe</code></td><td align="left">未知</td><td align="left">没人测试过该SSD对4k的支持，不过性价比不错，性能略逊970</td></tr><tr><td align="right"><code>WD Black SN550 NVMe</code></td><td align="left">未知</td><td align="left">750的低配，蓝盘温度相比黑盘温柔很多，当然性能也略低，性价比不错</td></tr><tr><td align="right"><code>Samsung PM981</code> &#x2F; <code>Samsung PM981a</code></td><td align="left">否</td><td align="left">皆为970系列的OEM版，无保不建议，据说安装系统也有一些问题，唯一的优点也就是便宜了</td></tr></tbody></table><p><strong>内存条</strong>[搬运自<code>stonevil</code>的帖子]</p><table><thead><tr><th align="right">内存条型号</th><th align="left">内存大小</th><th align="left">内存频率</th><th align="left">时序</th><th align="left">亚马逊链接</th><th align="left">消息来源</th></tr></thead><tbody><tr><td align="right"><code>Ballistix Sport LT 32GB</code></td><td align="left">2x16Gb</td><td align="left">2666</td><td align="left">CL16</td><td align="left"><a href="https://www.amazon.com/gp/product/B06XRBS4Y5/ref=ppx_yo_dt_b_asin_title_o03_s00?ie=UTF8&psc=1">Amazon</a></td><td align="left"><a href="https://www.tonymacx86.com/members/stonevil.254235/">stonevil</a></td></tr><tr><td align="right"><code>Kingston Technology HyperX Impact 32GB</code></td><td align="left">2x16Gb</td><td align="left">2666</td><td align="left">CL15</td><td align="left"><a href="https://www.amazon.com/dp/B01NAL3TYY/?coliid=I3Q9P4ZU9V435H&colid=1ZGSQH2G88154&psc=1&ref_=lv_ov_lig_dp_it">Amazon</a></td><td align="left"><a href="https://www.reddit.com/r/razer/comments/c1c9wl/razer_blade_15_advanced_ram_upgrade/">Razer Blade 15 Advanced RAM upgrade</a></td></tr><tr><td align="right"><code>Samsung 16GB DDR4 PC4-21300</code></td><td align="left">16Gb (需自己买两片)</td><td align="left">2666</td><td align="left">CL19</td><td align="left"><a href="https://www.amazon.com/Samsung-PC4-21300-2666MHZ-SODIMM-laptop/dp/B07F6N8L3S/ref=sr_1_8?crid=1ZAJ4EFZ2FBQY&dchild=1&keywords=samsung+ram+32gb+ddr4&qid=1596330429&sprefix=samsung+ram+32,aps,158&sr=8-8">Amazon</a></td><td align="left">自己找的</td></tr></tbody></table><p><strong>工具套件</strong></p><table><thead><tr><th align="right">工具</th><th align="left">链接</th></tr></thead><tbody><tr><td align="right"><code>iFixIt Pro Tech Toolkit</code></td><td align="left"><a href="https://www.ifixit.com/Store/Tools/Pro-Tech-Toolkit/IF145-307?o=4">iFixIt</a></td></tr></tbody></table><h1 id="2-最终效果"><a href="#2-最终效果" class="headerlink" title="[2]最终效果"></a>[2]最终效果</h1><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/info.png" alt="info"></p><h1 id="3-解锁BIOS"><a href="#3-解锁BIOS" class="headerlink" title="[3]解锁BIOS"></a>[3]解锁BIOS</h1><h2 id="3-1-Base版-BIOS-解锁"><a href="#3-1-Base版-BIOS-解锁" class="headerlink" title="[3-1]Base版 BIOS 解锁"></a>[3-1]Base版 <code>BIOS</code> 解锁</h2><table><thead><tr><th align="right"></th><th align="left">BIOS版本</th></tr></thead><tbody><tr><td align="right"><code>System BIOS</code></td><td align="left">1.02</td></tr></tbody></table><p> 解锁BIOS可以参考EmeryWan的<a href="https://github.com/EmeryWan/Razer-Blade-15-2018-Base-Hackintosh#3-%E8%A7%A3%E9%94%81bios">教程</a>, 这里就不多描述了。macOS BigSur 对BIOS的大致设定与Catalina一致，有条件的可以尝试解锁CFG。（后面有时间的时候我会尝试一步步教你怎么解锁。）<br> <del><strong>更新：我已上传改好的bios（1.0.2），只可供同机型同版本bios使用！！！</strong></del><br> <strong>此操作具有不可逆的危险，有可能刷坏bios导致无法点亮，请谨慎操作！！！</strong>   </p><h2 id="3-1-1-提取机器现使用的-BIOS"><a href="#3-1-1-提取机器现使用的-BIOS" class="headerlink" title="[3-1-1]提取机器现使用的 BIOS"></a>[3-1-1]提取机器现使用的 <code>BIOS</code></h2><p>将 <code>Tools</code> 里的 <code>AFUWINGUI</code> 打开，在信息页面点击底部的 <code>储存</code> &#x2F; <code>Save</code> 进行BIOS提取。↓    </p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/bios-1.png" alt="bios">   </p><p>文件名和存放位置按自己喜好，记得住就行。↓</p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/bios-2.png" alt="bios">   </p><p>接着打开 <code>Tools</code> 里的 <code>AMIBCP</code>，左上角菜单栏点击 <code>File</code> → <code>Open</code> 打开刚刚提取的BIOS文件。↓   </p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/bios-3.png" alt="bios">   </p><p>打开后在左侧导航栏里找到 <code>  </code> → <code>Setup</code> → <code>Chipset</code>，并将右侧的 <code>System Agent Configuration</code> 的 <code>Acces/Use</code> 由 <code>Default</code> 改为 <code>USER</code>。</p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/bios-4.png" alt="bios">   </p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/bios-5.png" alt="bios">   </p><p>改完显示如下：↓   </p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/bios-6.png" alt="bios">   </p><p>接着进入：</p><ul><li><code>Setup</code><ul><li><code>Advanced</code><ul><li><code>Power &amp; Performance</code></li></ul></li></ul></li></ul><p>将以下项目权限从 <code>Default</code> 修改为 <code>USER</code>：</p><ul><li><code>Power &amp; Performance</code></li><li><code>CPU - Power Management Control</code></li><li><code>Intel(R) Speed Shift Technology</code></li></ul><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/bios-7.png" alt="bios">  </p><p>最后进入：</p><ul><li><code>Setup</code><ul><li><code>Advanced</code><ul><li><code>Power &amp; Performance</code><ul><li><code>View/Configure CPU Lock Configuration</code></li></ul></li></ul></li></ul></li></ul><p>将以下项目权限从 <code>Default</code> 修改为 <code>USER</code>：</p><ul><li><code>CFG Lock</code></li><li><code>Overclocking Lock</code></li></ul><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/bios-8.png" alt="bios">   </p><p>打开左上角菜单栏 <code>File</code> → <code>Save As...</code>，将修改好的BIOS文件保存到你记得住的地方，名字也是一样。保存完毕后即可关闭 <code>AMIBCP</code>。</p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/bios-9.png" alt="bios"> </p><p>回到 <code>AFUWINGUI</code>，点击底部的按钮 <code>开启</code> &#x2F; <code>Open</code> 来读取刚才修改保存好的BIOS文件。  </p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/bios-10.png" alt="bios"> </p><p><strong>刷入前请尽可能关闭所有程序(包括杀毒软件)，以防止刷入BIOS过程被中断！！！</strong><br>读取完毕后点击底部按钮 <code>刷新</code> &#x2F; <code>Flash</code> 即可开始刷入修改好的BIOS。</p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/bios-11.png" alt="bios"> </p><p>刷入中途可能出现卡顿，假死等状况(反正我是没遇到)请不要关闭软件或关闭电脑以免造成不可逆的损失！</p><h2 id="3-2-Advanced版-BIOS解锁"><a href="#3-2-Advanced版-BIOS解锁" class="headerlink" title="[3-2]Advanced版 BIOS解锁"></a>[3-2]Advanced版 BIOS解锁</h2><p>由于我使用的并不是Advanced版本，所以我无法提供具体的图文教程，你们可以参考stonevil大佬的帖子<a href="https://github.com/stonevil/Razer_Blade_Advanced_early_2019_Hackintosh">Razer_Blade_Advanced_early_2019_Hackintosh</a> 我Base版修改也是基于他的文章，这里再次感谢stonevil！！！</p><p><strong>此操作具有不可逆的危险，有可能刷坏bios导致无法点亮，请谨慎操作！！！</strong></p><h1 id="4-安装前的准备"><a href="#4-安装前的准备" class="headerlink" title="[4]安装前的准备"></a>[4]安装前的准备</h1><h2 id="4-1-BIOS设置"><a href="#4-1-BIOS设置" class="headerlink" title="[4-1]BIOS设置"></a>[4-1]BIOS设置</h2><ul><li><p><code>Advanced</code></p><ul><li><code>Power &amp; Performance</code><ul><li><code>CPU - Power Management Control</code><ul><li><code>CPU Lock Configuration</code><ul><li><code>CFG Lock</code> 设置成 <code>Disabled</code></li><li><code>Overclocking Lock</code> 设置成 <code>Disabled</code></li></ul></li></ul></li></ul></li><li><code>Thunderbolt(TM) Configuration</code><ul><li><code>Security Level</code> 设置成 <code>No Security</code></li></ul></li></ul></li><li><p><code>Chipset</code></p><ul><li><code>System Agent (SA) Configuration</code><ul><li><code>Graphics Configuration</code><ul><li><code>DVMT Pre-Allocated</code>  设置成 <code>64</code></li><li><code>DVMT Total Gfx Mem</code>  设置成 <code>MAX</code></li></ul></li></ul></li></ul></li><li><p><code>Security</code></p><ul><li><code>Secure Boot</code> 设置成 <code>Disabled</code></li></ul></li><li><p><code>Boot</code></p><ul><li><p><code>Fast Boot</code> 设置成 <code>Disabled</code></p></li><li><p><code>CSM Configuration</code></p><ul><li><code>CSM Support</code> 设置成 <code>Disabled</code></li></ul></li></ul></li></ul><h2 id="4-2-软件下载"><a href="#4-2-软件下载" class="headerlink" title="[4-2]软件下载"></a>[4-2]软件下载</h2><ul><li><strong>macOS下</strong><ul><li>下载好的macOS Big Sur 安装app</li><li>一个可以正常工作的 macOS</li><li><a href="https://www.vmware.com/products/fusion.html">VMWare Fusion</a> （虚拟机软件,普通版或pro版都可以）</li><li><a href="http://dl.paragon-software.com/free/VMDK_MOUNTER_2014.dmg">Paragon VMDK Mounter</a> （挂载虚拟机的软件）</li><li>OpenCore 0.6.0 自编译 （可以直接去下载 Williambj1 每天更新编译好的OC<a href="https://github.com/williambj1/OpenCore-Factory/releases">（点击前往Opencore-Factory）</a>, 也可以自行编译官方的源码<a href="https://github.com/acidanthera/OpenCorePkg">（点击前往OpenCorePkg）</a>。</li></ul></li><li><strong>Windows下</strong><ul><li>一个可以正常工作的 Windows （我相信在坐的各位都有吧🤔）</li><li>一个可以编辑代码的软件<ul><li>Sublime Text，Visual Studio Code 等等</li></ul></li><li>VMWare WorkStation Pro （注意这里必须是pro版本⚠️）</li><li>Unlocker 302</li></ul></li></ul><h1 id="5-系统安装"><a href="#5-系统安装" class="headerlink" title="[5]系统安装"></a>[5]系统安装</h1><p><em>安装过程基于远景论坛的大佬Bat.bat的帖子<a href="http://bbs.pcbeta.com/forum.php?mod=viewthread&tid=1862049&highlight=big+sur">「教程」简单扯扯用 VMWare 在实体机上装 Big Sur</a>，侵权立删</em></p><h2 id="以下步骤均在macOS上执行"><a href="#以下步骤均在macOS上执行" class="headerlink" title="以下步骤均在macOS上执行"></a>以下步骤均在macOS上执行</h2><p>首先在 macOS 中先分一个新的 APFS 容器。<strong>⚠️注意，这里指的一个独立的新容器，建议分60G 以上，越大越好</strong>。这个新的容器就是你要安装系统的磁盘，分完请记住该容量的大小，后面会用到</p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/disk1.jpg" alt="disk1"></p><p>打开VMWare Fusion<br>用 VMWare Fusion 新建一个自定义虚拟机</p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/creatCostom.png" alt="vm1"></p><p>系统随便选一个苹果系统就行，我这里选的<code>10.15</code>。</p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/creatCostom2.png" alt="vm2"></p><p>点击<code>继续</code></p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/creatCostom3.png" alt="vm3"></p><p>点击<code>自定设置</code></p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/creatCostom4.png" alt="vm4"></p><p>点击<code>继续</code>，<strong>这里请记住虚拟机存放的位置，后面会用到。</strong></p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/creatCostom5.png" alt="vm5"></p><p>点击<code>处理器与内存</code></p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/creatCostom6.png" alt="vm6"></p><p>拖动小标到8G大小，这里调整内存的主要原因是怕安装的时候卡住。。。</p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/creatCostom7.png" alt="vm7"></p><p>设置完左上角点击关闭即可。</p><p>接着用 Paragon VMDK Mounter 打开新建的虚拟机，挂载刚创建的分区。<strong>（我相信你们安装VMDk的时候都会卡在激活页面，这里给你们提供了一些有用的帮助：VMDK-MOUNTER-2014-434979472，51537-43450-1B2D9-8213A，怎么填就不用我说了吧，傻子都会😊）</strong></p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/vmdk1.png" alt="vmdk1"></p><p>点击<code>Attach Selected</code>。这里由于我是在macOS 11 上截的图，因此出现了“⚠️”，10.15不会出现这个问题</p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/vmdk2.png" alt="vmdk2"></p><p>如果你出现了此问题，并显示以下窗口：</p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/vdm1.jpg" alt="vdm1"></p><p>请前往<code>系统偏好设置</code> ➡️ <code>安全性与隐私</code> ➡️ <code>通用</code>，解除左下角的锁定然后允许操作即可</p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/vdm2.jpg" alt="vdm2"></p><p>打开<code>磁盘工具</code>，将挂载上的 VMDK （显示为外置磁盘）格式化成 HFS（macOS扩展（日志式）），名字就叫 <code>Big Sur Installer</code>。</p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/disk2.jpg" alt="disk2"></p><p><strong>备注：抹盘应选择红框下方的子磁盘，这里标错了很抱歉</strong></p><p>完成格式化后关闭磁盘工具，用如下命令将 Big Sur 安装程序写入 VMDK磁盘。   </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /Applications/Install\ macOS\ Big\ Sur\ Beta.app/Contents/Resources/createinstallmedia --volume /Volumes/Big\ Sur\ Installer  </span><br></pre></td></tr></table></figure><p>备注：这段口令只适用与跟我文件存放相同位置的人，你可以自己拖动安装包和磁盘进入终端（拖进）以对齐文件位置。输入正确后终端询问你是否继续，打 <code>y</code> 即可。</p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/code.jpg" alt="code"></p><p>进入磁盘工具卸载VMDK分区，然后打开虚拟机，如果能进安装界面，直接点关机。   </p><p><del>打开 OC 的 <code>config.plist</code>，使用<code>OCC</code>，<code>Xcode</code>或者<code>PaperTree</code>都行，在<code>NVRAM</code>里的 <code>7C436110-AB2A-4BBB-A880-FE41995C9F82</code> 下 <code>Add</code> 添加 <code>booter-fileset-basesystem</code> 和 <code>booter-fileset-kernel</code>，类型为 <code>Data</code>，值为 <code>&lt;00&gt;</code> (OCC里填<code>00</code>即可)，<code>Block</code> 加不加无所谓，毕竟我们不需要刷新这个变量。</del> </p><p><del>这里我以<code>OCC</code>为例，其他工具同理。</del></p><p><strong>(新版 <code>OpenCore</code> 已不需要此步骤，请略过！)</strong></p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/config.png" alt="config"></p><p>将你制作好的安装盘虚拟机拷贝到<code>nas</code>或者<code>exfat</code>格式的磁盘中作为中介，至此在macOS上的操作就结束了🔚。</p><h2 id="以下步骤均在Window下执行"><a href="#以下步骤均在Window下执行" class="headerlink" title="以下步骤均在Window下执行"></a>以下步骤均在Window下执行</h2><p>首先把刚才创建的虚拟机转进 Windows，在上面👆操作的最后一步里你用什么存的就从那里转移出来（我咋这么多废话😯）</p><p>解锁下载好的 <code>VMWare Workstation Pro</code> （作为一个🇨🇳人，你还不会这种最基础的东西？百度一堆好吧👌）</p><p>导入刚才转移过来的虚拟机（双击vmx文件就行。。。）</p><p>用 <code>Sublime Text</code>，<code>Visual Studio Code</code> 或其他杂七杂八能用的工具打开虚拟机的 <code>vmx</code> 文件，该改的该，该加的加</p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/vmp1.png" alt="vmp1"></p><p><strong>下面的是我自己随便生成的，不要拿来登陆⚠️</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">board-id.reflectHost = &quot;TRUE&quot; </span><br><span class="line">board-id = &quot;Mac-937A206F2EE63C01&quot;</span><br><span class="line">hw.model.reflectHost = &quot;FALSE&quot;</span><br><span class="line">hw.model = &quot;MacBookPro15,1&quot;</span><br><span class="line">serialNumber.reflectHost = &quot;FALSE&quot;</span><br><span class="line">serialNumber = &quot;D25XVQYDKGYG&quot;</span><br><span class="line">smbios.reflectHost = &quot;FALSE&quot;</span><br></pre></td></tr></table></figure><p>备注：第一行的参数应该文件里已经包含了，可以不用再添加一遍。参数顺序无所谓，放哪里都行。(看图⬇️)</p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/vmp2.png" alt="vmp2"></p><p><strong>进入 <code>任务管理器</code> ，关掉所有关于 <code>VM</code> 的进程！</strong></p><p>接着运行你下载好的 <code>Unblocker 302</code>，(右键管理员运行 <code>win-install</code>，注意必须是以管理员运行⚠️）<strong>如果不运行的话你会发现后面打开虚拟机的时候一直重启（没错，无限重启，贼恶心🤮）</strong></p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/unlocker.png" alt="unlocker302"></p><p>接着进入<code>VMWare Workstation Pro</code> ➡️ 点击 <code>编辑虚拟机设置</code></p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/vmp3.png" alt="vmp3"></p><p>点击 <code>添加</code></p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/vmp4.png" alt="vmp4"></p><p>点击 <code>硬盘</code> ➡️ 点击 <code>下一步</code></p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/vmp5.png" alt="vmp5"></p><p>点击 <code>SATA</code> ➡️ 点击 <code>下一步</code></p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/vmp6.png" alt="vmp6"></p><p>点击 <code>使用物理磁盘</code> ➡️ 点击 <code>下一步</code></p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/vmp7.png" alt="vmp7"></p><p>点击 <code>设备</code> 角标 选择 你自己要安装的磁盘分区（<strong>开头叫你分的那个APFS容器</strong>）所对应的磁盘，然后选择 <code>使用单个分区</code> ➡️ 点击 <code>下一步</code> <strong>(忘了是哪个盘？我来帮你想想，找到了！是这一步分的盘！<a href="#%E4%BB%A5%E4%B8%8B%E6%AD%A5%E9%AA%A4%E5%9D%87%E5%9C%A8macos%E4%B8%8A%E6%89%A7%E8%A1%8C">点我传送</a>)</strong></p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/vmp8.png" alt="vmp8"></p><p>点击在文章开头创建的 <code>APFS</code> 容器 (<strong>请根据分区大小判断⚠️</strong>)  ➡️ 点击 <code>下一步</code></p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/vmp9.png" alt="vmp9"></p><p>点击 <code>完成</code></p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/vmp10.png" alt="vmp10"></p><p>到这应该已经成功添加物理安装磁盘，我们现在可以在设备列表里看到这个刚刚添加的磁盘，确认无误后点击 <code>确定</code> 即可</p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/vmp11.png" alt="vmp11"></p><p>虚拟机开机，直接进安装程序安装，无需再抹盘，然后各种点，装机总会吧…..   装完到选择语言的时候就可以关掉虚拟机了</p><p>到此，虚拟机安装就正式结束了。现在你可以重启电脑💻，然后用 OC 开机，继续刚才的激活向导，设置完就可以吃螃蟹了🦀️</p><p><strong>恭喜你，现在已经完成了macOS Big Sur 的系统安装🎉</strong></p><h1 id="6-一些优化"><a href="#6-一些优化" class="headerlink" title="[6]一些优化"></a>[6]一些优化</h1><h2 id="6-1-打开TRIM"><a href="#6-1-打开TRIM" class="headerlink" title="[6-1] 打开TRIM"></a>[6-1] 打开TRIM</h2><p>如果你将系统装在了固态硬盘上，应开启TRIM。这样可以防止系统对硬盘进行多次擦写从而确保硬盘寿命。（什么？你问我机械硬盘要开吗？反正我是开了）</p><p>进入终端，填入以下指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo trimforce enable</span><br></pre></td></tr></table></figure><p>完成后系统会要求你重启</p><h2 id="6-2-洗白序列号-三码"><a href="#6-2-洗白序列号-三码" class="headerlink" title="[6-2]洗白序列号 &#x2F; 三码"></a>[6-2]洗白序列号 &#x2F; 三码</h2><p>自行进入OCC打开 <code>config.plist</code> ,在 <code>PlatformInfo</code> 里的 <code>Generic</code> 生成三码即可</p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/occ.jpg" alt="occ"></p><p><strong>注意，如果你打算用 OpenCore 引导 Windows，请将 <code>System UUID</code> 一栏修改成你BIOS对应的UUID，否则导致Windows的所有软件激活失效！⚠️</strong></p><h2 id="6-3-电池不显示-最新版的-VirtualSMC-已修复该问题！"><a href="#6-3-电池不显示-最新版的-VirtualSMC-已修复该问题！" class="headerlink" title="[6-3]电池不显示 (最新版的 VirtualSMC 已修复该问题！)"></a>[6-3]电池不显示 <strong>(最新版的 <code>VirtualSMC</code> 已修复该问题！)</strong></h2><p><del>将kext里的 <code>SMCBatteryManager</code> 换成 <code>ACPIBatteryManager</code> 即可解决问题（前提是你的dsdt是补好的！）</del></p><h2 id="6-4-状态栏的卡顿"><a href="#6-4-状态栏的卡顿" class="headerlink" title="[6-4]状态栏的卡顿"></a>[6-4]状态栏的卡顿</h2><h3 id="6-4-1-删除-WiFiAgent-解锁卡顿问题"><a href="#6-4-1-删除-WiFiAgent-解锁卡顿问题" class="headerlink" title="[6-4-1]删除 WiFiAgent 解锁卡顿问题"></a>[6-4-1]删除 WiFiAgent 解锁卡顿问题</h3><p>big sur的卡顿是因为找不到wifi设备造成的！那么使用usb网卡、无网卡的用户就需要删掉 <code>WiFiAgent</code> 这个启动项，这里只是移动了下位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$mount -o rw /</span><br><span class="line"></span><br><span class="line">$cd /System/Library/LaunchAgents</span><br><span class="line"></span><br><span class="line">$sudo mv com.apple.wifi.WiFiAgent.plist ../LaunchAgentsIgnored</span><br></pre></td></tr></table></figure><p>运行完毕重启即可</p><p><del>提示：USB网卡现在还无法在macOS Big Sur 上使用！当然说不定以后可以（说的都是什么废话…）</del> <code>chris1111</code>已经更新支持黑苹果的USB网卡驱动，这里附上链接🔗供大🔥🚪查看 <a href="https://github.com/chris1111/Wireless-USB-Big-Sur-Adapter">点击跳转至<code>Wireless-USB-Big-Sur-Adapter</code></a><br>**使用时需要关闭 <code>SIP</code> !!! <a href="#6-6%E5%85%B3%E9%97%AD-sip--authenticated-root">点击跳转至[6-6]关闭 <code>SIP</code> &amp; <code>Authenticated-root</code></a> </p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/usb.png" alt="usb"></p><h3 id="6-4-2-直接更换博通网卡"><a href="#6-4-2-直接更换博通网卡" class="headerlink" title="[6-4-2]直接更换博通网卡"></a>[6-4-2]直接更换博通网卡</h3><p>删除<code>WiFiAgent</code>只是缓兵之计，除了插网线否则你还是连不上网，因此给电脑更换博通网卡才是最好的解决方法。（而且雷蛇拆机并不会影响保修，不像某些厂商….）</p><p>整个机身共有 10 颗螺丝分一种规格，你需要一把 <code>T5</code> 的螺丝刀来打开它，卸下所有螺丝即可拆下背板。</p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/laptop1.jpg" alt="laptop"></p><p>网卡位于机器的右下角，插槽处被一张防静电胶布覆盖，需要揭开它。</p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/laptop2.jpg" alt="laptop"></p><p>记得断开天线，不会吧，不会吧，不会有人不知道吧。</p><p>换好装上背板即可</p><h2 id="6-5-开启HiDPI"><a href="#6-5-开启HiDPI" class="headerlink" title="[6-5]开启HiDPI"></a>[6-5]开启HiDPI</h2><p><strong>开启教程选择下面 <code>[6-5-1]将旧系统的 HiDPI 转移到 macOS 11</code> 或 <code>[6-5-2]通过 one-key-hidpi 开启</code> 其中一个即可。</strong>  </p><p>由于macOS11对于安全性更强的要求，macOS Catalina中解锁sle的命令已经失效了。尽管如此，HiDPI的开启不受影响，传统开启的方法是把显示器文件写入进系统目录 <code>/System/Library/Displays/Contents/Resources/Overrides</code>，这样做有风险而且升级后失效。  </p><p>把显示器文件写入目录 <code>/Library/Displays/Contents/Resources/Overrides</code> 能取得相同效果，而且这样做的好处有：</p><ul><li>支持 Big Sur</li><li>升级系统后不需要重新开启</li><li>保持系统目录纯净</li><li>容易恢复，删除<code>/Library/Displays/</code> 文件夹即可</li></ul><h3 id="6-5-1-将旧系统的-HiDPI-转移到-macOS-11-需要你旧系统已开启HiDPI"><a href="#6-5-1-将旧系统的-HiDPI-转移到-macOS-11-需要你旧系统已开启HiDPI" class="headerlink" title="[6-5-1]将旧系统的 HiDPI 转移到 macOS 11 (需要你旧系统已开启HiDPI)"></a>[6-5-1]将旧系统的 HiDPI 转移到 macOS 11 <strong>(需要你旧系统已开启HiDPI)</strong></h3><p>开启方法：</p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/hidpi1.png" alt="hidpi"></p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/hidpi2.png" alt="hidpi"></p><p>结果展示：</p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/hidpi3.png" alt="hidpi"></p><p><em>备注：因为我并没有开启HiDPI因此这些图片都取自hxd的<a href="https://wanan.run/2020/07/01/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%AE%89%E8%A3%85Big%20Sur%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/#more">博客</a>里, 灵感来自远景大佬郑世祺，<a href="http://bbs.pcbeta.com/viewthread-1862148-1-1.html">来源</a>。</em> <em>版权归郑世祺所有，侵权立删©️</em></p><h3 id="6-5-2-通过-one-key-hidpi-开启"><a href="#6-5-2-通过-one-key-hidpi-开启" class="headerlink" title="[6-5-2]通过 one-key-hidpi 开启"></a>[6-5-2]通过 <code>one-key-hidpi</code> 开启</h3><p>操作原理与开头说的一致，这里只是将目标位置进行更改，你需要做的就是打开 <code>终端</code>，<br>并输入以下代码：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/mlch911/one-key-hidpi/master/hidpi.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><p><em><code>one-key-hidpi</code>由 <code>xzhih</code> 大佬开发，并由 <code>mlch911</code> 进行fork并对目标位置进行更改。在这里再次感谢！<a href="https://github.com/xzhih/one-key-hidpi/issues/136">点击进入issue查看详情🔎</a></em>   </p><p>接着按照你自己的机型设置对应的设备和分辨率，设置完成后重启即可生效。  </p><h2 id="6-6-关闭-SIP-Authenticated-root"><a href="#6-6-关闭-SIP-Authenticated-root" class="headerlink" title="[6-6]关闭 SIP &amp; Authenticated-root"></a>[6-6]关闭 <code>SIP</code> &amp; Authenticated-root</h2><p>由于在 macOS Big Sur 中，苹果更新了安全机制，新增了 <code>authenticated root</code> 这也使得开机从只读快照启动而非直接系统文件启动，因此老方法 <code>E7030000</code> 已失效，但是根据 dortania 向导的提示，现在需使用 <code>FF0F0000</code> 关闭 <code>SIP</code>。</p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/sip-1.png" alt="sip"></p><p>具体操作：<br>打开 <code>config.plist</code>  </p><ul><li>NVRAM<ul><li>add &#x2F; 添加<ul><li>7C436110-AB2A-4BBB-A880-FE41995C9F82<ul><li><code>csr-active-config</code><ul><li><code>FF0F0000</code> ｜ 数据类型：<code>DATA</code></li></ul></li></ul></li></ul></li><li>block &#x2F; 删除<ul><li>7C436110-AB2A-4BBB-A880-FE41995C9F82<ul><li><code>csr-active-config</code></li></ul></li></ul></li></ul></li></ul><p>图例：</p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/sip-2.png" alt="sip"></p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/sip-3.png" alt="sip"></p><p>修改完成后保存关闭即可，重启查看效果。   </p><h2 id="6-7-修改系统快照-这里并不推荐修改，因为会失去OTA的机会！"><a href="#6-7-修改系统快照-这里并不推荐修改，因为会失去OTA的机会！" class="headerlink" title="[6-7]修改系统快照 [这里并不推荐修改，因为会失去OTA的机会！]"></a>[6-7]修改系统快照 [<strong>这里并不推荐修改，因为会失去OTA的机会！</strong>]</h2><p><em>感谢macrumors论坛的ASentientBot会员，是他提供的方法</em>   </p><ol><li><p>关闭SIP和authenticated-root（这是Big Sur新增的安全功能），关闭方法请查阅上面的章节<a href="#6-6%E5%85%B3%E9%97%AD-sip--authenticated-root">[6-6]关闭 <code>SIP</code> &amp; Authenticated-root</a>。   </p></li><li><p>重启后打开终端执行 <code>sudo -s</code> 切换到root。</p></li><li><p>输入 <code>diskutil list</code> 找到 Big Sur 的只读快照。快照名会叫<code>disk#s#s#</code>，如下图所示，我这里的快照叫 <code>disk3s5s1</code>。<br><img src="/cn/Open-Core-for-macOS-Big-Sur/image/snapshot-1.png" alt="snapshot"></p></li><li><p>输入 <code>diskutil mount disk#s#</code> 挂载真正的系统分区（对于我而言就是<code>diskutil mount disk3s5</code>）系统分区一般来说为快照分区上面的磁盘区（看上面那个图），例如你的快照为 <code>disk1s2s1</code>，那么你的系统分区为 <code>disk1s2</code>。</p></li><li><p>运行命令 <code>/S*/L*/F*/apfs.fs/C*/R*/apfs_systemsnapshot -v &quot;/Volumes/你挂载的分区名&quot; -r &quot;&quot;</code>，这个命令会允许你从真的系统盘启动。<strong>注意！你挂载的分区名为你的系统盘名称 + 1，比如快照盘叫 <code>Macintosh HD</code>，那么挂载后的系统盘就叫 <code>Macintosh HD 1</code>。当然你也可以在磁盘工具中的装载点看到</strong><br><img src="/cn/Open-Core-for-macOS-Big-Sur/image/snapshot-3.png" alt="snapshot"></p></li><li><p>如果你想删除掉以前的只读快照，终端运行 <code>sudo diskutil apfs deletesnapshot</code>即可。</p></li></ol><h2 id="6-8-启用修改系统文件"><a href="#6-8-启用修改系统文件" class="headerlink" title="[6-8]启用修改系统文件"></a>[6-8]启用修改系统文件</h2><p>在操作完上述的<a href="#6-6%E5%85%B3%E9%97%AD-sip--authenticated-root">[6-6]关闭<code>SIP</code> &amp; Authenticated-root</a> 和 <a href="#6-7%E4%BF%AE%E6%94%B9%E7%B3%BB%E7%BB%9F%E5%BF%AB%E7%85%A7">[6-7]修改系统快照</a>后，重启在终端输入 <code>mount -uw /</code>即可启用修改系统文件。</p><h2 id="6-9-USB定制驱动"><a href="#6-9-USB定制驱动" class="headerlink" title="[6-9]USB定制驱动"></a>[6-9]USB定制驱动</h2><p>通过定制USB接口驱动可以让你电脑的USB接口正常工作，同时也能间接解决睡眠问题（当然我这个睡眠不是通过这个解决的。。。）定制的方法也很简单，全程花费十分钟左右。   </p><p>准备工具：</p><ul><li>macOS Big Sur</li><li>Hackintool</li><li>一个有线鼠标或者其他 <code>USB2.0</code> 接口的硬件用作后续的测试</li><li>一个 <code>USB 3.0</code> 的U盘或其他同接口的硬件用作后续的测试（ <code>USB3.1</code>，<code>3.2</code> 都可，这里只是用于测试接口）</li><li>USBInjectAll.kext (这里我就不提供了，网上搜索一堆)</li></ul><p>如何分辨 <code>USB2.0</code> 和 <code>USB3.0</code> ？   </p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/usb_customize.png" alt="usb_customize"><br><em>图片转载自网页 <a href="https://heipg.cn/tutorial/custom-usbports-for-hackintosh.html">使用 Hackintool 定制黑苹果 USB 端口，适用于 Clover &amp; OpenCore</a>,侵权立删©️</em></p><p>挂载 <code>EFI</code> 分区，用 <code>终端</code> 或者 <code>OCC</code> 都行<br>将 <code>USBInjectAll.kext</code> 放入 <code>/EFI/OC/Kexts</code>。</p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/usb_customize-1.png" alt="usb_customize"></p><p>将 <code>USBInjectAll.kext</code> 添加到 <code>config.plist</code> 中，并将底部 <code>Quirks</code> 窗口中的 <code>XhciPortLimit</code> 勾上以解除USB接口限制。   </p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/usb_customize-2.png" alt="usb_customize"></p><p>设置完成后保存并重启macOS  </p><p>解压 <code>Tools</code>里的 <code>Hackintool</code> 并安装它，然后打开该软件。  </p><p>进入 <code>Hackintool</code> 后跳转到 <code>USB</code> 窗口（顶部），你会看到一堆USB接口。（<strong>由于我已经定制过USB，因此图里的接口比较少</strong>）   </p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/usb_customize-3.png" alt="usb_customize"></p><p>接着将你准备好的 <code>USB2.0</code> 设备把电脑上所有的接口都插一遍并记录下来。(直接修改 <code>连接器种类</code>就行）<br>如图所示，当我插入我的 <code>USB2.0</code> （我的鼠标）设备时，我的 <code>HS01</code> 接口检测到了设备插入，那么对应的就是 <code>HS01</code> ➡️ <code>USB2.0</code>。<br><img src="/cn/Open-Core-for-macOS-Big-Sur/image/usb_customize-4.png" alt="usb_customize"></p><p>记录下来后将你的 <code>USB2.0</code> 设备插入另外一个接口，这时可以看到 <code>HS02</code> 检测到了设备的插入，那么对应的就是 <code>HS02</code> ➡️ <code>USB2.0</code><br><img src="/cn/Open-Core-for-macOS-Big-Sur/image/usb_customize-5.png" alt="usb_customize"></p><p>接着将你的USB3.0，Type-C都轮流测试一遍并记录下来（直接修改 <code>连接器种类</code>就行）<br><img src="/cn/Open-Core-for-macOS-Big-Sur/image/usb_customize-6.png" alt="usb_customize"></p><p><strong>测试Type-C时，记得两面都要测试。如果只有一面有检测到，那么就是 <code>TypeC+Sw</code>。如果两面都有检测到，那么就是 <code>TypeC</code></strong>  </p><p><strong>同时需要注意系统最多支持占用 <code>15</code> 条 <code>USB线路</code>，<code>USB2.0</code> 或着叫 <code>HSxx</code> 的端口占用 <code>1</code> 条 <code>线路</code>， <code>USB3.0</code>， <code>TypeC</code>， <code>TypeC+Sw</code> 或者叫 <code>SSxx</code> 的端口占用 <code>2</code> 条 <code>线路</code>！因此如果它们加起来超过 <code>15</code> 条 <code>线路</code>，那么你就需要做出取舍！如果你的 <code>USB线路</code> 加起来没有 <code>15</code> 条或者 刚好 <code>15</code> 条(比如我），那没事了当我没说</strong>    </p><p>最后，定制完成后，你需要删除多余无用的接口。（确保你所有的接口都测试过了！，测试完成后剩下这些灰色的接口就是无用的接口，选中点击下方的 <code>➖</code> 即可删除）  </p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/usb_customize-7.png" alt="usb_customize">  </p><p>删除完成后，点击右侧的到处按钮，到处定制好的USB驱动。  </p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/usb_customize-8.png" alt="usb_customize">  </p><p>导出的驱动位于桌面，你会看到生成的这三个文件，在 <code>OpenCore</code> 中，我们只需要这个 <code>USBPorts.kext</code>。将 <code>USBPorts.kext</code>拖入 <code>/EFI/OC/Kexts</code> 并将其添加到 <code>config.plist</code> 中。  </p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/usb_customize-9.png" alt="usb_customize"></p><p>将 <code>USBInjectAll.kext</code> 从 <code>config.plist</code> 中删除，并取消勾选下方 <code>Quirks</code> 窗口中的 <code>XhciPortLimit</code></p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/usb_customize-10.png" alt="usb_customize"></p><p>设置完成后保存重启即可完成USB定制。</p><h2 id="6-10-修复Recovery无法进入"><a href="#6-10-修复Recovery无法进入" class="headerlink" title="[6-10]修复Recovery无法进入"></a>[6-10]修复Recovery无法进入</h2><p>用 <code>OCC</code> 打开 <code>config.plist</code>,<br>找到 <code>UEFI</code> -&gt; <code>APFS</code> -&gt; <code>JumpstartHotPlug</code> 勾选即可</p><h2 id="6-11-解决App-Store无法登录的问题"><a href="#6-11-解决App-Store无法登录的问题" class="headerlink" title="[6-11]解决App Store无法登录的问题"></a>[6-11]解决App Store无法登录的问题</h2><p>重置 <code>NVRAM</code> 即可解决该问题<br>打开终端，输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nvram -c</span><br></pre></td></tr></table></figure><p>接着输入用户密码后回车，不必理会提示信息，重启即可</p><h2 id="6-12-修改显存大小-心理优化"><a href="#6-12-修改显存大小-心理优化" class="headerlink" title="[6-12]修改显存大小 (心理优化)"></a>[6-12]修改显存大小 <strong>(心理优化)</strong></h2><p>首先声明这里的显存只是一个数字，并无任何实际作用！你要想装逼可以直接改个RTX3080(只不过也是Intel的显卡就是了xd)。   </p><p>打开 <code>config.plist</code>,进入 <code>DeviceProperties</code>:<br>首先添加你显卡所需要的参数，比如 <code>AAPL,ig-platform-id</code>,<br>然后这是添加显存参数 <code>framebuffer-unifiedmem</code>,值根据你想要显示的显存修改。    </p><p>显存值例子：<br>000000FF ➡️ 4080MB<br>00000080 ➡️ 2048MB  </p><p><img src="/cn/Open-Core-for-macOS-Big-Sur/image/4080-config.png" alt="VRAM"></p><p>备注：<code>UHD630</code> 经测试最高只能修改到4080MB，再往上会变成0MB。</p><p>保存重启即可。<br><img src="/cn/Open-Core-for-macOS-Big-Sur/image/4080.png" alt="VRAM">  </p><h2 id="6-13-解决-macOS-与-Windows-时间不同步"><a href="#6-13-解决-macOS-与-Windows-时间不同步" class="headerlink" title="[6-13]解决 macOS 与 Windows 时间不同步"></a>[6-13]解决 <code>macOS</code> 与 <code>Windows</code> 时间不同步</h2><p>造成两系统时间不同步的原因为两者对时间计算的方式不同，<br><code>Windows</code> 将 <code>BIOS</code> 时间作为系统时间，<br>而 <code>macOS</code> 将 <code>BIOS</code> 时间作为 <code>UTC</code> 时间，再根据你所在的时区进行计算得出系统时间。   </p><p>使用 <code>Hackintool</code> 解决问题：<br>打开 <code>Hackintool</code>,顶栏选择 <code>工具</code> &#x2F; <code>Tool</code>，点击底部第五个图标以生成 <code>Windows 注册表</code>。<br><img src="/cn/Open-Core-for-macOS-Big-Sur/image/time-1.png" alt="time"> </p><p><code>Hackintool</code> 会将生成的这两个文件放到 <code>桌面</code>，将这两个文件转入你的 <code>Windows</code>。<br><img src="/cn/Open-Core-for-macOS-Big-Sur/image/time-2.png" alt="time"> </p><p>进入 <code>Windows</code> 后，打开文件 <code>WinUTCOn.reg</code>将其注入进系统重启即可。<br>备注：<br>WinUTCOn.reg ➡️ 开启UTC时间计算<br>WinUTCOff.reg ➡️ 关闭UTC时间计算<br>当你不需要该时间结算方法后，双击运行 <code>WinUTCOff.reg</code> 即可。  </p><h1 id="7-附加：U盘直装"><a href="#7-附加：U盘直装" class="headerlink" title="[7]附加：U盘直装"></a>[7]附加：U盘直装</h1><p><em>搬运自 Bochi‘s Blog <a href="https://wanan.run/2020/07/07/OpenCoreU%E7%9B%98%E5%85%A8%E6%96%B0%E7%9B%B4%E8%A3%85BigSur/">OpenCore U盘全新直装Big Sur</a></em></p><h2 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：</h2><ul><li>U盘 16GB以上</li><li>安装文件</li><li>7&#x2F;6或更新的 <code>OC</code>，<code>Lilu</code>，<code>WhateverGreen</code></li></ul><p><del><code>Lilu</code> 和 <code>WhateverGreen</code> 我已放入<code>Tools</code>里,可以自行下载（同样由Bochi提供，在这里再次感谢🙏）。</del><br><strong>请从<code>release</code>里下载最新版本驱动，里面包含你们需要的 <code>Lilu</code> ， <code>WhateverGreen</code> 和 <code>OC</code>。</strong><br>什么？你说U盘也需要提供？你怕是再想peach！！！ 💢</p><h2 id="Config-修改-（OpenCore-0-6-0）："><a href="#Config-修改-（OpenCore-0-6-0）：" class="headerlink" title="Config 修改 （OpenCore 0.6.0）："></a>Config 修改 （OpenCore 0.6.0）：</h2><ul><li><code>NVRAM</code><ul><li><code>7C436110-AB2A-4BBB-A880-FE41995C9F82</code><ul><li>删除 <code>csr-active-config</code></li></ul></li></ul></li><li><del><code>Kernel</code></del> (VirtualSMC 1.1.5+ 已修复该问题)<ul><li><del><code>添加 / Add</code></del><ul><li><del>添加 <code>FakeSMC</code></del></li><li><del>禁用 <code>VirtualSMC</code></del></li></ul></li></ul></li></ul><p>保存退出</p><h2 id="将安装文件写入U盘"><a href="#将安装文件写入U盘" class="headerlink" title="将安装文件写入U盘"></a>将安装文件写入U盘</h2><p>终端输入指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /Volumes/Install\ macOS\ Beta/Install\ macOS\ Beta.app/Contents/Resources/createinstallmedia --volume /Volumes/UNTITLED /Volumes/Install\ macOS\ Beta/Install\ macOS\ Beta.app --nointeraction</span><br></pre></td></tr></table></figure><p>其中，<code>createinstallmedia</code>、<code>Install macOS Beta.app</code> 这两个文件、还有中间<code>/Volumes/UNTITLED</code>的<strong>U盘名字</strong>可以直接<strong>拖拽</strong>到终端。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>重启以U盘启动即可进入系统安装界面，接着一直点，重启几次便可完成系统安装</p><h2 id="启动项问题"><a href="#启动项问题" class="headerlink" title="启动项问题"></a>启动项问题</h2><p>如果安装成功后在OC中找不到新系统的启动项，就进入已经装好的Mac系统 ➡️ <code>系统偏好设置</code> ➡️ <code>启动磁盘</code> ➡️ 选择 <code>macOS 11</code> 的启动盘然后重新启动即可。</p><h1 id="8-参考"><a href="#8-参考" class="headerlink" title="[8]参考"></a>[8]参考</h1><ul><li><a href="https://github.com/EmeryWan/Razer-Blade-15-2018-Base-Hackintosh">https://github.com/EmeryWan/Razer-Blade-15-2018-Base-Hackintosh</a></li><li><a href="https://github.com/blade15basehackintosh/razerbladehackintosh">https://github.com/blade15basehackintosh/razerbladehackintosh</a></li><li><a href="https://github.com/doanhmaple/Razer-Blade-15-Advanced-2018-Hackintosh">https://github.com/doanhmaple/Razer-Blade-15-Advanced-2018-Hackintosh</a></li><li><a href="https://github.com/stonevil/Razer_Blade_Advanced_early_2019_Hackintosh">https://github.com/stonevil/Razer_Blade_Advanced_early_2019_Hackintosh</a></li><li><a href="https://blog.daliansky.net/">https://blog.daliansky.net/</a></li><li><a href="http://bbs.pcbeta.com/viewthread-1862049-1-1.html">http://bbs.pcbeta.com/viewthread-1862049-1-1.html</a></li><li><a href="http://bbs.pcbeta.com/viewthread-1862835-1-1.html">http://bbs.pcbeta.com/viewthread-1862835-1-1.html</a></li><li><a href="http://bbs.pcbeta.com/viewthread-1862148-1-1.html">http://bbs.pcbeta.com/viewthread-1862148-1-1.html</a></li><li><a href="https://wanan.run/2020/07/07/OpenCoreU%E7%9B%98%E5%85%A8%E6%96%B0%E7%9B%B4%E8%A3%85BigSur/">https://wanan.run/2020/07/07/OpenCoreU%E7%9B%98%E5%85%A8%E6%96%B0%E7%9B%B4%E8%A3%85BigSur/</a></li><li><a href="https://wanan.run/2020/07/01/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%AE%89%E8%A3%85Big%20Sur%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/">https://wanan.run/2020/07/01/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%AE%89%E8%A3%85Big%20Sur%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</a></li></ul><h1 id="9-变更目录"><a href="#9-变更目录" class="headerlink" title="[9]变更目录"></a>[9]变更目录</h1><ul><li><p>8&#x2F;19</p><ul><li>更新 beta5</li><li>删除启动参数 <code>-brcmfxbeta</code> ，<code>-hbfxbeta</code></li><li>默认禁用 <code>VerbStub</code>，需要使用请手动开启。</li></ul></li><li><p>8&#x2F;17</p><ul><li>添加 Windows &amp; macOS 时间同步教程</li></ul></li><li><p>8&#x2F;15</p><ul><li>象征性添加3.8GB &#x2F; 4080MB显存 （使用 <code>config_4080.plist</code>）</li><li>添加显存修改教程</li></ul></li><li><p>8&#x2F;14</p><ul><li>添加 <code>SecureBoot</code>，默认设置为 <code>j132</code> 对应 <code>MacBookPro15,2 (July 2018)</code></li><li>更新 <code>USBPorts.kext</code>，修复开机画幅大小的问题。</li><li>更新 <code>OpenCore Configurator 2.10.0.0</code></li></ul></li><li><p>8&#x2F;13</p><ul><li>修复 <code>DW1560</code> 在 <code>Beta4</code> 和 <code>Public Beta</code> 的问题</li><li><strong>更新8&#x2F;13号自编译 <code>VirtualSMC</code> (VirtualSMC 1.1.6)</strong><ul><li>Fix audio lags in Safari caused by reading SMM in SMCDellSensors plugin(<a href="https://github.com/acidanthera/VirtualSMC/pull/36">#36</a>)  </li><li>Sync changelog</li><li>Add experimental support for supplement information (<a href="https://github.com/acidanthera/VirtualSMC/pull/34">#34</a>)</li><li>Drop extra semicolon</li></ul></li><li><strong>更新8&#x2F;13号自编译 <code>Lilu</code>  （Lilu 1.4.7）</strong><ul><li>Sync changelog</li><li>Do not remove osfmk folder from SDK’s libraries (will be used by SMCDellSensors and probably SMCProcessor)</li></ul></li><li><strong>更新8&#x2F;13号自编译 <code>AppleALC</code>  （AppleALC 1.5.2）</strong><ul><li>Added missing layout7.xml (<a href="https://github.com/acidanthera/AppleALC/pull/586">#586</a>)</li><li>Update Changelog.md</li><li>Update README_CN.md</li></ul></li><li><strong>更新8&#x2F;13号自编译 <code>AirportBrcmFixup</code>（AirportBrcmFixup 2.0.9）</strong><ul><li>boot-arg and property <code>brcmfx-aspm</code> supports special value <code>255</code> in order to skip logic disabling APSM for 0x14e4:0x43a3 (DW1820A).</li><li>Update Changelog.md</li></ul></li></ul></li><li><p>8&#x2F;12</p><ul><li>更新正式版 <code>EFI</code> </li><li>更新 <code>OpenCore Configurator 2.9.1.0</code> </li><li>更改机型为 <code>MacBook Pro 15,2</code></li><li>添加图像化引导</li></ul></li><li><p>8&#x2F;7</p><ul><li>更新HIDPi教程</li></ul></li><li><p>8&#x2F;4</p><ul><li>更新USB定制教程</li><li>更新 macOS Big Sur Beta 4</li></ul></li><li><p>8&#x2F;3</p><ul><li>更新EFI驱动到最新稳定版本</li><li>更新官方Kext全家桶（搬运自@acidanthera）</li><li>更新OpenCore 0.6.0 （搬运自@acidanthera）</li><li>更新macOS系统优化：USB驱动定制教程</li><li><strong>更新8&#x2F;3号自编译 <code>VirtualSMC</code> (VirtualSMC 1.1.4)</strong> <ul><li>Improve SMC generation debugging</li><li>Force x86_64</li><li>Resolve booting issue on macOS 11 due to provider race condition</li><li>Get things compile in Xcode 12 (is not guaranteed to work)</li><li>Fixed crashes when trying to read CLKT key</li><li>Update README.md</li></ul></li><li><strong>更新8&#x2F;3号自编译 <code>Lilu</code>  （Lilu 1.4.6）</strong><ul><li>Fixed another race condition in kext patcher loading code in 11.0</li><li>Resolve init issues on 11.0 with multiple PCI root devices</li><li>Force x86_64</li><li>Process already loaded kexts early in 11.0</li><li>Make function routing atomic in several places</li><li>Get things compile in Xcode 12 (is not guaranteed to work)</li><li>Initialise kernel patches in parallel to PCI</li><li>Add RTC register indices</li><li>Abort on PCI register read failure</li><li>Implement Lilu loading at console init in 11.0</li><li>Fix typo in debug logging</li><li>Update README.md</li></ul></li><li><strong>更新8&#x2F;3号自编译 <code>WhateverGreen</code>  （WhateverGreen 1.4.1）</strong><ul><li>Force x86_64</li><li>fix typo and spaces (<a href="https://github.com/acidanthera/WhateverGreen/pull/59">#59</a>)</li><li>Get things compile in Xcode 12 (is not guaranteed to work)</li><li>Update FAQ.IntelHD.cn.md (<a href="https://github.com/acidanthera/WhateverGreen/pull/58">#58</a>)</li><li>Update README.md</li><li>Update FAQ.IntelHD.en.md</li></ul></li><li><strong>新增8&#x2F;3号自编译 <code>NVMeFix</code>   (NVMeFix 1.0.3)</strong><ul><li>Added constants for 11.0 support.</li><li>Get things compile in Xcode 12 (is not guaranteed to work)</li><li>Leave a note regarding 11.0</li><li>Force x86_64</li></ul></li><li><strong>新增8&#x2F;3号自编译 <code>CPUFriend</code>   (CPUFriend 1.2.1)</strong><ul><li>Added constants for 11.0 support</li><li>Get things compile in Xcode 12 (is not guaranteed to work)</li><li>Force x86_64</li></ul></li><li><strong>更新8&#x2F;3号自编译 <code>AppleALC</code>  （AppleALC 1.5.1）</strong><ul><li>Force x86_64</li><li>Get things compile in Xcode 12 (is not guaranteed to work)</li><li>Update README.md</li></ul></li><li><strong>更新8&#x2F;3号自编译 <code>AirportBrcmFixup</code>（AirportBrcmFixup 2.0.8）</strong><ul><li>Force x86_64</li><li>Get things compile in Xcode 12 (is not guaranteed to work)</li><li>Fix ordering of build stages (<a href="https://github.com/acidanthera/AirportBrcmFixup/pull/8">#8</a>)</li><li>Update README.md</li></ul></li><li><strong>更新8&#x2F;3号自编译 <code>HibernationFixup</code>   (HibernationFixup 1.3.4)</strong><ul><li>Force x86_64</li><li>Get things compile in Xcode 12 (is not guaranteed to work)</li><li>Added constants for 11.0 support</li></ul></li><li><strong>更新8&#x2F;2号编译版本 <code>OpenCore</code> (OpenCore 0.6.0)</strong><ul><li>Update SSDT-EC-USBX.dsl</li><li>OcCpuLib: Fix display name for i9 CPUs like 7920X</li></ul></li></ul></li><li><p>8&#x2F;2</p><ul><li><strong>睡眠修复，现在可以直接合盖睡眠或手动点击睡眠💤 ！！！</strong></li><li><strong>更新8&#x2F;1号编译版本 <code>OpenCore</code> (OpenCore 0.6.0)<strong>（</strong>I disable nvmefix, if you are using nvme drive you should enable it!!! &#x2F; 我在efi中未启用nvmefix的kext，如果你使用nvme硬盘使用系统，请手动启用！！！</strong>)<ul><li>Patches: Add AtaAtapiPassThru IDE timeout patch</li><li>OcAppleSecureBootLib: Fix invalid assertion</li><li>OcAppleIm4Lib: Fix memcpy undefined reference</li><li>Include: Add BlockIoVendor header</li><li>EfiLdr: Revert removal of memmap shifts</li><li>Include: Update AppleCsrConfig with 11.0 definitions</li><li>BootSector: Drop unused and non-functional GENPAGE mode</li><li>EfiLdr: Fixed 32-bit booting on machines with over 4 GBs of RAM</li><li>Docs: Document the DeviceProperty limitations for some drivers</li><li>Update SSDT-EC-USBX.dsl (#92)</li><li>OcXmlLib: Free original buffer on failure</li><li>OcXmlLib: Correct&#x2F;clarify XmlDocumentExport</li><li>OcXmlLib: Fix previous commit</li><li>OcXmlLib: Add plist doctype export option</li><li>DataBase: Fixed BIOSReleaseDates</li><li>PlatformInfo Automatic for all models</li><li>Build: Fix warnings</li><li>OcFileLib: Implement AllocateCopyFileData</li><li>OcXmlLib: Implement XmlNodeChangeContent</li><li>Utilities: Drop OpenDuetPkg binary and rebuild it with OC</li><li>OcDevicePathLib: Added a workaround for PCI0 with 0x1 _UID</li><li>OpenCoreMisc: Perform serial init separately via SerialInit option</li><li>Docs: Fix the hint regarding RebuildAppleMemoryMap</li><li>OcAfterBootCompatLib: Fix 32-bit dead loop</li><li>Docs: Provide errata entry on OSXSAVE issue</li><li>OcAppleKernelLib: Fixed OSXSAVE reporting when emulating CPUID on newer CPUs</li><li>Docs: Improve the documentation</li><li>OcConsoleLib: Update UGA comments</li><li>OcFileLib: Consolidate to use GetFileInfo</li><li>DataBase: Update builtin firmware versions for 11.0</li><li>Update SampleLegacy.plist</li></ul></li></ul></li><li><p>8&#x2F;1</p><ul><li>更新 <code>USB-Adapter</code> 驱动 by <code>chris1111</code></li></ul></li><li><p>7&#x2F;30</p><ul><li>更新BIOS教程 (Base版 Only)</li></ul></li><li><p>7&#x2F;26</p><ul><li>修复CLT问题</li></ul></li><li><p>7&#x2F;25</p><ul><li>修复SIP问题</li><li>修复Authenticated-root问题</li><li>修复系统写入权限&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#x2F;[Beta3]貌似已失效，后续会进行测试&#x2F;</li></ul></li><li><p>7&#x2F;22</p><ul><li>更新 macOS Big Sur beta3</li></ul></li><li><p>7&#x2F;20 </p><ul><li><strong>更新7&#x2F;20号自编译 <code>WhateverGreen</code>  （WhateverGreen 1.4.1）</strong><ul><li>Update FAQ.IntelHD.en.md</li></ul></li><li><strong>更新7&#x2F;20号自编译 <code>AirportBrcmFixup</code>（AirportBrcmFixup 2.0.8）</strong><ul><li>Support brcmfx-aspm for all chipsets</li><li>Support boot-arg &amp; property <code>brcmfx-aspm</code> to override value used for pci-aspm-default, support ioreg property brcmfx-wowl</li></ul></li><li><strong>更新7&#x2F;20号编译版本 <code>OpenCore</code> (OpenCore 0.6.0)</strong><ul><li>Includes: Fix MKext header comments</li><li>OcCompressionLib: Expose Adler32 function</li><li>OcDevicePathLib: Fix potential deadloop</li><li>Patches: Add AtaAtapiPassThru patches for G33</li><li>Includes: Add missing Mach prefixes</li><li>Includes: Fix additional typos</li><li>OcFileLib: Fix typo</li><li>Patches: Add SataControllerDxe patch for G33 in RAID mode</li><li>OcAppleKernelLib: Fix memory corruption with many kexts in 11.0</li></ul></li></ul></li><li><p>7&#x2F;18 </p><ul><li><strong>新增自编译驱动 <code>VoodooInput</code> (VoodooInput 1.0.6)</strong></li><li><strong>更新7&#x2F;18号编译版本 <code>OpenCore</code> (OpenCore 0.6.0)</strong><ul><li>Docs: Fix debugging patches</li><li>Docs: generated pdf</li><li>OcMemoryLib: Fix typo</li><li>Utilities&#x2F;KextInject: Determine Info&#x2F;EXE reserve sizes</li></ul></li></ul></li><li><p>7&#x2F;16 </p><ul><li><strong>更新7&#x2F;16号自编译 <code>AirportBrcmFixup</code>（AirportBrcmFixup 2.0.8）</strong><ul><li>Fix critical issue introduced in previous 2 commits (getting of brcmfx-driver index)</li><li>Check and fix incorrect value brcmfx-driver (if specified value is unsupported in current osx system)</li></ul></li><li><strong>更新7&#x2F;16号自编译 <code>VirtualSMC</code> (VirtualSMC ?.?.?)</strong> <ul><li>Include SMCDellSensors in package (<a href="https://github.com/acidanthera/VirtualSMC/pull/33">#33</a>)</li><li>Sync changelog</li><li>Compatibility fixes in SMCBatteryManager for 10.16 (<a href="https://github.com/acidanthera/VirtualSMC/pull/32">#32</a>)</li><li>Update Changelog.md</li><li><strong>Added a new plugin SMCDellSensors (adapted SMI Monitor from HWSensors):</strong><ul><li>monitor and control temperature and fans in Dell computers by using SMM technology (<a href="https://github.com/acidanthera/VirtualSMC/pull/31">#31</a>)<ul><li>Port SMIMonitor for VirtualSMC</li><li>Use mp_rendezvous instead of mp_rendezvous_no_intrs and disable&#x2F;enable interrupts in assembler code</li><li>Add keys for fan control, configurable multiplier and names</li><li>Fix issue with non-sorted keys, add target speed support.</li><li>Update Changelog.md</li><li>Fix project &amp; file name in sources, add copyrights and links to the original sources</li><li>Fix issues in fan control, remove unsupported on real Macs key F0As.</li><li>Use _Atomic instead of stateLock</li><li>Do not disable interrupts while reading SMM, rename variables according to review remarks.</li><li>Increase SMM reading interval</li><li>Increase maximum amount of temp sensors 8</li><li>Revert max amount of temp sensors to 6 (we do not have so many smc keys to keep them all), rename variable for FS! again (with comments)</li><li>Fix attributes for F0Mn &amp; F0Mx, add logging if someone wants to update these keys</li><li>Disable update timer during sleep&#x2F;shutdown phase, otherwise reading of SMM prevents sleeping with closed lid.</li><li>Use DBGLOG for logging</li><li>Fix module version and remove unused variable.</li><li><strong>Co-authored-by: lvs1974<br><a href="mailto:&#x6c;&#118;&#x73;&#49;&#57;&#x37;&#52;&#64;&#117;&#115;&#101;&#114;&#x73;&#46;&#x6e;&#111;&#114;&#x65;&#112;&#108;&#x79;&#x2e;&#103;&#x69;&#x74;&#104;&#x75;&#98;&#x2e;&#x63;&#111;&#109;">&#x6c;&#118;&#x73;&#49;&#57;&#x37;&#52;&#64;&#117;&#115;&#101;&#114;&#x73;&#46;&#x6e;&#111;&#114;&#x65;&#112;&#108;&#x79;&#x2e;&#103;&#x69;&#x74;&#104;&#x75;&#98;&#x2e;&#x63;&#111;&#109;</a></strong></li></ul></li></ul></li></ul></li><li><strong>更新7&#x2F;16号编译版本 <code>OpenCore</code> (OpenCore 0.6.0)</strong><ul><li>OcBootManagementLib: Load icons for custom boot entries (<a href="https://github.com/acidanthera/OpenCorePkg/pull/91">#91</a>)</li><li>Update Changelog.md</li><li>DataBase: Update builtin firmware versions</li><li>Update AutoGenerated.c</li><li>DataBase: Update SmcRevision</li><li>OcFileLib: Provide workaround for buggy drivers</li><li>DataBase: Fixed typos</li><li>Includes: AppleKeyMapAggregator revision is UINT64</li><li>OcMemoryLib: Fix typo</li></ul></li></ul></li><li><p>7&#x2F;15</p><ul><li>更新 <code>macOS 10.15.6</code> 正式版 &amp; <code>Safari 14.0</code> 测试版 <strong>（非 <code>Big Sur</code> 更新）</strong></li></ul></li><li><p>7&#x2F;14 </p><ul><li><strong>更新7&#x2F;14号自编译 <code>VirtualSMC</code> (VirtualSMC ?.?.?)</strong> <ul><li>Fixed running smcread on 11.0 without IOKit framework</li></ul></li><li><strong>更新7&#x2F;14号编译版本 <code>OpenCore</code> (OpenCore 0.6.0)</strong><ul><li>Docs: Fixed typo</li><li>DataBase: Updeted MBP164</li></ul></li></ul></li><li><p>7&#x2F;13</p><ul><li><strong>更新7&#x2F;13号自编译 <code>VirtualSMC</code> (VirtualSMC ?.?.?)</strong> <ul><li>Update README.md  <strong>(只是更新说明文档，无驱动变化)</strong></li></ul></li><li><strong>更新7&#x2F;13号自编译 <code>WhateverGreen</code>  （WhateverGreen 1.4.1）</strong><ul><li>Update README.md  <strong>(只是更新说明文档，无驱动变化)</strong></li></ul></li><li><strong>更新7&#x2F;13号自编译 <code>AppleALC</code>  （AppleALC 1.5.1）</strong><ul><li>Update README.md  <strong>(只是更新说明文档，无驱动变化)</strong></li></ul></li><li><strong>更新7&#x2F;13号自编译版本 <code>Lilu</code> (Lilu 1.4.6)</strong><ul><li>Update README.md  <strong>(只是更新说明文档，无驱动变化)</strong></li></ul></li><li><strong>更新7&#x2F;13号编译版本 <code>OpenCore</code> (OpenCore 0.6.0)</strong><ul><li>Delete OpenCore_with_text_Right.png</li><li>Docs: Fixed previous</li><li>Docs: Added links to customised icons.</li><li>Docs: Update SampleLegacy</li><li>Docs: Fixed Samples</li></ul></li></ul></li><li><p>7&#x2F;12</p><ul><li><strong>新增7&#x2F;12号编译版本 <code>OpenCore</code> (OpenCore 0.6.0) [转载自<code>OpenCore-Factory</code>]</strong><ul><li>Docs: Drop Generic key as it is unused from Legacy</li><li>Docs: Rename SampleFull to SampleLegacy and fix typos</li></ul></li><li><strong>更新7&#x2F;12号自编译 <code>VirtualSMC</code> (VirtualSMC ?.?.?)</strong> <ul><li>Fix sign issues in legacy smc tool</li></ul></li></ul></li><li><p>7&#x2F;11</p><ul><li>更新一些我自己用的壁纸….（算是给自己的壁纸做备份？？？)</li><li><strong>更新7&#x2F;11号自编译 <code>AirportBrcmFixup</code>（AirportBrcmFixup 2.0.8）</strong><ul><li>Merge remote-tracking branch <code>refs/remotes/origin/master</code></li><li>Fix wrong base class IOService for FakeBrcm, now it works in older osx</li><li>Update README.md</li><li>Commit required files for previous commit</li><li>Remove injectors for AirPortBrcm4360 and AirPortBrcmNIC from main Info.plist and move them into separate plugins AirPortBrcm4360_Injector and AirPortBrcmNIC_Injector (kexts with plist only)</li></ul></li></ul></li><li><p>7&#x2F;10</p><ul><li>Release打包 📦  改为分包模式：<ul><li><code>x/x-DEBUG.zip</code></li><li><code>x/x-RELEASE.zip</code>  (一般使用<code>RELEASE</code>版即可)</li></ul></li><li>修复Wi-Fi不定时自动断开的毛病</li><li>更新release分支，一般会在8 ~ 24小时左右更新驱动<ul><li><strong>⚠️ 注意：我发布的自编译驱动未经原作者同意，因此有问题请不要在原作者的issue里发表！⚠️</strong></li></ul></li><li><strong>更新7&#x2F;10号自编译 <code>Lilu</code>  （Lilu 1.4.6）</strong><ul><li>Silence stupid clang analyzer</li></ul></li><li><strong>更新7&#x2F;10号自编译 WhateverGreen  （WhateverGreen 1.4.1）</strong><ul><li>Revert workaround for ATIController::start on 11.0</li></ul></li></ul></li><li><p>7&#x2F;9</p><ul><li><strong>更新7&#x2F;9号自编译 <code>OpenCore</code> （OC 0.6.0）</strong> (已添加进Tools里)<ul><li>DxeIpl: Fix ACPI reset register detection</li></ul></li><li><strong>更新7&#x2F;8号自编译 <code>Lilu</code>  （Lilu 1.4.6）</strong><ul><li>Added device publishing API to monitor device startup</li></ul></li><li><strong>更新7&#x2F;9号自编译 <code>WhateverGreen</code>  （WhateverGreen 1.4.1）</strong><ul><li>Add first generation Intel HD Graphics support</li></ul></li><li><strong>更新7&#x2F;8号自编译 <code>AppleALC</code>  （AppleALC 1.5.1）</strong><ul><li>Use new device publishing API for 11.0 syncing</li></ul></li><li><strong>更新7&#x2F;5号自编译 <code>AirportBrcmFixup</code>  （AirportBrcmFixup 2.0.8）</strong><ul><li>Fix warning ‘Value stored to ‘subSystemDeviceID’ during its initializ…</li></ul></li></ul></li><li><p>7&#x2F;7</p><ul><li><strong>更新 macOS Big Sur beta2</strong></li><li><strong>更换 <code>VisualSMC</code> 为 <code>FakeSMC</code></strong></li></ul></li><li><p>7&#x2F;5</p><ul><li>更换 <code>Broadcom BCM94352Z</code> &#x2F; <code>DW1560</code> 网卡 <ul><li>蓝牙得到解决</li><li>Wi-Fi得到解决</li><li>状态栏卡顿得到解决</li></ul></li><li><strong>修复状态栏卡顿</strong></li></ul></li><li><p>7&#x2F;4</p><ul><li><strong>修复开机画屏</strong></li><li><strong>修复电池显示</strong></li><li><strong>修复触摸板</strong></li></ul></li><li><p>6&#x2F;30</p><ul><li><strong>更新 macOS Big Sur beta1</strong>  </li><li><strong>更新 OC 0.6.0</strong></li></ul></li></ul><p><del>后续内容还在施工中👷，请耐心等待⌛️</del><br><del>作者不会鸽的放心吧，咕咕咕咕～～～</del></p><blockquote><p>文章大致已经完成  ✅ ，后续将为各种小修小补…</p></blockquote><h2 id="未来计划-Plans-："><a href="#未来计划-Plans-：" class="headerlink" title="未来计划 &#x2F; Plans ："></a>未来计划 &#x2F; Plans ：</h2><ul><li><del>增加BIOS修改的图文教程 &#x2F; Add detail for BIOS’s tutorial  [七月底 &#x2F; Late July]</del> [已完成 &#x2F; Finished] ✅</li><li><del>独立变更目录 &#x2F; Separate <code>changelog</code> to a individual file [七月底 &#x2F; Late July]</del> [已完成 &#x2F; Finished] ✅</li><li><del>增加英语版本教程 &#x2F; Add <code>English</code> version [八月底 &#x2F; Late August]</del> ❌<ul><li><strong>Reason for cancellation</strong> : <code>OC</code> now support <code>OTA</code>, no more need for this tutorial.</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> macOS </category>
          
          <category> OpenCore </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macOS </tag>
            
            <tag> 黑苹果 </tag>
            
            <tag> OpenCore </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
